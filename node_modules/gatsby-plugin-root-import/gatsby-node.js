"use strict";

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

var path = require("path");

exports.onCreateWebpackConfig = function (_ref, pluginOptions) {
  var actions = _ref.actions,
      getConfig = _ref.getConfig;

  var hasPluginOptions = Object.keys(pluginOptions).filter(function (item) {
    return item !== "plugins";
  }).length;
  var config = getConfig();
  var contextSrc = path.join(config.context, "src");
  var defaultModules = [contextSrc, "node_modules"];

  if (hasPluginOptions) {
    var plugins = pluginOptions.plugins,
        resolveModules = pluginOptions.resolveModules,
        aliasOptions = _objectWithoutProperties(pluginOptions, ["plugins", "resolveModules"]);

    var modules = !resolveModules ? defaultModules : [].concat(_toConsumableArray(resolveModules), defaultModules);

    actions.setWebpackConfig({
      resolve: {
        alias: _extends({ src: contextSrc }, aliasOptions),
        modules: modules
      }
    });
  } else {
    actions.setWebpackConfig({
      resolve: {
        alias: { src: contextSrc },
        modules: defaultModules
      }
    });
  }
};