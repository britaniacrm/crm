import slice from 'lodash/slice';

/**
 * Paginate a static array
 * @param {Array} arr Array that will be paginated
 * @param {Number} [pageSize = 5] How mutch items will be retorned for each page
 * @param {Number} [page = 1] The page that you want get the items
 * @param {Boolean} [withOlders = false] If `true` returning from first item of original array to last item of the current `page`
 * @return {Object}
 * @property {Array} items Items from delivered `page`
 * @property {Number} lastPage Number of the last page with current `pageSize`
 *
 * @example
 * import paginateArray from '@meta-awesome/functions/src/paginateArray'
 *
 * const myArray = ['foo', 'bar', 'baz', 'qux']
 *
 * paginateArray(myArray, 2, 1);
 * // { items: ['foo', 'bar'], lastPage: 2 }
 *
 * paginateArray(myArray, 2, 2);
 * // { items: ['baz', 'qux'], lastPage: 2 }
 *
 * paginateArray(myArray, 3, 1);
 * // { items: ['foo', 'bar', 'baz'], lastPage: 2 }
 *
 * paginateArray(myArray, 3, 2);
 * // { items: ['qux'], lastPage: 2 }
 *
 * paginateArray(myArray, 1, 3, true);
 * // { items: ['foo', 'bar', 'baz'], lastPage: 4 }
 * */
const paginateArray = (arr, pageSize = 5, page = 1, withOlders = false) => {
  // because pages logically start with 1, but technically with 0
  const start = (page - 1) * pageSize;
  const end = start + pageSize;
  const lastPage = Math.ceil(arr.length / pageSize);
  return {
    items: slice(arr, withOlders ? 0 : start, end),
    lastPage
  };
};

export default paginateArray;
