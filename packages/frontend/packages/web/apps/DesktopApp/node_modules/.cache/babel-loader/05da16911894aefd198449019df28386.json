{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/components/InputAutocomplete/InputAutocompleteStyled.js\";\nimport React, { useState, useEffect, useCallback, useMemo, useRef, forwardRef, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport debounce from 'lodash/debounce';\nimport isEmpty from 'lodash/isEmpty';\nimport size from 'lodash/size';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport crmApi from '@britania-crm/services/apis/crmApi';\nimport { areEqual } from '@britania-crm/utils/memo';\nimport IconButton from '@britania-crm/web-components/IconButton';\nimport SearchIconButton from '@britania-crm/web-components/IconButton/SearchIconButton';\nimport InfoIcon from '@britania-crm/web-components/Icons/infoIcon';\nimport InputText from '@britania-crm/web-components/InputText';\nimport Tooltip from '@britania-crm/web-components/Tooltip';\nimport useStyles from './styles';\nconst InputAutocompleteStyled = forwardRef(({\n  api,\n  url,\n  label,\n  normalizeDataFn,\n  noOptionsText,\n  loadingText,\n  onChange,\n  required,\n  paramName,\n  params,\n  value,\n  valueKey,\n  disabled,\n  options: optionsProp,\n  loading: externalLoading,\n  infoDescription,\n  ...rest\n}, fieldRef) => {\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n  const [options, setOptions] = useState([]);\n  const query = useRef('');\n  const [internalLoading, setLoading] = useState(false);\n  const loading = useMemo(() => internalLoading || externalLoading, [externalLoading, internalLoading]);\n  const updateList = useCallback(debounce(async () => {\n    if (url) {\n      try {\n        setLoading(true);\n        let newParams = params;\n\n        if (query.current) {\n          newParams = {\n            [paramName]: query.current,\n            ...params\n          };\n        }\n\n        const response = await api.get(url, {\n          params: newParams\n        });\n        setOptions(normalizeDataFn(response === null || response === void 0 ? void 0 : response.data));\n      } finally {\n        setLoading(false);\n      }\n    }\n  }, 300), [api, normalizeDataFn, paramName, params, query, url]);\n  const onInputChange = useCallback((event, value, reason) => {\n    if (reason === 'input') {\n      if (size(value) > 2) {\n        query.current = value;\n        updateList();\n      } else {\n        query.current = '';\n        setOptions([]);\n      }\n    }\n  }, [updateList]);\n  const handleChange = useCallback((event, newValue) => onChange(newValue || {}), [onChange]);\n  const handleClickSearch = useCallback(debounce(() => {\n    updateList();\n    setOpen(true);\n  }, 200), [url]);\n  useEffect(() => {\n    if (!url) {\n      setOptions(optionsProp);\n    }\n  }, [optionsProp, url]);\n  useEffect(() => {\n    if (url && !isEmpty(value) && isEmpty(options)) {\n      query.current = value.name;\n      updateList();\n    }\n\n    return updateList.cancel;\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [query, updateList, url, value]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.body,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Autocomplete, {\n    ref: fieldRef,\n    classes: {\n      root: classes.root,\n      input: classes.autocomplete\n    },\n    open: open,\n    onOpen: () => {\n      setOpen(true);\n    },\n    onClose: () => {\n      setOpen(false);\n    },\n    disabled: disabled,\n    getOptionSelected: (option, value) => option[valueKey] === value[valueKey],\n    getOptionLabel: option => option[valueKey] ? option[valueKey].toString() : '',\n    onInputChange: onInputChange,\n    options: options,\n    loading: loading,\n    onChange: handleChange,\n    noOptionsText: noOptionsText,\n    loadingText: loadingText,\n    value: isEmpty(value) ? null : value,\n    renderInput: params => /*#__PURE__*/React.createElement(InputText, Object.assign({}, params, rest, {\n      detached: true,\n      disabled: disabled,\n      name: \"auto-complete\",\n      label: label,\n      variant: \"outlined\",\n      required: required,\n      InputProps: { ...params.InputProps,\n        endAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n          position: \"end\",\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 171,\n            columnNumber: 17\n          }\n        }, loading && /*#__PURE__*/React.createElement(CircularProgress, {\n          color: \"inherit\",\n          size: 18,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 173,\n            columnNumber: 21\n          }\n        }), !disabled && /*#__PURE__*/React.createElement(SearchIconButton, {\n          color: \"secondary\",\n          onClick: handleClickSearch,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 179,\n            columnNumber: 21\n          }\n        }))\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 11\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }\n  }), infoDescription && /*#__PURE__*/React.createElement(Tooltip, {\n    title: infoDescription,\n    arrow: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    color: \"care\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InfoIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 13\n    }\n  }))));\n});\nInputAutocompleteStyled.propTypes = {\n  url: PropTypes.string,\n  label: PropTypes.string.isRequired,\n  normalizeDataFn: PropTypes.func,\n  noOptionsText: PropTypes.string,\n  loadingText: PropTypes.string,\n  onChange: PropTypes.func,\n  paramName: PropTypes.string,\n  required: PropTypes.bool,\n  value: PropTypes.object,\n  valueKey: PropTypes.string,\n  options: PropTypes.array,\n  api: PropTypes.any,\n  params: PropTypes.object,\n  loading: PropTypes.bool,\n  disabled: PropTypes.bool,\n  infoDescription: PropTypes.string\n};\nInputAutocompleteStyled.defaultProps = {\n  type: 'text',\n  noOptionsText: 'Sem opções',\n  loadingText: 'Carregando...',\n\n  onChange() {},\n\n  normalizeDataFn: d => d,\n  required: false,\n  value: {},\n  valueKey: 'name',\n  url: '',\n  options: [],\n  api: crmApi,\n  paramName: 'name',\n  params: {},\n  loading: false,\n  disabled: false,\n  infoDescription: ''\n};\nexport default memo(InputAutocompleteStyled, areEqual);","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/components/InputAutocomplete/InputAutocompleteStyled.js"],"names":["React","useState","useEffect","useCallback","useMemo","useRef","forwardRef","memo","PropTypes","debounce","isEmpty","size","CircularProgress","InputAdornment","Autocomplete","crmApi","areEqual","IconButton","SearchIconButton","InfoIcon","InputText","Tooltip","useStyles","InputAutocompleteStyled","api","url","label","normalizeDataFn","noOptionsText","loadingText","onChange","required","paramName","params","value","valueKey","disabled","options","optionsProp","loading","externalLoading","infoDescription","rest","fieldRef","classes","open","setOpen","setOptions","query","internalLoading","setLoading","updateList","newParams","current","response","get","data","onInputChange","event","reason","handleChange","newValue","handleClickSearch","name","cancel","body","root","input","autocomplete","option","toString","InputProps","endAdornment","propTypes","string","isRequired","func","bool","object","array","any","defaultProps","type","d"],"mappings":"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","sourcesContent":["import React, {\n  useState,\n  useEffect,\n  useCallback,\n  useMemo,\n  useRef,\n  forwardRef,\n  memo\n} from 'react'\n\nimport PropTypes from 'prop-types'\n\nimport debounce from 'lodash/debounce'\nimport isEmpty from 'lodash/isEmpty'\nimport size from 'lodash/size'\n\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport InputAdornment from '@material-ui/core/InputAdornment'\nimport Autocomplete from '@material-ui/lab/Autocomplete'\n\nimport crmApi from '@britania-crm/services/apis/crmApi'\nimport { areEqual } from '@britania-crm/utils/memo'\nimport IconButton from '@britania-crm/web-components/IconButton'\nimport SearchIconButton from '@britania-crm/web-components/IconButton/SearchIconButton'\nimport InfoIcon from '@britania-crm/web-components/Icons/infoIcon'\nimport InputText from '@britania-crm/web-components/InputText'\nimport Tooltip from '@britania-crm/web-components/Tooltip'\n\nimport useStyles from './styles'\n\nconst InputAutocompleteStyled = forwardRef(({\n  api,\n  url,\n  label,\n  normalizeDataFn,\n  noOptionsText,\n  loadingText,\n  onChange,\n  required,\n  paramName,\n  params,\n  value,\n  valueKey,\n  disabled,\n  options: optionsProp,\n  loading: externalLoading,\n  infoDescription,\n  ...rest\n}, fieldRef) => {\n  const classes = useStyles()\n\n  const [open, setOpen] = useState(false)\n  const [options, setOptions] = useState([])\n  const query = useRef('')\n  const [internalLoading, setLoading] = useState(false)\n\n  const loading = useMemo(\n    () => internalLoading || externalLoading,\n    [externalLoading, internalLoading]\n  )\n\n  const updateList = useCallback(\n    debounce(\n      async () => {\n        if (url) {\n          try {\n            setLoading(true)\n            let newParams = params\n            if (query.current) {\n              newParams = { [paramName]: query.current, ...params }\n            }\n            const response = await api.get(url, { params: newParams })\n            setOptions(normalizeDataFn(response?.data))\n          } finally {\n            setLoading(false)\n          }\n        }\n      },\n      300\n    ),\n    [api, normalizeDataFn, paramName, params, query, url]\n  )\n\n  const onInputChange = useCallback(\n    (event, value, reason) => {\n      if (reason === 'input') {\n        if (size(value) > 2) {\n          query.current = value\n          updateList()\n        } else {\n          query.current = ''\n          setOptions([])\n        }\n      }\n    },\n    [updateList]\n  )\n\n  const handleChange = useCallback(\n    (event, newValue) => onChange(newValue || {}),\n    [onChange]\n  )\n\n  const handleClickSearch = useCallback(\n    debounce(\n      () => {\n        updateList()\n        setOpen(true)\n      },\n      200\n    ),\n    [url]\n  )\n\n  useEffect(\n    () => {\n      if (!url) {\n        setOptions(optionsProp)\n      }\n    },\n    [optionsProp, url]\n  )\n\n  useEffect(\n    () => {\n      if (url && !isEmpty(value) && isEmpty(options)) {\n        query.current = value.name\n        updateList()\n      }\n      return updateList.cancel\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [query, updateList, url, value]\n  )\n\n  return (\n    <div className={ classes.body }>\n      <Autocomplete\n        ref={ fieldRef }\n        classes={ { root: classes.root, input: classes.autocomplete } }\n        open={ open }\n        onOpen={ () => {\n          setOpen(true)\n        } }\n        onClose={ () => {\n          setOpen(false)\n        } }\n        disabled={ disabled }\n        getOptionSelected={ (option, value) => option[valueKey] === value[valueKey] }\n        getOptionLabel={ (option) => option[valueKey] ? option[valueKey].toString() : '' }\n        onInputChange={ onInputChange }\n        options={ options }\n        loading={ loading }\n        onChange={ handleChange }\n        noOptionsText={ noOptionsText }\n        loadingText={ loadingText }\n        value={ isEmpty(value) ? null : value }\n        renderInput={ (params) => (\n          <InputText\n            { ...params }\n            { ...rest }\n            detached\n            disabled={ disabled }\n            name=\"auto-complete\"\n            label={ label }\n            variant=\"outlined\"\n            required={ required }\n            InputProps={ {\n              ...params.InputProps,\n              endAdornment: (\n                <InputAdornment position=\"end\">\n                  {loading && (\n                    <CircularProgress\n                      color=\"inherit\"\n                      size={ 18 }\n                    />\n                  ) }\n                  {!disabled && (\n                    <SearchIconButton\n                      color=\"secondary\"\n                      onClick={ handleClickSearch }\n                    />\n                  )}\n                </InputAdornment>\n              )\n            } }\n          />\n        ) }\n      />\n      {infoDescription && (\n        <Tooltip title={ infoDescription } arrow>\n          <IconButton color=\"care\" >\n            <InfoIcon />\n          </IconButton>\n        </Tooltip>\n      )\n      }\n    </div>\n  )\n})\n\nInputAutocompleteStyled.propTypes = {\n  url: PropTypes.string,\n  label: PropTypes.string.isRequired,\n  normalizeDataFn: PropTypes.func,\n  noOptionsText: PropTypes.string,\n  loadingText: PropTypes.string,\n  onChange: PropTypes.func,\n  paramName: PropTypes.string,\n  required: PropTypes.bool,\n  value: PropTypes.object,\n  valueKey: PropTypes.string,\n  options: PropTypes.array,\n  api: PropTypes.any,\n  params: PropTypes.object,\n  loading: PropTypes.bool,\n  disabled: PropTypes.bool,\n  infoDescription: PropTypes.string\n}\n\nInputAutocompleteStyled.defaultProps = {\n  type: 'text',\n  noOptionsText: 'Sem opções',\n  loadingText: 'Carregando...',\n  onChange () {},\n  normalizeDataFn: (d) => d,\n  required: false,\n  value: {},\n  valueKey: 'name',\n  url: '',\n  options: [],\n  api: crmApi,\n  paramName: 'name',\n  params: {},\n  loading: false,\n  disabled: false,\n  infoDescription: ''\n}\n\nexport default memo(InputAutocompleteStyled, areEqual)\n"]},"metadata":{},"sourceType":"module"}