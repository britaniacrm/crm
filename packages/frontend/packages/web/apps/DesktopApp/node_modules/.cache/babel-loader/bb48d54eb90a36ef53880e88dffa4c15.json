{"ast":null,"code":"/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n/* jslint esnext: true */\n\"use strict\";\n\nexports[\"default\"] = Compiler;\n\nfunction Compiler(locales, formats, pluralFn) {\n  this.locales = locales;\n  this.formats = formats;\n  this.pluralFn = pluralFn;\n}\n\nCompiler.prototype.compile = function (ast) {\n  this.pluralStack = [];\n  this.currentPlural = null;\n  this.pluralNumberFormat = null;\n  return this.compileMessage(ast);\n};\n\nCompiler.prototype.compileMessage = function (ast) {\n  if (!(ast && ast.type === 'messageFormatPattern')) {\n    throw new Error('Message AST is not of type: \"messageFormatPattern\"');\n  }\n\n  var elements = ast.elements,\n      pattern = [];\n  var i, len, element;\n\n  for (i = 0, len = elements.length; i < len; i += 1) {\n    element = elements[i];\n\n    switch (element.type) {\n      case 'messageTextElement':\n        pattern.push(this.compileMessageText(element));\n        break;\n\n      case 'argumentElement':\n        pattern.push(this.compileArgument(element));\n        break;\n\n      default:\n        throw new Error('Message element does not have a valid type');\n    }\n  }\n\n  return pattern;\n};\n\nCompiler.prototype.compileMessageText = function (element) {\n  // When this `element` is part of plural sub-pattern and its value contains\n  // an unescaped '#', use a `PluralOffsetString` helper to properly output\n  // the number with the correct offset in the string.\n  if (this.currentPlural && /(^|[^\\\\])#/g.test(element.value)) {\n    // Create a cache a NumberFormat instance that can be reused for any\n    // PluralOffsetString instance in this message.\n    if (!this.pluralNumberFormat) {\n      this.pluralNumberFormat = new Intl.NumberFormat(this.locales);\n    }\n\n    return new PluralOffsetString(this.currentPlural.id, this.currentPlural.format.offset, this.pluralNumberFormat, element.value);\n  } // Unescape the escaped '#'s in the message text.\n\n\n  return element.value.replace(/\\\\#/g, '#');\n};\n\nCompiler.prototype.compileArgument = function (element) {\n  var format = element.format;\n\n  if (!format) {\n    return new StringFormat(element.id);\n  }\n\n  var formats = this.formats,\n      locales = this.locales,\n      pluralFn = this.pluralFn,\n      options;\n\n  switch (format.type) {\n    case 'numberFormat':\n      options = formats.number[format.style];\n      return {\n        id: element.id,\n        format: new Intl.NumberFormat(locales, options).format\n      };\n\n    case 'dateFormat':\n      options = formats.date[format.style];\n      return {\n        id: element.id,\n        format: new Intl.DateTimeFormat(locales, options).format\n      };\n\n    case 'timeFormat':\n      options = formats.time[format.style];\n      return {\n        id: element.id,\n        format: new Intl.DateTimeFormat(locales, options).format\n      };\n\n    case 'pluralFormat':\n      options = this.compileOptions(element);\n      return new PluralFormat(element.id, format.ordinal, format.offset, options, pluralFn);\n\n    case 'selectFormat':\n      options = this.compileOptions(element);\n      return new SelectFormat(element.id, options);\n\n    default:\n      throw new Error('Message element does not have a valid format type');\n  }\n};\n\nCompiler.prototype.compileOptions = function (element) {\n  var format = element.format,\n      options = format.options,\n      optionsHash = {}; // Save the current plural element, if any, then set it to a new value when\n  // compiling the options sub-patterns. This conforms the spec's algorithm\n  // for handling `\"#\"` syntax in message text.\n\n  this.pluralStack.push(this.currentPlural);\n  this.currentPlural = format.type === 'pluralFormat' ? element : null;\n  var i, len, option;\n\n  for (i = 0, len = options.length; i < len; i += 1) {\n    option = options[i]; // Compile the sub-pattern and save it under the options's selector.\n\n    optionsHash[option.selector] = this.compileMessage(option.value);\n  } // Pop the plural stack to put back the original current plural value.\n\n\n  this.currentPlural = this.pluralStack.pop();\n  return optionsHash;\n}; // -- Compiler Helper Classes --------------------------------------------------\n\n\nfunction StringFormat(id) {\n  this.id = id;\n}\n\nStringFormat.prototype.format = function (value) {\n  if (!value && typeof value !== 'number') {\n    return '';\n  }\n\n  return typeof value === 'string' ? value : String(value);\n};\n\nfunction PluralFormat(id, useOrdinal, offset, options, pluralFn) {\n  this.id = id;\n  this.useOrdinal = useOrdinal;\n  this.offset = offset;\n  this.options = options;\n  this.pluralFn = pluralFn;\n}\n\nPluralFormat.prototype.getOption = function (value) {\n  var options = this.options;\n  var option = options['=' + value] || options[this.pluralFn(value - this.offset, this.useOrdinal)];\n  return option || options.other;\n};\n\nfunction PluralOffsetString(id, offset, numberFormat, string) {\n  this.id = id;\n  this.offset = offset;\n  this.numberFormat = numberFormat;\n  this.string = string;\n}\n\nPluralOffsetString.prototype.format = function (value) {\n  var number = this.numberFormat.format(value - this.offset);\n  return this.string.replace(/(^|[^\\\\])#/g, '$1' + number).replace(/\\\\#/g, '#');\n};\n\nfunction SelectFormat(id, options) {\n  this.id = id;\n  this.options = options;\n}\n\nSelectFormat.prototype.getOption = function (value) {\n  var options = this.options;\n  return options[value] || options.other;\n};","map":{"version":3,"sources":["src/compiler.js"],"names":[],"mappings":"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","sourcesContent":["/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n/* jslint esnext: true */\n\nexport default Compiler;\n\nfunction Compiler(locales, formats, pluralFn) {\n    this.locales  = locales;\n    this.formats  = formats;\n    this.pluralFn = pluralFn;\n}\n\nCompiler.prototype.compile = function (ast) {\n    this.pluralStack        = [];\n    this.currentPlural      = null;\n    this.pluralNumberFormat = null;\n\n    return this.compileMessage(ast);\n};\n\nCompiler.prototype.compileMessage = function (ast) {\n    if (!(ast && ast.type === 'messageFormatPattern')) {\n        throw new Error('Message AST is not of type: \"messageFormatPattern\"');\n    }\n\n    var elements = ast.elements,\n        pattern  = [];\n\n    var i, len, element;\n\n    for (i = 0, len = elements.length; i < len; i += 1) {\n        element = elements[i];\n\n        switch (element.type) {\n            case 'messageTextElement':\n                pattern.push(this.compileMessageText(element));\n                break;\n\n            case 'argumentElement':\n                pattern.push(this.compileArgument(element));\n                break;\n\n            default:\n                throw new Error('Message element does not have a valid type');\n        }\n    }\n\n    return pattern;\n};\n\nCompiler.prototype.compileMessageText = function (element) {\n    // When this `element` is part of plural sub-pattern and its value contains\n    // an unescaped '#', use a `PluralOffsetString` helper to properly output\n    // the number with the correct offset in the string.\n    if (this.currentPlural && /(^|[^\\\\])#/g.test(element.value)) {\n        // Create a cache a NumberFormat instance that can be reused for any\n        // PluralOffsetString instance in this message.\n        if (!this.pluralNumberFormat) {\n            this.pluralNumberFormat = new Intl.NumberFormat(this.locales);\n        }\n\n        return new PluralOffsetString(\n                this.currentPlural.id,\n                this.currentPlural.format.offset,\n                this.pluralNumberFormat,\n                element.value);\n    }\n\n    // Unescape the escaped '#'s in the message text.\n    return element.value.replace(/\\\\#/g, '#');\n};\n\nCompiler.prototype.compileArgument = function (element) {\n    var format = element.format;\n\n    if (!format) {\n        return new StringFormat(element.id);\n    }\n\n    var formats  = this.formats,\n        locales  = this.locales,\n        pluralFn = this.pluralFn,\n        options;\n\n    switch (format.type) {\n        case 'numberFormat':\n            options = formats.number[format.style];\n            return {\n                id    : element.id,\n                format: new Intl.NumberFormat(locales, options).format\n            };\n\n        case 'dateFormat':\n            options = formats.date[format.style];\n            return {\n                id    : element.id,\n                format: new Intl.DateTimeFormat(locales, options).format\n            };\n\n        case 'timeFormat':\n            options = formats.time[format.style];\n            return {\n                id    : element.id,\n                format: new Intl.DateTimeFormat(locales, options).format\n            };\n\n        case 'pluralFormat':\n            options = this.compileOptions(element);\n            return new PluralFormat(\n                element.id, format.ordinal, format.offset, options, pluralFn\n            );\n\n        case 'selectFormat':\n            options = this.compileOptions(element);\n            return new SelectFormat(element.id, options);\n\n        default:\n            throw new Error('Message element does not have a valid format type');\n    }\n};\n\nCompiler.prototype.compileOptions = function (element) {\n    var format      = element.format,\n        options     = format.options,\n        optionsHash = {};\n\n    // Save the current plural element, if any, then set it to a new value when\n    // compiling the options sub-patterns. This conforms the spec's algorithm\n    // for handling `\"#\"` syntax in message text.\n    this.pluralStack.push(this.currentPlural);\n    this.currentPlural = format.type === 'pluralFormat' ? element : null;\n\n    var i, len, option;\n\n    for (i = 0, len = options.length; i < len; i += 1) {\n        option = options[i];\n\n        // Compile the sub-pattern and save it under the options's selector.\n        optionsHash[option.selector] = this.compileMessage(option.value);\n    }\n\n    // Pop the plural stack to put back the original current plural value.\n    this.currentPlural = this.pluralStack.pop();\n\n    return optionsHash;\n};\n\n// -- Compiler Helper Classes --------------------------------------------------\n\nfunction StringFormat(id) {\n    this.id = id;\n}\n\nStringFormat.prototype.format = function (value) {\n    if (!value && typeof value !== 'number') {\n        return '';\n    }\n\n    return typeof value === 'string' ? value : String(value);\n};\n\nfunction PluralFormat(id, useOrdinal, offset, options, pluralFn) {\n    this.id         = id;\n    this.useOrdinal = useOrdinal;\n    this.offset     = offset;\n    this.options    = options;\n    this.pluralFn   = pluralFn;\n}\n\nPluralFormat.prototype.getOption = function (value) {\n    var options = this.options;\n\n    var option = options['=' + value] ||\n            options[this.pluralFn(value - this.offset, this.useOrdinal)];\n\n    return option || options.other;\n};\n\nfunction PluralOffsetString(id, offset, numberFormat, string) {\n    this.id           = id;\n    this.offset       = offset;\n    this.numberFormat = numberFormat;\n    this.string       = string;\n}\n\nPluralOffsetString.prototype.format = function (value) {\n    var number = this.numberFormat.format(value - this.offset);\n\n    return this.string\n            .replace(/(^|[^\\\\])#/g, '$1' + number)\n            .replace(/\\\\#/g, '#');\n};\n\nfunction SelectFormat(id, options) {\n    this.id      = id;\n    this.options = options;\n}\n\nSelectFormat.prototype.getOption = function (value) {\n    var options = this.options;\n    return options[value] || options.other;\n};\n"],"sourceRoot":"/"},"metadata":{},"sourceType":"script"}