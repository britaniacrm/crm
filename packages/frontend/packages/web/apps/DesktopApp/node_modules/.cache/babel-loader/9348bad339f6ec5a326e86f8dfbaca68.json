{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/components/TextField/TextFieldStyled.js\";\nimport React, { useMemo, useCallback, forwardRef, memo } from 'react';\nimport MaskedInput from 'react-input-mask';\nimport NumberFormat from 'react-number-format';\nimport PropTypes from 'prop-types';\nimport uuid from 'short-uuid';\nimport toNumber from 'lodash/toNumber';\nimport Box from '@material-ui/core/Box';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport InfoIcon from '@material-ui/icons/Info';\nimport { areEqual } from '@britania-crm/utils/memo';\nimport { theme as MuiTheme, TextFieldStyled as MuiTextFieldStyled } from './styles';\nconst TextFieldStyled = forwardRef((props, inputRef) => {\n  const {\n    id,\n    numberFormatProps,\n    mask,\n    value,\n    onChange,\n    onKeyDown,\n    onBlur,\n    required,\n    disabled,\n    error,\n    helperText: externalHelperText,\n    className,\n    setMask,\n    transformRender,\n    minWidth,\n    notEditable,\n    readOnly,\n    type,\n    theme,\n    inputProps,\n    maxLength,\n    ...rest\n  } = props;\n  const inputId = useMemo(() => id || uuid().new(), [id]);\n  const handleChange = useCallback(event => {\n    if (!notEditable) {\n      if (numberFormatProps) {\n        return onChange({\n          target: {\n            value: event.value\n          }\n        });\n      }\n\n      return onChange(event);\n    }\n\n    return undefined;\n  }, [notEditable, numberFormatProps, onChange]);\n  const helperText = useMemo(() => (error || externalHelperText) && /*#__PURE__*/React.createElement(Box, {\n    component: \"span\",\n    display: \"flex\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InfoIcon, {\n    fontSize: \"small\",\n    style: {\n      marginRight: '8px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }\n  }), ' ', error || externalHelperText), [error, externalHelperText]);\n  const textFieldProps = useMemo(() => ({\n    inputRef,\n    id: inputId,\n    required,\n    minWidth,\n    error: !!error,\n    helperText,\n    disabled,\n    readOnly,\n    type,\n    inputProps: {\n      maxLength,\n      ...inputProps\n    },\n    ...rest\n  }), [inputRef, inputId, required, minWidth, error, helperText, disabled, readOnly, type, maxLength, inputProps, rest]);\n  const transformedValue = useMemo(() => transformRender(type === 'tel' && value ? value.toString() : value), [transformRender, type, value]);\n  return /*#__PURE__*/React.createElement(ThemeProvider, {\n    theme: MuiTheme(theme),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 5\n    }\n  }, numberFormatProps ? /*#__PURE__*/React.createElement(NumberFormat, Object.assign({\n    value: transformedValue ? toNumber(transformedValue) : '',\n    onValueChange: handleChange,\n    onBlur: onBlur,\n    onKeyDown: onKeyDown,\n    customInput: MuiTextFieldStyled\n  }, numberFormatProps, textFieldProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 9\n    }\n  })) : /*#__PURE__*/React.createElement(React.Fragment, null, textFieldProps.multiline || !mask ? /*#__PURE__*/React.createElement(MuiTextFieldStyled, Object.assign({}, textFieldProps, {\n    value: transformedValue,\n    onChange: handleChange,\n    onBlur: onBlur,\n    onKeyDown: onKeyDown,\n    disabled: disabled,\n    readOnly: readOnly,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 13\n    }\n  })) : /*#__PURE__*/React.createElement(MaskedInput, {\n    mask: mask,\n    onChange: handleChange,\n    value: transformedValue,\n    onBlur: onBlur,\n    onKeyDown: onKeyDown,\n    maskPlaceholder: null,\n    disabled: disabled,\n    readOnly: readOnly,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(MuiTextFieldStyled, Object.assign({}, textFieldProps, {\n    value: transformedValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 15\n    }\n  })))));\n});\nTextFieldStyled.propTypes = {\n  id: PropTypes.string,\n  numberFormatProps: PropTypes.object,\n  mask: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n  value: PropTypes.any,\n  onChange: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  onBlur: PropTypes.func,\n  setMask: PropTypes.func,\n  required: PropTypes.bool,\n  className: PropTypes.string,\n  error: PropTypes.string,\n  disabled: PropTypes.bool,\n  helperText: PropTypes.oneOfType([PropTypes.string, PropTypes.element, PropTypes.object]),\n  type: PropTypes.string,\n  variant: PropTypes.string,\n  size: PropTypes.oneOf(['small', 'medium']),\n  transformRender: PropTypes.func,\n  minWidth: PropTypes.number,\n  notEditable: PropTypes.bool,\n  readOnly: PropTypes.bool,\n  theme: PropTypes.object,\n  inputProps: PropTypes.object,\n  maxLength: PropTypes.number\n};\nTextFieldStyled.defaultProps = {\n  id: undefined,\n  numberFormatProps: undefined,\n  mask: undefined,\n\n  onBlur() {},\n\n  onKeyDown() {},\n\n  setMask: undefined,\n  required: false,\n  className: null,\n  error: null,\n  disabled: false,\n  helperText: null,\n  type: 'text',\n  variant: 'outlined',\n  size: 'small',\n  value: '',\n\n  onChange() {},\n\n  transformRender: v => v,\n  minWidth: 0,\n  notEditable: false,\n  readOnly: false,\n  theme: {},\n  inputProps: {},\n  maxLength: undefined\n};\nexport default memo(TextFieldStyled, areEqual);","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/components/TextField/TextFieldStyled.js"],"names":["React","useMemo","useCallback","forwardRef","memo","MaskedInput","NumberFormat","PropTypes","uuid","toNumber","Box","ThemeProvider","InfoIcon","areEqual","theme","MuiTheme","TextFieldStyled","MuiTextFieldStyled","props","inputRef","id","numberFormatProps","mask","value","onChange","onKeyDown","onBlur","required","disabled","error","helperText","externalHelperText","className","setMask","transformRender","minWidth","notEditable","readOnly","type","inputProps","maxLength","rest","inputId","new","handleChange","event","target","undefined","marginRight","textFieldProps","transformedValue","toString","multiline","propTypes","string","object","oneOfType","array","any","func","bool","element","variant","size","oneOf","number","defaultProps","v"],"mappings":"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","sourcesContent":["import React, {\n  useMemo,\n  useCallback,\n  forwardRef,\n  memo\n} from 'react'\nimport MaskedInput from 'react-input-mask'\nimport NumberFormat from 'react-number-format'\n\nimport PropTypes from 'prop-types'\nimport uuid from 'short-uuid'\n\nimport toNumber from 'lodash/toNumber'\n\nimport Box from '@material-ui/core/Box'\nimport { ThemeProvider } from '@material-ui/core/styles'\nimport InfoIcon from '@material-ui/icons/Info'\n\nimport { areEqual } from '@britania-crm/utils/memo'\n\nimport {\n  theme as MuiTheme,\n  TextFieldStyled as MuiTextFieldStyled\n} from './styles'\n\nconst TextFieldStyled = forwardRef((props, inputRef) => {\n  const {\n    id,\n    numberFormatProps,\n    mask,\n    value,\n    onChange,\n    onKeyDown,\n    onBlur,\n    required,\n    disabled,\n    error,\n    helperText: externalHelperText,\n    className,\n    setMask,\n    transformRender,\n    minWidth,\n    notEditable,\n    readOnly,\n    type,\n    theme,\n    inputProps,\n    maxLength,\n    ...rest\n  } = props\n\n  const inputId = useMemo(\n    () => id || uuid().new(),\n    [id]\n  )\n\n  const handleChange = useCallback(\n    (event) => {\n      if (!notEditable) {\n        if (numberFormatProps) {\n          return onChange({ target: { value: event.value } })\n        }\n        return onChange(event)\n      }\n      return undefined\n    },\n    [notEditable, numberFormatProps, onChange]\n  )\n\n  const helperText = useMemo(\n    () => (error || externalHelperText) && (\n      <Box component=\"span\" display=\"flex\" alignItems=\"center\">\n        <InfoIcon fontSize=\"small\" style={ { marginRight: '8px' } } />\n        {' '}{ error || externalHelperText }\n      </Box>\n    ),\n    [error, externalHelperText]\n  )\n\n  const textFieldProps = useMemo(\n    () => ({\n      inputRef,\n      id: inputId,\n      required,\n      minWidth,\n      error: !!error,\n      helperText,\n      disabled,\n      readOnly,\n      type,\n      inputProps: {\n        maxLength,\n        ...inputProps\n      },\n      ...rest\n    }),\n    [inputRef, inputId, required, minWidth, error, helperText, disabled, readOnly, type, maxLength, inputProps, rest]\n  )\n\n  const transformedValue = useMemo(\n    () => transformRender(type === 'tel' && value ? value.toString() : value),\n    [transformRender, type, value]\n  )\n\n  return (\n    <ThemeProvider theme={ MuiTheme(theme) }>\n      { numberFormatProps ? (\n        <NumberFormat\n          value={ transformedValue ? toNumber(transformedValue) : '' }\n          onValueChange={ handleChange }\n          onBlur={ onBlur }\n          onKeyDown={ onKeyDown }\n          customInput={ MuiTextFieldStyled }\n          { ...numberFormatProps }\n          { ...textFieldProps }\n        />\n      ) : (\n        <>\n          {(textFieldProps.multiline || !mask) ? (\n            <MuiTextFieldStyled\n              { ...textFieldProps }\n              value={ transformedValue }\n              onChange={ handleChange }\n              onBlur={ onBlur }\n              onKeyDown={ onKeyDown }\n              disabled={ disabled }\n              readOnly={ readOnly }\n            />\n          ) : (\n            <MaskedInput\n              mask={ mask }\n              onChange={ handleChange }\n              value={ transformedValue }\n              onBlur={ onBlur }\n              onKeyDown={ onKeyDown }\n              maskPlaceholder={ null }\n              disabled={ disabled }\n              readOnly={ readOnly }\n            >\n              <MuiTextFieldStyled\n                { ...textFieldProps }\n                value={ transformedValue }\n              />\n            </MaskedInput>\n          )}\n        </>\n      ) }\n    </ThemeProvider>\n  )\n})\n\nTextFieldStyled.propTypes = {\n  id: PropTypes.string,\n  numberFormatProps: PropTypes.object,\n  mask: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.array\n  ]),\n  value: PropTypes.any,\n  onChange: PropTypes.func,\n  onKeyDown: PropTypes.func,\n  onBlur: PropTypes.func,\n  setMask: PropTypes.func,\n  required: PropTypes.bool,\n  className: PropTypes.string,\n  error: PropTypes.string,\n  disabled: PropTypes.bool,\n  helperText: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.element,\n    PropTypes.object\n  ]),\n  type: PropTypes.string,\n  variant: PropTypes.string,\n  size: PropTypes.oneOf(['small', 'medium']),\n  transformRender: PropTypes.func,\n  minWidth: PropTypes.number,\n  notEditable: PropTypes.bool,\n  readOnly: PropTypes.bool,\n  theme: PropTypes.object,\n  inputProps: PropTypes.object,\n  maxLength: PropTypes.number\n}\n\nTextFieldStyled.defaultProps = {\n  id: undefined,\n  numberFormatProps: undefined,\n  mask: undefined,\n  onBlur () {},\n  onKeyDown () {},\n  setMask: undefined,\n  required: false,\n  className: null,\n  error: null,\n  disabled: false,\n  helperText: null,\n  type: 'text',\n  variant: 'outlined',\n  size: 'small',\n  value: '',\n  onChange () {},\n  transformRender: (v) => v,\n  minWidth: 0,\n  notEditable: false,\n  readOnly: false,\n  theme: {},\n  inputProps: {},\n  maxLength: undefined\n}\n\nexport default memo(TextFieldStyled, areEqual)\n"]},"metadata":{},"sourceType":"module"}