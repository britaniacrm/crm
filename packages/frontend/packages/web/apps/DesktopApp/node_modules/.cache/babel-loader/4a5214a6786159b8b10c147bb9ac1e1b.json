{"ast":null,"code":"import trimMaskMeta from '@meta-awesome/functions/src/trimMask';\nimport currency from 'currency.js';\nimport format from 'formatar-valores';\nimport first from 'lodash/first';\nimport flow from 'lodash/fp/flow';\nimport isNaN from 'lodash/isNaN';\nimport isNumber from 'lodash/isNumber';\nimport last from 'lodash/last';\nimport lowerCase from 'lodash/lowerCase';\nimport reduce from 'lodash/reduce';\nimport split from 'lodash/split';\nimport startCase from 'lodash/startCase';\nimport trim from 'lodash/trim';\nimport upperCase from 'lodash/upperCase';\nexport const formatCpfCnpj = num => format.cpfCnpj(num);\nexport const formatCep = num => format.cep(num);\nexport const formatPhone = (num = '') => {\n  const ddd = num.substr(0, 2);\n  const phone = num.slice(2, num.length);\n  return `(${ddd}) ${format.telefone(phone)}`;\n};\nexport const formatNumber = (num, locale = 'pt-BR') => {\n  try {\n    if (num === undefined) {\n      return 0;\n    }\n\n    let number = num;\n\n    if (!isNumber(number)) {\n      number = Number(num);\n    }\n\n    return number.toLocaleString(locale);\n  } catch (e) {\n    console.error('formatNumber error:', e);\n    return num;\n  }\n};\nexport const formatMoney = amount => currency(isNumber(amount) ? amount : Number(amount), {\n  symbol: 'R$ ',\n  separator: '.',\n  decimal: ','\n}).format();\nexport const formatFloat = (amount, decimalCount = 2, decimal = ',', thousands = '.') => {\n  try {\n    const number = isNaN(Math.abs(decimalCount)) ? 2 : decimalCount;\n    const negativeSign = amount < 0 ? '-' : '';\n    const amountToParse = Math.abs(Number(amount) || 0);\n    const i = parseInt(amountToParse.toFixed(number), 10).toString();\n    const j = i.length > 3 ? i.length % 3 : 0;\n    return negativeSign + (j ? i.substr(0, j) + thousands : '') + i.substr(j).replace(/(\\d{3})(?=\\d)/g, `$1${thousands}`) + (number ? decimal + Math.abs(amount - i).toFixed(decimalCount).slice(2) : '');\n  } catch (e) {\n    console.error(`formatFloat error: ${e}`);\n    return false;\n  }\n};\nexport const trimMask = (str = '') => {\n  const extraChars = ['\\u2000', '&', '#', ',', ';', '+', '(', ')', '$', '~', '%', '.', '\"', ':', '*', '?', '<', '>', '{', '}'];\n\n  if (str) {\n    return reduce(extraChars, (strTrim, char) => strTrim.split(char).join(''), trim(trimMaskMeta(str)));\n  }\n\n  return str;\n};\nexport const formatUsernameToAvatar = (username = '') => {\n  const usernameArr = split(username, '.');\n  const firstName = first(usernameArr);\n  const lastName = last(usernameArr);\n  return upperCase(`${first(firstName)}${first(lastName)}`);\n};\nexport const lowerAndStartCase = item => flow(lowerCase, startCase)(item);","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/core/utils/formatters.js"],"names":["trimMaskMeta","currency","format","first","flow","isNaN","isNumber","last","lowerCase","reduce","split","startCase","trim","upperCase","formatCpfCnpj","num","cpfCnpj","formatCep","cep","formatPhone","ddd","substr","phone","slice","length","telefone","formatNumber","locale","undefined","number","Number","toLocaleString","e","console","error","formatMoney","amount","symbol","separator","decimal","formatFloat","decimalCount","thousands","Math","abs","negativeSign","amountToParse","i","parseInt","toFixed","toString","j","replace","trimMask","str","extraChars","strTrim","char","join","formatUsernameToAvatar","username","usernameArr","firstName","lastName","lowerAndStartCase","item"],"mappings":"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","sourcesContent":["import trimMaskMeta from '@meta-awesome/functions/src/trimMask'\nimport currency from 'currency.js'\nimport format from 'formatar-valores'\n\nimport first from 'lodash/first'\nimport flow from 'lodash/fp/flow'\nimport isNaN from 'lodash/isNaN'\nimport isNumber from 'lodash/isNumber'\nimport last from 'lodash/last'\nimport lowerCase from 'lodash/lowerCase'\nimport reduce from 'lodash/reduce'\nimport split from 'lodash/split'\nimport startCase from 'lodash/startCase'\nimport trim from 'lodash/trim'\nimport upperCase from 'lodash/upperCase'\n\nexport const formatCpfCnpj = (num) => format.cpfCnpj(num)\n\nexport const formatCep = (num) => format.cep(num)\n\nexport const formatPhone = (num = '') => {\n  const ddd = num.substr(0, 2)\n  const phone = num.slice(2, num.length)\n  return `(${ ddd }) ${ format.telefone(phone) }`\n}\n\nexport const formatNumber = (num, locale = 'pt-BR') => {\n  try {\n    if (num === undefined) {\n      return 0\n    }\n\n    let number = num\n    if (!isNumber(number)) {\n      number = Number(num)\n    }\n    return number.toLocaleString(locale)\n  } catch (e) {\n    console.error('formatNumber error:', e)\n    return num\n  }\n}\n\nexport const formatMoney = (amount) => currency(\n  isNumber(amount) ? amount : Number(amount),\n  {\n    symbol: 'R$ ',\n    separator: '.',\n    decimal: ','\n  }\n).format()\n\nexport const formatFloat = (\n  amount,\n  decimalCount = 2,\n  decimal = ',',\n  thousands = '.'\n) => {\n  try {\n    const number = isNaN(Math.abs(decimalCount)) ? 2 : decimalCount\n    const negativeSign = amount < 0 ? '-' : ''\n    const amountToParse = Math.abs(Number(amount) || 0)\n\n    const i = parseInt(amountToParse.toFixed(number), 10).toString()\n    const j = i.length > 3 ? i.length % 3 : 0\n\n    return (\n      negativeSign +\n      (j ? i.substr(0, j) + thousands : '') +\n      i.substr(j).replace(/(\\d{3})(?=\\d)/g, `$1${ thousands }`) +\n      (number\n        ? decimal +\n          Math.abs(amount - i)\n            .toFixed(decimalCount)\n            .slice(2)\n        : '')\n    )\n  } catch (e) {\n    console.error(`formatFloat error: ${ e }`)\n    return false\n  }\n}\n\nexport const trimMask = (str = '') => {\n  const extraChars = ['\\u2000', '&', '#', ',', ';', '+', '(', ')', '$', '~', '%', '.', '\"', ':', '*', '?', '<', '>', '{', '}']\n  if (str) {\n    return reduce(\n      extraChars,\n      (strTrim, char) => strTrim.split(char).join(''),\n      trim(trimMaskMeta(str))\n    )\n  }\n  return str\n}\n\nexport const formatUsernameToAvatar = (username = '') => {\n  const usernameArr = split(username, '.')\n  const firstName = first(usernameArr)\n  const lastName = last(usernameArr)\n\n  return upperCase(`${ first(firstName) }${ first(lastName) }`)\n}\n\nexport const lowerAndStartCase = (item) => flow(\n  lowerCase,\n  startCase\n)(item)\n"]},"metadata":{},"sourceType":"module"}