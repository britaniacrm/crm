{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/components/Upload/context/Files.js\";\nimport React, { useState, useEffect, useMemo, useCallback, createContext, useRef, useContext } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { CancelToken } from 'axios';\nimport PropTypes from 'prop-types';\nimport { MSG025, MSG020, MSG018 } from '@britania-crm/constants/feedbackMessages.constants';\nimport { AppActions } from '@britania-crm/stores/app';\nimport imageLogin from '@britania-crm/styles/assets/images/default_login_bg.png';\nconst FileContext = createContext();\n\nconst useFile = () => useContext(FileContext);\n\nconst FileProvider = ({\n  children,\n  onSuccess,\n  onError,\n  uploadFile,\n  deleteFile,\n  getFile,\n  makeUpload,\n  makeDelete,\n  handleClose,\n  hasFile: externalHasFile,\n  isPreview,\n  defaultImage\n}) => {\n  const dispatch = useCallback(useDispatch(), []);\n  const [uploadedFile, setUploadedFile] = useState({});\n  const [hasFile, setHasFile] = useState(false);\n  const cancelFileUpload = useRef(null); // Função auxiliar para atualizar o estado do arquivo\n\n  const updateFile = useCallback(data => setUploadedFile(prevState => ({ ...prevState,\n    ...data\n  })), []); // Função para cancelamento do upload\n\n  const cancelUpload = useCallback(() => {\n    if (cancelFileUpload.current) {\n      updateFile({\n        preview: '',\n        ready: true,\n        uploadedFile: false,\n        uploading: false,\n        error: true\n      });\n      cancelFileUpload.current('User has canceled the file upload.');\n    }\n  }, [updateFile]);\n  /**\n   * Essa função é responsável por processar cada arquivo que está sendo enviado pelo usuário,\n   * chamando a API e fazendo um POST\n   *  */\n\n  const processUpload = useCallback(async uploadedFile => {\n    // Criando um FormData que armazena a imagem (arquivo)\n    const data = new window.FormData();\n\n    if (uploadedFile.file) {\n      data.append('file', uploadedFile === null || uploadedFile === void 0 ? void 0 : uploadedFile.file);\n    }\n    /**\n     * Objeto contendo a lógica para realizar o acompanhamento/progresso do uploado do arquivo.\n     * Além disso contém a operação de cancelamento de upload\n     */\n\n\n    const options = {\n      onUploadProgress(progressEvent) {\n        const {\n          loaded,\n          total\n        } = progressEvent;\n        const progress = Math.floor(loaded * 100 / total);\n        updateFile({\n          progress,\n          uploading: true\n        });\n      },\n\n      cancelToken: new CancelToken(cancel => cancelFileUpload.current = cancel)\n    };\n\n    try {\n      await uploadFile(data, options);\n      updateFile({\n        uploaded: true,\n        uploading: false\n      });\n      onSuccess(MSG020);\n    } catch (err) {\n      console.error(err);\n      updateFile({\n        error: true\n      });\n      onError(MSG018);\n    }\n  }, [onError, onSuccess, updateFile, uploadFile]); // Função que lida com os arquivos que foram recebidos\n\n  const handleUpload = useCallback(newFile => {\n    const files = (newFile === null || newFile === void 0 ? void 0 : newFile.target) ? newFile.target.files : newFile;\n    const defaultTypes = ['image/png', 'image/jpg', 'image/jpeg', 'image/gif'];\n\n    if (!defaultTypes.includes(files[0].type)) {\n      dispatch(AppActions.addAlert({\n        type: 'error',\n        message: MSG025\n      }));\n      return;\n    }\n\n    const newUploadedFile = {\n      file: files[0],\n      preview: URL.createObjectURL(files[0]),\n      progress: 0,\n      uploaded: false,\n      uploading: false,\n      error: false\n    };\n    setUploadedFile(newUploadedFile);\n    setHasFile(true);\n    isPreview(true);\n  }, [dispatch, isPreview]);\n  const getFileFromApi = useCallback(async () => {\n    try {\n      const response = await getFile();\n\n      if (response.size > 0) {\n        const formattedResponse = {\n          preview: URL.createObjectURL(response),\n          uploaded: true,\n          error: false,\n          ready: true\n        };\n        setHasFile(true);\n        isPreview(false);\n        updateFile(formattedResponse);\n      } else {\n        updateFile({\n          preview: defaultImage,\n          uploaded: false,\n          error: false,\n          ready: true\n        });\n        setHasFile(false);\n        isPreview(false);\n      }\n    } catch (err) {\n      onError(MSG018);\n      updateFile({\n        preview: defaultImage,\n        uploaded: false,\n        error: false,\n        ready: true\n      });\n      setHasFile(false);\n      isPreview(false);\n    }\n  }, // eslint-disable-next-line react-hooks/exhaustive-deps\n  [getFile, onError, updateFile]);\n  /**\n    * Esse useEffect é responsável por pegar alterações em makeUpload e iniciar uma chamada a API\n    * para atualizar a imagem\n    */\n\n  useEffect(() => {\n    if (!makeUpload) return;\n\n    const startProcessUpload = async () => {\n      await processUpload(uploadedFile);\n      handleClose();\n      dispatch(AppActions.addAlert({\n        type: 'success',\n        message: MSG020\n      }));\n    };\n\n    startProcessUpload(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [makeUpload]);\n  useEffect(() => () => {\n    cancelUpload();\n    URL.revokeObjectURL(uploadedFile.preview); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  /**\n    * Esse useEffect é responsável por pegar alterações em makeDelete, iniciar uma chamada a API\n    * para remover a imagem\n    */\n\n  useEffect(() => {\n    if (!makeDelete) return;\n\n    const startProcessDelete = async () => {\n      await deleteFile();\n      handleClose();\n      dispatch(AppActions.addAlert({\n        type: 'success',\n        message: MSG020\n      }));\n    };\n\n    startProcessDelete(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [makeDelete]);\n  /**\n    * Esse useEffect é responsável por pegar alterações em showsDefault, atualizando\n    * a exibição de imagem para a imagem default\n    */\n\n  useEffect(() => {\n    getFileFromApi(); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  useEffect(() => {\n    externalHasFile(hasFile);\n  }, [externalHasFile, hasFile]);\n  const value = useMemo(() => ({\n    uploadedFile,\n    handleUpload,\n    cancelUpload,\n    updateFile,\n    hasFile\n  }), [cancelUpload, handleUpload, hasFile, updateFile, uploadedFile]);\n  return /*#__PURE__*/React.createElement(FileContext.Provider, {\n    value: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nFileProvider.propTypes = {\n  children: PropTypes.any.isRequired,\n  onSuccess: PropTypes.func,\n  onError: PropTypes.func,\n  uploadFile: PropTypes.func.isRequired,\n  deleteFile: PropTypes.func,\n  getFile: PropTypes.func.isRequired,\n  handleClose: PropTypes.func,\n  hasFile: PropTypes.func,\n  isPreview: PropTypes.func,\n  makeUpload: PropTypes.bool,\n  makeDelete: PropTypes.bool,\n  defaultImage: PropTypes.any\n};\nFileProvider.defaultProps = {\n  onSuccess() {},\n\n  onError() {},\n\n  handleClose() {},\n\n  hasFile() {},\n\n  isPreview() {},\n\n  deleteFile() {},\n\n  makeUpload: false,\n  makeDelete: false,\n  defaultImage: imageLogin\n};\nexport { FileProvider, useFile };","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/components/Upload/context/Files.js"],"names":["React","useState","useEffect","useMemo","useCallback","createContext","useRef","useContext","useDispatch","CancelToken","PropTypes","MSG025","MSG020","MSG018","AppActions","imageLogin","FileContext","useFile","FileProvider","children","onSuccess","onError","uploadFile","deleteFile","getFile","makeUpload","makeDelete","handleClose","hasFile","externalHasFile","isPreview","defaultImage","dispatch","uploadedFile","setUploadedFile","setHasFile","cancelFileUpload","updateFile","data","prevState","cancelUpload","current","preview","ready","uploading","error","processUpload","window","FormData","file","append","options","onUploadProgress","progressEvent","loaded","total","progress","Math","floor","cancelToken","cancel","uploaded","err","console","handleUpload","newFile","files","target","defaultTypes","includes","type","addAlert","message","newUploadedFile","URL","createObjectURL","getFileFromApi","response","size","formattedResponse","startProcessUpload","revokeObjectURL","startProcessDelete","value","propTypes","any","isRequired","func","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, {\n  useState,\n  useEffect,\n  useMemo,\n  useCallback,\n  createContext,\n  useRef,\n  useContext\n} from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport { CancelToken } from 'axios'\nimport PropTypes from 'prop-types'\n\nimport {\n  MSG025,\n  MSG020,\n  MSG018\n} from '@britania-crm/constants/feedbackMessages.constants'\nimport { AppActions } from '@britania-crm/stores/app'\nimport imageLogin from '@britania-crm/styles/assets/images/default_login_bg.png'\n\nconst FileContext = createContext()\n\nconst useFile = () => useContext(FileContext)\n\nconst FileProvider = ({\n  children,\n  onSuccess,\n  onError,\n  uploadFile,\n  deleteFile,\n  getFile,\n  makeUpload,\n  makeDelete,\n  handleClose,\n  hasFile: externalHasFile,\n  isPreview,\n  defaultImage\n}) => {\n  const dispatch = useCallback(useDispatch(), [])\n\n  const [uploadedFile, setUploadedFile] = useState({})\n  const [hasFile, setHasFile] = useState(false)\n\n  const cancelFileUpload = useRef(null)\n\n  // Função auxiliar para atualizar o estado do arquivo\n  const updateFile = useCallback(\n    (data) => setUploadedFile((prevState) => ({ ...prevState, ...data })),\n    []\n  )\n\n  // Função para cancelamento do upload\n  const cancelUpload = useCallback(\n    () => {\n      if (cancelFileUpload.current) {\n        updateFile({\n          preview: '',\n          ready: true,\n          uploadedFile: false,\n          uploading: false,\n          error: true\n        })\n\n        cancelFileUpload.current('User has canceled the file upload.')\n      }\n    },\n    [updateFile]\n  )\n\n  /**\n   * Essa função é responsável por processar cada arquivo que está sendo enviado pelo usuário,\n   * chamando a API e fazendo um POST\n   *  */\n  const processUpload = useCallback(\n    async (uploadedFile) => {\n      // Criando um FormData que armazena a imagem (arquivo)\n      const data = new window.FormData()\n\n      if (uploadedFile.file) {\n        data.append('file', uploadedFile?.file)\n      }\n\n      /**\n       * Objeto contendo a lógica para realizar o acompanhamento/progresso do uploado do arquivo.\n       * Além disso contém a operação de cancelamento de upload\n       */\n      const options = {\n        onUploadProgress (progressEvent) {\n          const { loaded, total } = progressEvent\n          const progress = Math.floor((loaded * 100) / total)\n\n          updateFile({ progress, uploading: true })\n        },\n        cancelToken: new CancelToken(\n          (cancel) => (cancelFileUpload.current = cancel)\n        )\n      }\n\n      try {\n        await uploadFile(data, options)\n\n        updateFile({\n          uploaded: true,\n          uploading: false\n        })\n\n        onSuccess(MSG020)\n      } catch (err) {\n        console.error(err)\n\n        updateFile({ error: true })\n\n        onError(MSG018)\n      }\n    },\n    [onError, onSuccess, updateFile, uploadFile]\n  )\n\n  // Função que lida com os arquivos que foram recebidos\n  const handleUpload = useCallback(\n    (newFile) => {\n      const files = newFile?.target ? newFile.target.files : newFile\n      const defaultTypes = ['image/png', 'image/jpg', 'image/jpeg', 'image/gif']\n\n      if (!defaultTypes.includes(files[0].type)) {\n        dispatch(AppActions.addAlert({\n          type: 'error',\n          message: MSG025\n        }))\n        return\n      }\n\n      const newUploadedFile = {\n        file: files[0],\n        preview: URL.createObjectURL(files[0]),\n        progress: 0,\n        uploaded: false,\n        uploading: false,\n        error: false\n      }\n\n      setUploadedFile(newUploadedFile)\n      setHasFile(true)\n      isPreview(true)\n    },\n    [dispatch, isPreview]\n  )\n\n  const getFileFromApi = useCallback(\n    async () => {\n      try {\n        const response = await getFile()\n        if (response.size > 0) {\n          const formattedResponse = {\n            preview: URL.createObjectURL(response),\n            uploaded: true,\n            error: false,\n            ready: true\n          }\n\n          setHasFile(true)\n          isPreview(false)\n          updateFile(formattedResponse)\n        } else {\n          updateFile({\n            preview: defaultImage,\n            uploaded: false,\n            error: false,\n            ready: true\n          })\n          setHasFile(false)\n          isPreview(false)\n        }\n      } catch (err) {\n        onError(MSG018)\n        updateFile({\n          preview: defaultImage,\n          uploaded: false,\n          error: false,\n          ready: true\n        })\n        setHasFile(false)\n        isPreview(false)\n      }\n    },\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [getFile, onError, updateFile]\n  )\n\n  /**\n    * Esse useEffect é responsável por pegar alterações em makeUpload e iniciar uma chamada a API\n    * para atualizar a imagem\n    */\n  useEffect(() => {\n    if (!makeUpload) return\n\n    const startProcessUpload = async () => {\n      await processUpload(uploadedFile)\n      handleClose()\n      dispatch(AppActions.addAlert({\n        type: 'success',\n        message: MSG020\n      }))\n    }\n\n    startProcessUpload()\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [makeUpload])\n\n  useEffect(() => () => {\n    cancelUpload()\n    URL.revokeObjectURL(uploadedFile.preview)\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  /**\n    * Esse useEffect é responsável por pegar alterações em makeDelete, iniciar uma chamada a API\n    * para remover a imagem\n    */\n  useEffect(() => {\n    if (!makeDelete) return\n\n    const startProcessDelete = async () => {\n      await deleteFile()\n      handleClose()\n      dispatch(AppActions.addAlert({\n        type: 'success',\n        message: MSG020\n      }))\n    }\n\n    startProcessDelete()\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [makeDelete])\n\n  /**\n    * Esse useEffect é responsável por pegar alterações em showsDefault, atualizando\n    * a exibição de imagem para a imagem default\n    */\n  useEffect(() => {\n    getFileFromApi()\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n\n  useEffect(\n    () => {\n      externalHasFile(hasFile)\n    },\n    [externalHasFile, hasFile]\n  )\n\n  const value = useMemo(\n    () => ({\n      uploadedFile,\n      handleUpload,\n      cancelUpload,\n      updateFile,\n      hasFile\n    }),\n    [cancelUpload, handleUpload, hasFile, updateFile, uploadedFile]\n  )\n\n  return (\n    <FileContext.Provider value={ value }>\n      {children}\n    </FileContext.Provider>\n  )\n}\n\nFileProvider.propTypes = {\n  children: PropTypes.any.isRequired,\n  onSuccess: PropTypes.func,\n  onError: PropTypes.func,\n  uploadFile: PropTypes.func.isRequired,\n  deleteFile: PropTypes.func,\n  getFile: PropTypes.func.isRequired,\n  handleClose: PropTypes.func,\n  hasFile: PropTypes.func,\n  isPreview: PropTypes.func,\n  makeUpload: PropTypes.bool,\n  makeDelete: PropTypes.bool,\n  defaultImage: PropTypes.any\n}\n\nFileProvider.defaultProps = {\n  onSuccess () {},\n  onError () {},\n  handleClose () {},\n  hasFile () {},\n  isPreview () {},\n  deleteFile () {},\n  makeUpload: false,\n  makeDelete: false,\n  defaultImage: imageLogin\n}\n\nexport {\n  FileProvider,\n  useFile\n}\n"]},"metadata":{},"sourceType":"module"}