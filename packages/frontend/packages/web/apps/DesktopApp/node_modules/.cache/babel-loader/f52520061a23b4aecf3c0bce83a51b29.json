{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/workflowPanel/screens/WorkflowPanelCreateScreen/WorkflowPanelCreateScreen.js\";\nimport React, { useMemo, useEffect, useCallback, useState, useRef } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport moment from 'moment/moment';\nimport find from 'lodash/find';\nimport isEmpty from 'lodash/isEmpty';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { MSG031 } from '@britania-crm/constants/feedbackMessages.constants';\nimport { useDialog } from '@britania-crm/dialog';\nimport { useFormEffect } from '@britania-crm/forms';\nimport workflowSchema, { INITIAL_VALUES } from '@britania-crm/forms/schemas/workflow/workflow.schema';\nimport I18n, { useT } from '@britania-crm/i18n';\nimport { AccessActions } from '@britania-crm/stores/access';\nimport { AppActions } from '@britania-crm/stores/app';\nimport { ProfilesActions } from '@britania-crm/stores/profiles';\nimport { WorkflowActions } from '@britania-crm/stores/workflow';\nimport { getOneWorkflow, getWorkflowTypes, getLoadingStatus } from '@britania-crm/stores/workflow/workflow.selectors';\nimport colors from '@britania-crm/styles/colors';\nimport { formatBackDateTimeToBackDateFormat, dateBackFormat } from '@britania-crm/utils/date';\nimport Button from '@britania-crm/web-components/Button';\nimport CheckboxStatus from '@britania-crm/web-components/CheckboxStatus';\nimport Form from '@britania-crm/web-components/Form';\nimport InputDate from '@britania-crm/web-components/InputDate';\nimport InputDateRange from '@britania-crm/web-components/InputDateRange';\nimport InputSelect from '@britania-crm/web-components/InputSelect';\nimport InputText from '@britania-crm/web-components/InputText';\nimport InputUsername from '@britania-crm/web-components/InputUsername';\nimport ConfirmModal from '@britania-crm/web-components/Modal/ConfirmModal';\nimport TreeView from '@britania-crm/web-components/TreeView';\nimport { useRoutes } from '@britania-crm/web-src/routes/authenticated.routes';\nimport TaskCreationModal from '../../modals/TaskCreationModal';\nimport HistoricAccordion from './Historic';\nimport { PageWrapper, useStyles, TreeViewContainer } from './styled';\nimport { formatTasks, formatRequest } from './utils';\n\nconst WorkflowPanelCreateScreen = () => {\n  const dispatch = useCallback(useDispatch(), []);\n  const classes = useStyles();\n  const t = useT();\n  const {\n    createDialog\n  } = useDialog();\n  const history = useHistory();\n  const {\n    state\n  } = useLocation();\n  const {\n    routes,\n    currentRoutePermissions,\n    currentPath\n  } = useRoutes();\n  const [tasks, setTasks] = useState([]);\n  const workflow = useSelector(getOneWorkflow);\n  const workflowTypes = useSelector(getWorkflowTypes);\n  const loadingStatus = useSelector(getLoadingStatus);\n  const formRef = useRef(null);\n  const workflowStatus = useMemo(() => !isEmpty(workflow) && workflow.status !== 'INACTIVE', [workflow]);\n  const workflowId = useMemo(() => state === null || state === void 0 ? void 0 : state.workflowId, [state]);\n  const goBackTo = useMemo(() => state === null || state === void 0 ? void 0 : state.goBackTo, [state]);\n  const mode = useMemo(() => {\n    switch (currentPath) {\n      case routes.workflowPanelCreate.path:\n        return 'create';\n\n      case routes.workflowPanelEdit.path:\n        return 'edit';\n\n      default:\n        return 'view';\n    }\n  }, [currentPath, routes.workflowPanelCreate.path, routes.workflowPanelEdit.path]);\n  const title = useMemo(() => {\n    switch (mode) {\n      case 'create':\n        return t('new workflow');\n\n      case 'edit':\n        return t('edit workflow');\n\n      default:\n        return t('view of {this}', {\n          this: t('workflow panel')\n        });\n    }\n  }, [mode, t]);\n  const isView = useMemo(() => mode === 'view', [mode]);\n  const handleGoBack = useCallback(() => history.push(goBackTo || routes.workflowPanel.path), [goBackTo, history, routes.workflowPanel.path]);\n  const handleSubmit = useCallback(values => {\n    if (isEmpty(tasks)) {\n      return dispatch(AppActions.addAlert({\n        type: 'error',\n        message: MSG031\n      }));\n    }\n\n    const payload = formatRequest(values, tasks);\n    const action = mode === 'create' ? WorkflowActions.createWorkflow(payload, handleGoBack) : WorkflowActions.updateWorkflow(payload, workflowId, handleGoBack);\n    dispatch(action);\n  }, [dispatch, handleGoBack, mode, tasks, workflowId]);\n  const handleOpenTaskCreationModal = useCallback(task => {\n    createDialog({\n      id: 'taskCreationModal',\n      Component: TaskCreationModal,\n      props: {\n        allTasks: tasks,\n        task,\n        onSubmit: setTasks\n      }\n    });\n  }, [createDialog, tasks]);\n  const onAddNewTaskComplete = useCallback(newTask => {\n    setTasks(prevState => [...prevState, newTask]);\n  }, []);\n  const handleConfirmCancel = useCallback(() => {\n    createDialog({\n      id: 'confirm-cancel',\n      Component: ConfirmModal,\n      props: {\n        onConfirm: handleGoBack,\n        text: mode === 'create' ? t('Do you want to cancel the registration?') : t('Do you want to cancel editing?')\n      }\n    });\n  }, [createDialog, mode, handleGoBack, t]);\n  const handleInactive = useCallback(() => {\n    createDialog({\n      id: 'confirm-cancel',\n      Component: ConfirmModal,\n      props: {\n        text: t('Do you want to deactivate the workflow?'),\n\n        onConfirm() {\n          dispatch(WorkflowActions.deactivateWorkflow(workflowId, handleGoBack));\n        }\n\n      }\n    });\n  }, [createDialog, dispatch, handleGoBack, t, workflowId]);\n  const leftButton = useMemo(() => {\n    if (mode === 'edit' && currentRoutePermissions.INATIVAR) {\n      return /*#__PURE__*/React.createElement(I18n, {\n        as: Button,\n        isLoading: loadingStatus === null || loadingStatus === void 0 ? void 0 : loadingStatus.inactivate,\n        disabled: loadingStatus === null || loadingStatus === void 0 ? void 0 : loadingStatus.save,\n        color: \"secondary\",\n        variant: \"outlined\",\n        onClick: handleInactive,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 11\n        }\n      }, \"inactivate\");\n    } else if (mode === 'create') {\n      return /*#__PURE__*/React.createElement(I18n, {\n        as: Button,\n        color: \"secondary\",\n        className: classes.resetBtn,\n        disabled: (loadingStatus === null || loadingStatus === void 0 ? void 0 : loadingStatus.inactivate) || (loadingStatus === null || loadingStatus === void 0 ? void 0 : loadingStatus.save),\n        variant: \"text\",\n        onClick: () => {\n          setTasks([]);\n          formRef.current.reset();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }\n      }, \"clean\");\n    }\n\n    return null;\n  }, [classes.resetBtn, currentRoutePermissions.INATIVAR, handleInactive, loadingStatus.inactivate, loadingStatus.save, mode]);\n  const statusLabel = useMemo(() => {\n    if (workflow.status === 'ACTIVE') {\n      return t('running');\n    } else if (workflow.status === 'PROGRAMMED') {\n      return t('programmed');\n    } else if (workflow.status === 'EXPIRED') {\n      return t('overdue');\n    } else {\n      return undefined;\n    }\n  }, [t, workflow]);\n  const statusColor = useMemo(() => {\n    if (workflow.status === 'PROGRAMMED') {\n      return colors.warning.main;\n    } else if (workflow.status === 'EXPIRED') {\n      return colors.orange.base;\n    }\n  }, [workflow]);\n  const minFrom = useMemo(() => moment().format(dateBackFormat), []);\n  const schemaConstructor = useCallback(options => workflowSchema({ ...options,\n    minFrom\n  }), [minFrom]);\n  useEffect(() => {\n    if (workflowId) {\n      dispatch(WorkflowActions.getOneWorkflow(workflowId));\n    }\n\n    dispatch(WorkflowActions.getWorkflowTypes());\n  }, [dispatch, workflowId]);\n  useEffect(() => {\n    dispatch(AccessActions.getAllAccesses());\n    dispatch(ProfilesActions.getAllProfiles());\n  }, [dispatch]);\n  useFormEffect(() => {\n    if (!isEmpty(workflow) && workflowId) {\n      var _find;\n\n      formRef.current.setData({ ...workflow,\n        title: workflow.title,\n        typeId: ((_find = find(workflowTypes, element => element.description === workflow.type)) === null || _find === void 0 ? void 0 : _find.id) || '',\n        period: {\n          from: formatBackDateTimeToBackDateFormat(workflow.dateStart),\n          to: formatBackDateTimeToBackDateFormat(workflow.dateEnd)\n        },\n        description: workflow.description,\n        lastUpdateLogin: workflow.lastUpdateLogin,\n        version: workflow.version,\n        lastUpdateDate: formatBackDateTimeToBackDateFormat(workflow.lastUpdateDate)\n      });\n      const tasks = formatTasks(workflow.tasks);\n      setTasks(tasks);\n    }\n  }, [mode, workflow, workflowId, workflowTypes]);\n  return /*#__PURE__*/React.createElement(PageWrapper, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    classes: {\n      root: classes.container\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 313,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    className: classes.header,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Typography, {\n    className: classes.title,\n    variant: \"h4\",\n    gutterBottom: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 11\n    }\n  }, title)), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 320,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    className: classes.card,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 321,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    ref: formRef,\n    schemaConstructor: schemaConstructor,\n    defaultValues: INITIAL_VALUES,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(InputText, {\n    name: \"title\",\n    label: t('workflow title'),\n    disabled: isView,\n    inputProps: {\n      maxLength: 81\n    },\n    touchOnChange: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 330,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(InputSelect, {\n    name: \"typeId\",\n    label: t('type'),\n    options: workflowTypes,\n    valueKey: \"description\",\n    disabled: isView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(InputDateRange, {\n    disabled: isView,\n    min: minFrom,\n    name: \"period\",\n    label: t('period', {\n      howMany: 1\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 19\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(InputText, {\n    name: \"description\",\n    label: t('description'),\n    disabled: isView,\n    inputProps: {\n      maxLength: 201\n    },\n    touchOnChange: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 359,\n      columnNumber: 19\n    }\n  })), mode !== 'create' && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    md: 2,\n    style: {\n      display: 'flex',\n      alignItems: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 370,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(CheckboxStatus, {\n    name: \"status\",\n    detached: true,\n    value: workflowStatus,\n    activeStatus: statusLabel,\n    activeColor: statusColor,\n    disabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 371,\n      columnNumber: 23\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 381,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(InputUsername, {\n    name: \"lastUpdateLogin\",\n    label: t('login last change'),\n    disabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 23\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 389,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(InputDate, {\n    name: \"lastUpdateDate\",\n    label: t('date last edit'),\n    disabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 390,\n      columnNumber: 23\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    md: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(InputText, {\n    name: \"version\",\n    label: t('version'),\n    disabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 397,\n      columnNumber: 23\n    }\n  })))), /*#__PURE__*/React.createElement(TreeViewContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(TreeView, {\n    items: tasks,\n    onChange: setTasks,\n    onAddOrEditTask: handleOpenTaskCreationModal,\n    onAddNewTaskComplete: onAddNewTaskComplete,\n    isTaskView: true,\n    id: \"tree\",\n    readOnly: mode === 'view',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 408,\n      columnNumber: 17\n    }\n  })), mode === 'view' && /*#__PURE__*/React.createElement(HistoricAccordion, {\n    workflow: workflow,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 17\n    }\n  }))), /*#__PURE__*/React.createElement(CardActions, {\n    className: classes.buttons,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 11\n    }\n  }, mode === 'view' ? /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 17\n    }\n  }, leftButton), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(I18n, {\n    as: Button,\n    type: \"reset\",\n    color: \"secondary\",\n    variant: \"outlined\",\n    disabled: (loadingStatus === null || loadingStatus === void 0 ? void 0 : loadingStatus.save) || (loadingStatus === null || loadingStatus === void 0 ? void 0 : loadingStatus.inactivate),\n    onClick: handleGoBack,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 434,\n      columnNumber: 19\n    }\n  }, \"back\"))) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 447,\n      columnNumber: 17\n    }\n  }, leftButton), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 451,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(I18n, {\n    as: Button,\n    variant: \"outlined\",\n    color: \"secondary\",\n    disabled: (loadingStatus === null || loadingStatus === void 0 ? void 0 : loadingStatus.save) || (loadingStatus === null || loadingStatus === void 0 ? void 0 : loadingStatus.inactivate),\n    onClick: handleConfirmCancel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 452,\n      columnNumber: 19\n    }\n  }, \"cancel\"), /*#__PURE__*/React.createElement(Button, {\n    color: \"secondary\",\n    variant: \"contained\",\n    className: classes.btnSave,\n    isLoading: loadingStatus === null || loadingStatus === void 0 ? void 0 : loadingStatus.save,\n    disabled: loadingStatus === null || loadingStatus === void 0 ? void 0 : loadingStatus.inactivate,\n    onClick: () => formRef.current.submit(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 461,\n      columnNumber: 19\n    }\n  }, mode === 'create' ? t('finish registration') : t('save'))))))));\n};\n\nexport default WorkflowPanelCreateScreen;","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/workflowPanel/screens/WorkflowPanelCreateScreen/WorkflowPanelCreateScreen.js"],"names":["React","useMemo","useEffect","useCallback","useState","useRef","useDispatch","useSelector","useHistory","useLocation","moment","find","isEmpty","CardActions","CardContent","Grid","Typography","MSG031","useDialog","useFormEffect","workflowSchema","INITIAL_VALUES","I18n","useT","AccessActions","AppActions","ProfilesActions","WorkflowActions","getOneWorkflow","getWorkflowTypes","getLoadingStatus","colors","formatBackDateTimeToBackDateFormat","dateBackFormat","Button","CheckboxStatus","Form","InputDate","InputDateRange","InputSelect","InputText","InputUsername","ConfirmModal","TreeView","useRoutes","TaskCreationModal","HistoricAccordion","PageWrapper","useStyles","TreeViewContainer","formatTasks","formatRequest","WorkflowPanelCreateScreen","dispatch","classes","t","createDialog","history","state","routes","currentRoutePermissions","currentPath","tasks","setTasks","workflow","workflowTypes","loadingStatus","formRef","workflowStatus","status","workflowId","goBackTo","mode","workflowPanelCreate","path","workflowPanelEdit","title","this","isView","handleGoBack","push","workflowPanel","handleSubmit","values","addAlert","type","message","payload","action","createWorkflow","updateWorkflow","handleOpenTaskCreationModal","task","id","Component","props","allTasks","onSubmit","onAddNewTaskComplete","newTask","prevState","handleConfirmCancel","onConfirm","text","handleInactive","deactivateWorkflow","leftButton","INATIVAR","inactivate","save","resetBtn","current","reset","statusLabel","undefined","statusColor","warning","main","orange","base","minFrom","format","schemaConstructor","options","getAllAccesses","getAllProfiles","setData","typeId","element","description","period","from","dateStart","to","dateEnd","lastUpdateLogin","version","lastUpdateDate","root","container","header","card","maxLength","howMany","display","alignItems","buttons","btnSave","submit"],"mappings":"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","sourcesContent":["import React, {\n  useMemo,\n  useEffect,\n  useCallback,\n  useState,\n  useRef\n} from 'react'\nimport {\n  useDispatch,\n  useSelector\n} from 'react-redux'\nimport {\n  useHistory,\n  useLocation\n} from 'react-router-dom'\n\nimport moment from 'moment/moment'\n\nimport find from 'lodash/find'\nimport isEmpty from 'lodash/isEmpty'\n\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\n\nimport { MSG031 } from '@britania-crm/constants/feedbackMessages.constants'\nimport { useDialog } from '@britania-crm/dialog'\nimport { useFormEffect } from '@britania-crm/forms'\nimport workflowSchema, { INITIAL_VALUES } from '@britania-crm/forms/schemas/workflow/workflow.schema'\nimport I18n, { useT } from '@britania-crm/i18n'\nimport { AccessActions } from '@britania-crm/stores/access'\nimport { AppActions } from '@britania-crm/stores/app'\nimport { ProfilesActions } from '@britania-crm/stores/profiles'\nimport { WorkflowActions } from '@britania-crm/stores/workflow'\nimport {\n  getOneWorkflow,\n  getWorkflowTypes,\n  getLoadingStatus\n} from '@britania-crm/stores/workflow/workflow.selectors'\nimport colors from '@britania-crm/styles/colors'\nimport {\n  formatBackDateTimeToBackDateFormat,\n  dateBackFormat\n} from '@britania-crm/utils/date'\nimport Button from '@britania-crm/web-components/Button'\nimport CheckboxStatus from '@britania-crm/web-components/CheckboxStatus'\nimport Form from '@britania-crm/web-components/Form'\nimport InputDate from '@britania-crm/web-components/InputDate'\nimport InputDateRange from '@britania-crm/web-components/InputDateRange'\nimport InputSelect from '@britania-crm/web-components/InputSelect'\nimport InputText from '@britania-crm/web-components/InputText'\nimport InputUsername from '@britania-crm/web-components/InputUsername'\nimport ConfirmModal from '@britania-crm/web-components/Modal/ConfirmModal'\nimport TreeView from '@britania-crm/web-components/TreeView'\nimport { useRoutes } from '@britania-crm/web-src/routes/authenticated.routes'\n\nimport TaskCreationModal from '../../modals/TaskCreationModal'\nimport HistoricAccordion from './Historic'\nimport {\n  PageWrapper,\n  useStyles,\n  TreeViewContainer\n} from './styled'\nimport {\n  formatTasks,\n  formatRequest\n} from './utils'\n\nconst WorkflowPanelCreateScreen = () => {\n  const dispatch = useCallback(useDispatch(), [])\n  const classes = useStyles()\n  const t = useT()\n  const { createDialog } = useDialog()\n  const history = useHistory()\n  const { state } = useLocation()\n  const {\n    routes,\n    currentRoutePermissions,\n    currentPath\n  } = useRoutes()\n\n  const [tasks, setTasks] = useState([])\n\n  const workflow = useSelector(getOneWorkflow)\n  const workflowTypes = useSelector(getWorkflowTypes)\n  const loadingStatus = useSelector(getLoadingStatus)\n\n  const formRef = useRef(null)\n\n  const workflowStatus = useMemo(\n    () => !isEmpty(workflow) && workflow.status !== 'INACTIVE',\n    [workflow]\n  )\n\n  const workflowId = useMemo(\n    () => state?.workflowId,\n    [state]\n  )\n\n  const goBackTo = useMemo(\n    () => state?.goBackTo,\n    [state]\n  )\n\n  const mode = useMemo(\n    () => {\n      switch (currentPath) {\n        case routes.workflowPanelCreate.path: return 'create'\n        case routes.workflowPanelEdit.path: return 'edit'\n        default: return 'view'\n      }\n    },\n    [currentPath, routes.workflowPanelCreate.path, routes.workflowPanelEdit.path]\n  )\n\n  const title = useMemo(() => {\n    switch (mode) {\n      case 'create': return t('new workflow')\n      case 'edit': return t('edit workflow')\n      default: return t('view of {this}', { this: t('workflow panel') })\n    }\n  }, [mode, t])\n\n  const isView = useMemo(() => mode === 'view', [mode])\n\n  const handleGoBack = useCallback(\n    () => history.push(goBackTo || routes.workflowPanel.path),\n    [goBackTo, history, routes.workflowPanel.path]\n  )\n\n  const handleSubmit = useCallback(\n    (values) => {\n      if (isEmpty(tasks)) {\n        return dispatch(AppActions.addAlert({\n          type: 'error',\n          message: MSG031\n        }))\n      }\n\n      const payload = formatRequest(values, tasks)\n      const action = mode === 'create'\n        ? WorkflowActions.createWorkflow(payload, handleGoBack)\n        : WorkflowActions.updateWorkflow(payload, workflowId, handleGoBack)\n      dispatch(action)\n    },\n    [dispatch, handleGoBack, mode, tasks, workflowId]\n  )\n\n  const handleOpenTaskCreationModal = useCallback(\n    (task) => {\n      createDialog({\n        id: 'taskCreationModal',\n        Component: TaskCreationModal,\n        props: {\n          allTasks: tasks,\n          task,\n          onSubmit: setTasks\n        }\n      })\n    },\n    [createDialog, tasks]\n  )\n\n  const onAddNewTaskComplete = useCallback(\n    (newTask) => {\n      setTasks((prevState) => ([...prevState, newTask]))\n    },\n    []\n  )\n\n  const handleConfirmCancel = useCallback(\n    () => {\n      createDialog({\n        id: 'confirm-cancel',\n        Component: ConfirmModal,\n        props: {\n          onConfirm: handleGoBack,\n          text: mode === 'create'\n            ? t('Do you want to cancel the registration?')\n            : t('Do you want to cancel editing?')\n        }\n      })\n    },\n    [createDialog, mode, handleGoBack, t]\n  )\n\n  const handleInactive = useCallback(\n    () => {\n      createDialog({\n        id: 'confirm-cancel',\n        Component: ConfirmModal,\n        props: {\n          text: t('Do you want to deactivate the workflow?'),\n          onConfirm () {\n            dispatch(WorkflowActions.deactivateWorkflow(\n              workflowId,\n              handleGoBack\n            ))\n          }\n        }\n      })\n    },\n    [createDialog, dispatch, handleGoBack, t, workflowId]\n  )\n\n  const leftButton = useMemo(\n    () => {\n      if (mode === 'edit' && currentRoutePermissions.INATIVAR) {\n        return (\n          <I18n as={ Button }\n            isLoading={ loadingStatus?.inactivate }\n            disabled= { loadingStatus?.save }\n            color=\"secondary\"\n            variant=\"outlined\"\n            onClick={ handleInactive }\n          >\n            inactivate\n          </I18n>\n        )\n      } else if (mode === 'create') {\n        return (\n          <I18n as={ Button }\n            color=\"secondary\"\n            className={ classes.resetBtn }\n            disabled={ loadingStatus?.inactivate || loadingStatus?.save }\n            variant=\"text\"\n            onClick={ () => {\n              setTasks([])\n              formRef.current.reset()\n            } }\n          >\n            clean\n          </I18n>\n        )\n      }\n      return null\n    },\n    [classes.resetBtn, currentRoutePermissions.INATIVAR, handleInactive, loadingStatus.inactivate, loadingStatus.save, mode]\n  )\n\n  const statusLabel = useMemo(\n    () => {\n      if (workflow.status === 'ACTIVE') {\n        return t('running')\n      } else if (workflow.status === 'PROGRAMMED') {\n        return t('programmed')\n      } else if (workflow.status === 'EXPIRED') {\n        return t('overdue')\n      } else {\n        return undefined\n      }\n    },\n    [t, workflow]\n  )\n\n  const statusColor = useMemo(\n    () => {\n      if (workflow.status === 'PROGRAMMED') {\n        return colors.warning.main\n      } else if (workflow.status === 'EXPIRED') {\n        return colors.orange.base\n      }\n    },\n    [workflow]\n  )\n\n  const minFrom = useMemo(() => moment().format(dateBackFormat), [])\n\n  const schemaConstructor = useCallback(\n    (options) => workflowSchema({ ...options, minFrom }),\n    [minFrom]\n  )\n\n  useEffect(() => {\n    if (workflowId) {\n      dispatch(WorkflowActions.getOneWorkflow(workflowId))\n    }\n    dispatch(WorkflowActions.getWorkflowTypes())\n  }, [dispatch, workflowId])\n\n  useEffect(() => {\n    dispatch(AccessActions.getAllAccesses())\n    dispatch(ProfilesActions.getAllProfiles())\n  }, [dispatch])\n\n  useFormEffect(() => {\n    if (!isEmpty(workflow) && workflowId) {\n      formRef.current.setData({\n        ...workflow,\n        title: workflow.title,\n        typeId: find(\n          workflowTypes,\n          (element) => element.description === workflow.type\n        )?.id || '',\n        period: {\n          from: formatBackDateTimeToBackDateFormat(workflow.dateStart),\n          to: formatBackDateTimeToBackDateFormat(workflow.dateEnd)\n        },\n        description: workflow.description,\n        lastUpdateLogin: workflow.lastUpdateLogin,\n        version: workflow.version,\n        lastUpdateDate: formatBackDateTimeToBackDateFormat(workflow.lastUpdateDate)\n      })\n\n      const tasks = formatTasks(workflow.tasks)\n      setTasks(tasks)\n    }\n  }, [mode, workflow, workflowId, workflowTypes])\n\n  return (\n    <PageWrapper>\n      <Grid container classes={ { root: classes.container } }>\n        <Grid item sm={ 12 } className={ classes.header }>\n          <Typography className={ classes.title } variant=\"h4\" gutterBottom >\n            {title}\n          </Typography>\n        </Grid>\n\n        <Grid item xs={ 12 }>\n          <CardContent className={ classes.card }>\n            <Form\n              ref={ formRef }\n              schemaConstructor={ schemaConstructor }\n              defaultValues={ INITIAL_VALUES }\n              onSubmit={ handleSubmit }\n            >\n              <Grid container spacing={ 1 }>\n                <Grid item sm={ 12 } md={ 4 }>\n                  <InputText\n                    name=\"title\"\n                    label={ t('workflow title') }\n                    disabled={ isView }\n                    inputProps={ { maxLength: 81 } }\n                    touchOnChange\n                  />\n                </Grid>\n\n                <Grid item sm={ 12 } md={ 4 }>\n                  <InputSelect\n                    name=\"typeId\"\n                    label={ t('type') }\n                    options={ workflowTypes }\n                    valueKey=\"description\"\n                    disabled={ isView }\n                  />\n                </Grid>\n\n                <Grid item sm={ 12 } md={ 4 }>\n                  <InputDateRange\n                    disabled={ isView }\n                    min={ minFrom }\n                    name=\"period\"\n                    label={ t('period', { howMany: 1 }) }\n                  />\n                </Grid>\n\n                <Grid item sm={ 12 } md={ 12 }>\n                  <InputText\n                    name=\"description\"\n                    label={ t('description') }\n                    disabled={ isView }\n                    inputProps={ { maxLength: 201 } }\n                    touchOnChange\n                  />\n                </Grid>\n\n                {mode !== 'create' && (\n                  <>\n                    <Grid item sm={ 12 } md={ 2 } style={ { display: 'flex', alignItems: 'center' } }>\n                      <CheckboxStatus\n                        name=\"status\"\n                        detached\n                        value={ workflowStatus }\n                        activeStatus={ statusLabel }\n                        activeColor={ statusColor }\n                        disabled\n                      />\n                    </Grid>\n\n                    <Grid item sm={ 12 } md={ 4 }>\n                      <InputUsername\n                        name=\"lastUpdateLogin\"\n                        label={ t('login last change') }\n                        disabled\n                      />\n                    </Grid>\n\n                    <Grid item sm={ 12 } md={ 4 }>\n                      <InputDate\n                        name=\"lastUpdateDate\"\n                        label={ t('date last edit') }\n                        disabled\n                      />\n                    </Grid>\n                    <Grid item sm={ 12 } md={ 2 }>\n                      <InputText\n                        name=\"version\"\n                        label={ t('version') }\n                        disabled\n                      />\n                    </Grid>\n                  </>\n                )}\n              </Grid>\n\n              <TreeViewContainer>\n                <TreeView\n                  items={ tasks }\n                  onChange={ setTasks }\n                  onAddOrEditTask={ handleOpenTaskCreationModal }\n                  onAddNewTaskComplete={ onAddNewTaskComplete }\n                  isTaskView\n                  id=\"tree\"\n                  readOnly={ mode === 'view' }\n                />\n              </TreeViewContainer>\n\n              {mode === 'view' && (\n                <HistoricAccordion workflow={ workflow } />\n              )}\n\n            </Form>\n          </CardContent>\n\n          <CardActions className={ classes.buttons }>\n            {mode === 'view' ? (\n              <>\n                <Grid item>\n                  {leftButton}\n                </Grid>\n\n                <Grid item>\n                  <I18n as={ Button }\n                    type=\"reset\"\n                    color=\"secondary\"\n                    variant=\"outlined\"\n                    disabled= { loadingStatus?.save || loadingStatus?.inactivate }\n                    onClick={ handleGoBack }\n                  >\n                  back\n                  </I18n>\n                </Grid>\n              </>\n            ) : (\n              <>\n                <Grid item>\n                  {leftButton}\n                </Grid>\n\n                <Grid item>\n                  <I18n\n                    as={ Button }\n                    variant=\"outlined\"\n                    color=\"secondary\"\n                    disabled= { loadingStatus?.save || loadingStatus?.inactivate }\n                    onClick={ handleConfirmCancel }\n                  >\n                    cancel\n                  </I18n>\n                  <Button\n                    color=\"secondary\"\n                    variant=\"contained\"\n                    className={ classes.btnSave }\n                    isLoading={ loadingStatus?.save }\n                    disabled= { loadingStatus?.inactivate }\n                    onClick={ () => formRef.current.submit() }\n                  >\n                    { mode === 'create' ? t('finish registration') : t('save') }\n                  </Button>\n                </Grid>\n              </>\n            )}\n          </CardActions>\n        </Grid>\n      </Grid>\n    </PageWrapper>\n  )\n}\n\nexport default WorkflowPanelCreateScreen\n"]},"metadata":{},"sourceType":"module"}