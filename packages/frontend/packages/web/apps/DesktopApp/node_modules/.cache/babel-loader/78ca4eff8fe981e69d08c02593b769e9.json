{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/src/layouts/MainLayout/components/TabsNavigation/TabsNavigation.js\";\nimport React, { memo, useCallback, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport { AppActions } from '@britania-crm/stores/app';\nimport { ReminderIcon } from '@britania-crm/web-components/Icons';\nimport Reminder from './Reminder';\nimport { Tab, Container, Wrapper } from './styled';\n\nconst Tabs = () => {\n  const dispatch = useDispatch();\n  const remindersData = useSelector(state => state.app.reminders);\n  useEffect(() => {\n    dispatch(AppActions.getAllReminders());\n  }, [dispatch]);\n  const handleClose = useCallback((event, reminderId) => {\n    event.stopPropagation();\n    dispatch(AppActions.closeReminder(reminderId));\n  }, [dispatch]);\n  const handleMinimize = useCallback(({\n    reminderId,\n    minimize\n  }) => {\n    dispatch(AppActions.minimizeReminder(reminderId, minimize));\n  }, [dispatch]);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }, remindersData.map(reminder => /*#__PURE__*/React.createElement(Wrapper, {\n    key: String(reminder.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Tab, {\n    show: !reminder.showContent,\n    onClick: () => handleMinimize({\n      reminderId: reminder.id,\n      minimize: false\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ReminderIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 15\n    }\n  }, \"Lem. #\", reminder.id)), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: event => handleClose(event, reminder.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(ClearIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(Reminder, {\n    reminder: reminder,\n    show: reminder.showContent,\n    handleMinimize: handleMinimize,\n    handleClose: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default memo(Tabs);","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/src/layouts/MainLayout/components/TabsNavigation/TabsNavigation.js"],"names":["React","memo","useCallback","useEffect","useDispatch","useSelector","ClearIcon","AppActions","ReminderIcon","Reminder","Tab","Container","Wrapper","Tabs","dispatch","remindersData","state","app","reminders","getAllReminders","handleClose","event","reminderId","stopPropagation","closeReminder","handleMinimize","minimize","minimizeReminder","map","reminder","String","id","showContent"],"mappings":";AAAA,OAAOA,KAAP,IACEC,IADF,EAEEC,WAFF,EAGEC,SAHF,QAIO,OAJP;AAKA,SACEC,WADF,EAEEC,WAFF,QAGO,aAHP;AAKA,OAAOC,SAAP,MAAsB,0BAAtB;AAEA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,YAAT,QAA6B,oCAA7B;AAEA,OAAOC,QAAP,MAAqB,YAArB;AACA,SACEC,GADF,EAEEC,SAFF,EAGEC,OAHF,QAIO,UAJP;;AAMA,MAAMC,IAAI,GAAG,MAAM;AACjB,QAAMC,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAMW,aAAa,GAAGV,WAAW,CAAEW,KAAD,IAAWA,KAAK,CAACC,GAAN,CAAUC,SAAtB,CAAjC;AAEAf,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,QAAQ,CAACP,UAAU,CAACY,eAAX,EAAD,CAAR;AACD,GAFQ,EAEN,CAACL,QAAD,CAFM,CAAT;AAIA,QAAMM,WAAW,GAAGlB,WAAW,CAAC,CAACmB,KAAD,EAAQC,UAAR,KAAuB;AACrDD,IAAAA,KAAK,CAACE,eAAN;AACAT,IAAAA,QAAQ,CAACP,UAAU,CAACiB,aAAX,CAAyBF,UAAzB,CAAD,CAAR;AACD,GAH8B,EAG5B,CAACR,QAAD,CAH4B,CAA/B;AAKA,QAAMW,cAAc,GAAGvB,WAAW,CAAC,CAAC;AAAEoB,IAAAA,UAAF;AAAcI,IAAAA;AAAd,GAAD,KAA8B;AAC/DZ,IAAAA,QAAQ,CAACP,UAAU,CAACoB,gBAAX,CAA4BL,UAA5B,EAAwCI,QAAxC,CAAD,CAAR;AACD,GAFiC,EAE/B,CAACZ,QAAD,CAF+B,CAAlC;AAIA,sBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,aAAa,CAACa,GAAd,CAAmBC,QAAD,iBACjB,oBAAC,OAAD;AAAS,IAAA,GAAG,EAAGC,MAAM,CAACD,QAAQ,CAACE,EAAV,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,GAAD;AACE,IAAA,IAAI,EAAG,CAACF,QAAQ,CAACG,WADnB;AAEE,IAAA,OAAO,EAAG,MAAMP,cAAc,CAAC;AAAEH,MAAAA,UAAU,EAAEO,QAAQ,CAACE,EAAvB;AAA2BL,MAAAA,QAAQ,EAAE;AAArC,KAAD,CAFhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAaG,QAAQ,CAACE,EAAtB,CAFF,CAJF,eASE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAIV,KAAD,IAAWD,WAAW,CAACC,KAAD,EAAQQ,QAAQ,CAACE,EAAjB,CAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CATF,CADF,eAeE,oBAAC,QAAD;AACE,IAAA,QAAQ,EAAGF,QADb;AAEE,IAAA,IAAI,EAAGA,QAAQ,CAACG,WAFlB;AAGE,IAAA,cAAc,EAAGP,cAHnB;AAIE,IAAA,WAAW,EAAGL,WAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAfF,CADD,CADH,CADF;AA4BD,CA7CD;;AA+CA,eAAenB,IAAI,CAACY,IAAD,CAAnB","sourcesContent":["import React, {\n  memo,\n  useCallback,\n  useEffect\n} from 'react'\nimport {\n  useDispatch,\n  useSelector\n} from 'react-redux'\n\nimport ClearIcon from '@material-ui/icons/Clear'\n\nimport { AppActions } from '@britania-crm/stores/app'\nimport { ReminderIcon } from '@britania-crm/web-components/Icons'\n\nimport Reminder from './Reminder'\nimport {\n  Tab,\n  Container,\n  Wrapper\n} from './styled'\n\nconst Tabs = () => {\n  const dispatch = useDispatch()\n  const remindersData = useSelector((state) => state.app.reminders)\n\n  useEffect(() => {\n    dispatch(AppActions.getAllReminders())\n  }, [dispatch])\n\n  const handleClose = useCallback((event, reminderId) => {\n    event.stopPropagation()\n    dispatch(AppActions.closeReminder(reminderId))\n  }, [dispatch])\n\n  const handleMinimize = useCallback(({ reminderId, minimize }) => {\n    dispatch(AppActions.minimizeReminder(reminderId, minimize))\n  }, [dispatch])\n\n  return (\n    <Container>\n      {remindersData.map((reminder) =>\n        <Wrapper key={ String(reminder.id) }>\n          <Tab\n            show={ !reminder.showContent }\n            onClick={ () => handleMinimize({ reminderId: reminder.id, minimize: false }) }\n          >\n            <div>\n              <ReminderIcon />\n              <span>Lem. #{reminder.id}</span>\n            </div>\n\n            <button type=\"button\" onClick={ (event) => handleClose(event, reminder.id) }>\n              <ClearIcon />\n            </button>\n          </Tab>\n\n          <Reminder\n            reminder={ reminder }\n            show={ reminder.showContent }\n            handleMinimize={ handleMinimize }\n            handleClose={ handleClose }\n          />\n        </Wrapper>\n      )}\n    </Container>\n  )\n}\n\nexport default memo(Tabs)\n"]},"metadata":{},"sourceType":"module"}