{"ast":null,"code":"var _curry2 = /*#__PURE__*/require('./internal/_curry2');\n/**\n * Creates a new object out of a list of keys and a list of values.\n * Key/value pairing is truncated to the length of the shorter of the two lists.\n * Note: `zipObj` is equivalent to `pipe(zip, fromPairs)`.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [String] -> [*] -> {String: *}\n * @param {Array} keys The array that will be properties on the output object.\n * @param {Array} values The list of values on the output object.\n * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.\n * @example\n *\n *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}\n */\n\n\nvar zipObj = /*#__PURE__*/_curry2(function zipObj(keys, values) {\n  var idx = 0;\n  var len = Math.min(keys.length, values.length);\n  var out = {};\n\n  while (idx < len) {\n    out[keys[idx]] = values[idx];\n    idx += 1;\n  }\n\n  return out;\n});\n\nmodule.exports = zipObj;","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/node_modules/ramda/src/zipObj.js"],"names":["_curry2","require","zipObj","keys","values","idx","len","Math","min","length","out","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GAAG,aAAaC,OAAO,CAAC,oBAAD,CAAlC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAIC,MAAM,GAAG,aAAaF,OAAO,CAAC,SAASE,MAAT,CAAgBC,IAAhB,EAAsBC,MAAtB,EAA8B;AAC9D,MAAIC,GAAG,GAAG,CAAV;AACA,MAAIC,GAAG,GAAGC,IAAI,CAACC,GAAL,CAASL,IAAI,CAACM,MAAd,EAAsBL,MAAM,CAACK,MAA7B,CAAV;AACA,MAAIC,GAAG,GAAG,EAAV;;AACA,SAAOL,GAAG,GAAGC,GAAb,EAAkB;AAChBI,IAAAA,GAAG,CAACP,IAAI,CAACE,GAAD,CAAL,CAAH,GAAiBD,MAAM,CAACC,GAAD,CAAvB;AACAA,IAAAA,GAAG,IAAI,CAAP;AACD;;AACD,SAAOK,GAAP;AACD,CATgC,CAAjC;;AAUAC,MAAM,CAACC,OAAP,GAAiBV,MAAjB","sourcesContent":["var _curry2 = /*#__PURE__*/require('./internal/_curry2');\n\n/**\n * Creates a new object out of a list of keys and a list of values.\n * Key/value pairing is truncated to the length of the shorter of the two lists.\n * Note: `zipObj` is equivalent to `pipe(zip, fromPairs)`.\n *\n * @func\n * @memberOf R\n * @since v0.3.0\n * @category List\n * @sig [String] -> [*] -> {String: *}\n * @param {Array} keys The array that will be properties on the output object.\n * @param {Array} values The list of values on the output object.\n * @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.\n * @example\n *\n *      R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}\n */\n\n\nvar zipObj = /*#__PURE__*/_curry2(function zipObj(keys, values) {\n  var idx = 0;\n  var len = Math.min(keys.length, values.length);\n  var out = {};\n  while (idx < len) {\n    out[keys[idx]] = values[idx];\n    idx += 1;\n  }\n  return out;\n});\nmodule.exports = zipObj;"]},"metadata":{},"sourceType":"script"}