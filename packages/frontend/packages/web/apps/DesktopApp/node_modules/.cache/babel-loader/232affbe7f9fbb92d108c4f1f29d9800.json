{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/vpc/modals/formFileModal/FormFileModal.js\";\nimport React, { useRef, useCallback, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport isEmpty from 'lodash/isEmpty';\nimport Grid from '@material-ui/core/Grid';\nimport { useFormEffect } from '@britania-crm/forms';\nimport attachmentsSchema, { INITIAL_VALUES } from '@britania-crm/forms/schemas/vpc/vpc.attachments.schema';\nimport I18n, { useT } from '@britania-crm/i18n';\nimport Button from '@britania-crm/web-components/Button';\nimport Form from '@britania-crm/web-components/Form';\nimport InputHidden from '@britania-crm/web-components/InputHidden';\nimport InputText from '@britania-crm/web-components/InputText';\nimport Modal from '@britania-crm/web-components/Modal';\nimport UploadImage from '@britania-crm/web-components/UploadImage';\nimport useStyles, { ButtonContainer } from './styles';\n\nconst FormFileModal = ({\n  id,\n  open,\n  handleClose,\n  onSave,\n  row,\n  onEdit,\n  mode\n}) => {\n  const classes = useStyles();\n  const t = useT();\n  const formRef = useRef(null);\n  const modeView = useMemo(() => mode === 'view', [mode]);\n  const titleModal = useMemo(() => {\n    switch (mode) {\n      case 'view':\n        return t('view of {this}', {\n          this: t('archive', {\n            howMany: 1\n          })\n        });\n\n      case 'edit':\n        return t('editing {this}', {\n          this: t('archive', {\n            howMany: 1\n          })\n        });\n\n      default:\n        return t('login image new file');\n    }\n  }, [mode, t]);\n  const handleSubmit = useCallback(values => {\n    if (!isEmpty(row)) {\n      onEdit(values);\n    } else {\n      onSave(values);\n    }\n\n    handleClose();\n  }, [handleClose, onEdit, onSave, row]);\n  useFormEffect(() => {\n    if (!isEmpty(row)) {\n      formRef.current.setData({\n        file: row === null || row === void 0 ? void 0 : row.file,\n        description: row === null || row === void 0 ? void 0 : row.description,\n        name: row === null || row === void 0 ? void 0 : row.name,\n        path: row === null || row === void 0 ? void 0 : row.path\n      });\n    }\n  }, [formRef, row]);\n  return /*#__PURE__*/React.createElement(Modal, {\n    id: id,\n    open: open,\n    title: titleModal,\n    maxWidth: \"md\",\n    fullWidth: true,\n    escapeWhenLoading: true,\n    FooterComponent: () => /*#__PURE__*/React.createElement(ButtonContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }\n    }, !modeView && /*#__PURE__*/React.createElement(I18n, {\n      as: Button,\n      color: \"secondary\",\n      variant: \"outlined\",\n      onClick: () => {\n        handleClose();\n        formRef.current.reset();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }\n    }, \"cancel\"), /*#__PURE__*/React.createElement(Button, {\n      color: \"secondary\",\n      variant: \"contained\",\n      onClick: () => modeView ? handleClose() : formRef.current.submit(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }\n    }, modeView ? t('turn back') : t('save'))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    ref: formRef,\n    onSubmit: handleSubmit,\n    schemaConstructor: attachmentsSchema,\n    defaultValues: INITIAL_VALUES,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    item: true,\n    sm: 12,\n    spacing: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    className: classes.upload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(UploadImage, {\n    name: \"file\",\n    hideWhenHasValue: true,\n    types: ['image/png', 'image/jpg', 'image/jpeg', 'application/pdf', 'application/vnd.ms-excel', 'video/mp4', 'text/plain', '.doc', '.docx', 'application/vnd.openxmlformats-officedocument.wordprocessingml.document', '.eml', '.pts', 'message/rfc822', 'message/partial', '.msg', 'msg'],\n    previewStyle: {\n      width: 200,\n      height: 200\n    },\n    clearable: !modeView,\n    preview: true,\n    title: t('add the file'),\n    description: t('the {this} or', {\n      gender: 'male',\n      this: t('archive', {\n        howMany: 3\n      })\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(InputHidden, {\n    name: \"path\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputText, {\n    name: \"description\",\n    label: t('description', {\n      howMany: 1\n    }),\n    disabled: modeView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 13\n    }\n  })))));\n};\n\nFormFileModal.propTypes = {\n  id: PropTypes.string.isRequired,\n  open: PropTypes.bool.isRequired,\n  handleClose: PropTypes.func.isRequired,\n  onSave: PropTypes.func,\n  row: PropTypes.object,\n  onEdit: PropTypes.func,\n  mode: PropTypes.string\n};\nFormFileModal.defaultProps = {\n  onSave() {},\n\n  row: {},\n\n  onEdit() {},\n\n  mode: 'create'\n};\nexport default FormFileModal;","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/vpc/modals/formFileModal/FormFileModal.js"],"names":["React","useRef","useCallback","useMemo","PropTypes","isEmpty","Grid","useFormEffect","attachmentsSchema","INITIAL_VALUES","I18n","useT","Button","Form","InputHidden","InputText","Modal","UploadImage","useStyles","ButtonContainer","FormFileModal","id","open","handleClose","onSave","row","onEdit","mode","classes","t","formRef","modeView","titleModal","this","howMany","handleSubmit","values","current","setData","file","description","name","path","reset","submit","upload","width","height","gender","propTypes","string","isRequired","bool","func","object","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,IACEC,MADF,EAEEC,WAFF,EAGEC,OAHF,QAIO,OAJP;AAMA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,OAAP,MAAoB,gBAApB;AAEA,OAAOC,IAAP,MAAiB,wBAAjB;AAEA,SAASC,aAAT,QAA8B,qBAA9B;AACA,OAAOC,iBAAP,IAA4BC,cAA5B,QAAkD,wDAAlD;AACA,OAAOC,IAAP,IAAeC,IAAf,QAA2B,oBAA3B;AACA,OAAOC,MAAP,MAAmB,qCAAnB;AACA,OAAOC,IAAP,MAAiB,mCAAjB;AACA,OAAOC,WAAP,MAAwB,0CAAxB;AACA,OAAOC,SAAP,MAAsB,wCAAtB;AACA,OAAOC,KAAP,MAAkB,oCAAlB;AACA,OAAOC,WAAP,MAAwB,0CAAxB;AAEA,OAAOC,SAAP,IAAoBC,eAApB,QAA2C,UAA3C;;AAEA,MAAMC,aAAa,GAAG,CAAC;AACrBC,EAAAA,EADqB;AACjBC,EAAAA,IADiB;AACXC,EAAAA,WADW;AACEC,EAAAA,MADF;AACUC,EAAAA,GADV;AACeC,EAAAA,MADf;AACuBC,EAAAA;AADvB,CAAD,KAEhB;AACJ,QAAMC,OAAO,GAAGV,SAAS,EAAzB;AACA,QAAMW,CAAC,GAAGlB,IAAI,EAAd;AACA,QAAMmB,OAAO,GAAG7B,MAAM,CAAC,IAAD,CAAtB;AAEA,QAAM8B,QAAQ,GAAG5B,OAAO,CAAC,MAAMwB,IAAI,KAAK,MAAhB,EAAwB,CAACA,IAAD,CAAxB,CAAxB;AAEA,QAAMK,UAAU,GAAG7B,OAAO,CAAC,MAAM;AAC/B,YAAQwB,IAAR;AACE,WAAK,MAAL;AACE,eAAOE,CAAC,CAAC,gBAAD,EAAmB;AAAEI,UAAAA,IAAI,EAAEJ,CAAC,CAAC,SAAD,EAAY;AAAEK,YAAAA,OAAO,EAAE;AAAX,WAAZ;AAAT,SAAnB,CAAR;;AACF,WAAK,MAAL;AACE,eAAOL,CAAC,CAAC,gBAAD,EAAmB;AAAEI,UAAAA,IAAI,EAAEJ,CAAC,CAAC,SAAD,EAAY;AAAEK,YAAAA,OAAO,EAAE;AAAX,WAAZ;AAAT,SAAnB,CAAR;;AACF;AACE,eAAOL,CAAC,CAAC,sBAAD,CAAR;AANJ;AAQD,GATyB,EASvB,CAACF,IAAD,EAAOE,CAAP,CATuB,CAA1B;AAWA,QAAMM,YAAY,GAAGjC,WAAW,CAC7BkC,MAAD,IAAY;AACV,QAAI,CAAC/B,OAAO,CAACoB,GAAD,CAAZ,EAAmB;AACjBC,MAAAA,MAAM,CAACU,MAAD,CAAN;AACD,KAFD,MAEO;AACLZ,MAAAA,MAAM,CAACY,MAAD,CAAN;AACD;;AACDb,IAAAA,WAAW;AACZ,GAR6B,EAS9B,CAACA,WAAD,EAAcG,MAAd,EAAsBF,MAAtB,EAA8BC,GAA9B,CAT8B,CAAhC;AAYAlB,EAAAA,aAAa,CAAC,MAAM;AAClB,QAAI,CAACF,OAAO,CAACoB,GAAD,CAAZ,EAAmB;AACjBK,MAAAA,OAAO,CAACO,OAAR,CAAgBC,OAAhB,CAAwB;AACtBC,QAAAA,IAAI,EAAEd,GAAF,aAAEA,GAAF,uBAAEA,GAAG,CAAEc,IADW;AAEtBC,QAAAA,WAAW,EAAEf,GAAF,aAAEA,GAAF,uBAAEA,GAAG,CAAEe,WAFI;AAGtBC,QAAAA,IAAI,EAAEhB,GAAF,aAAEA,GAAF,uBAAEA,GAAG,CAAEgB,IAHW;AAItBC,QAAAA,IAAI,EAAEjB,GAAF,aAAEA,GAAF,uBAAEA,GAAG,CAAEiB;AAJW,OAAxB;AAMD;AACF,GATY,EASV,CAACZ,OAAD,EAAUL,GAAV,CATU,CAAb;AAWA,sBACE,oBAAC,KAAD;AACE,IAAA,EAAE,EAAGJ,EADP;AAEE,IAAA,IAAI,EAAGC,IAFT;AAGE,IAAA,KAAK,EAAGU,UAHV;AAIE,IAAA,QAAQ,EAAC,IAJX;AAKE,IAAA,SAAS,MALX;AAME,IAAA,iBAAiB,MANnB;AAOE,IAAA,eAAe,EAAG,mBAChB,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,CAACD,QAAD,iBACC,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAGnB,MAAX;AACE,MAAA,KAAK,EAAC,WADR;AAEE,MAAA,OAAO,EAAC,UAFV;AAGE,MAAA,OAAO,EAAG,MAAM;AACdW,QAAAA,WAAW;AACXO,QAAAA,OAAO,CAACO,OAAR,CAAgBM,KAAhB;AACD,OANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAaE,oBAAC,MAAD;AACE,MAAA,KAAK,EAAC,WADR;AAEE,MAAA,OAAO,EAAC,WAFV;AAGE,MAAA,OAAO,EAAG,MAAMZ,QAAQ,GAAGR,WAAW,EAAd,GAAmBO,OAAO,CAACO,OAAR,CAAgBO,MAAhB,EAH7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAKIb,QAAQ,GAAGF,CAAC,CAAC,WAAD,CAAJ,GAAoBA,CAAC,CAAC,MAAD,CALjC,CAbF,CARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBA+BE,oBAAC,IAAD;AACE,IAAA,GAAG,EAAGC,OADR;AAEE,IAAA,QAAQ,EAAGK,YAFb;AAGE,IAAA,iBAAiB,EAAG3B,iBAHtB;AAIE,IAAA,aAAa,EAAGC,cAJlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME,oBAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,IAAI,MAApB;AAAqB,IAAA,EAAE,EAAG,EAA1B;AAA+B,IAAA,OAAO,EAAG,CAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAG,EAAhB;AAAqB,IAAA,SAAS,EAAGmB,OAAO,CAACiB,MAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,gBAAgB,MAFlB;AAGE,IAAA,KAAK,EAAG,CACN,WADM,EAEN,WAFM,EAGN,YAHM,EAIN,iBAJM,EAKN,0BALM,EAMN,WANM,EAON,YAPM,EAQN,MARM,EAQE,OARF,EASN,yEATM,EAUN,MAVM,EAUE,MAVF,EAUU,gBAVV,EAU4B,iBAV5B,EAU+C,MAV/C,EAUuD,KAVvD,CAHV;AAeE,IAAA,YAAY,EAAG;AAAEC,MAAAA,KAAK,EAAE,GAAT;AAAcC,MAAAA,MAAM,EAAE;AAAtB,KAfjB;AAgBE,IAAA,SAAS,EAAG,CAAChB,QAhBf;AAiBE,IAAA,OAAO,MAjBT;AAkBE,IAAA,KAAK,EAAGF,CAAC,CAAC,cAAD,CAlBX;AAmBE,IAAA,WAAW,EAAGA,CAAC,CAAC,eAAD,EAAkB;AAAEmB,MAAAA,MAAM,EAAE,MAAV;AAAkBf,MAAAA,IAAI,EAAEJ,CAAC,CAAC,SAAD,EAAY;AAAEK,QAAAA,OAAO,EAAE;AAAX,OAAZ;AAAzB,KAAlB,CAnBjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAsBE,oBAAC,WAAD;AAAa,IAAA,IAAI,EAAC,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAtBF,CADF,eAyBE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAG,EAAhB;AAAqB,IAAA,EAAE,EAAG,EAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AACE,IAAA,IAAI,EAAC,aADP;AAEE,IAAA,KAAK,EAAGL,CAAC,CAAC,aAAD,EAAgB;AAAEK,MAAAA,OAAO,EAAE;AAAX,KAAhB,CAFX;AAGE,IAAA,QAAQ,EAAGH,QAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAzBF,CANF,CA/BF,CADF;AA0ED,CArHD;;AAuHAX,aAAa,CAAC6B,SAAd,GAA0B;AACxB5B,EAAAA,EAAE,EAAEjB,SAAS,CAAC8C,MAAV,CAAiBC,UADG;AAExB7B,EAAAA,IAAI,EAAElB,SAAS,CAACgD,IAAV,CAAeD,UAFG;AAGxB5B,EAAAA,WAAW,EAAEnB,SAAS,CAACiD,IAAV,CAAeF,UAHJ;AAIxB3B,EAAAA,MAAM,EAAEpB,SAAS,CAACiD,IAJM;AAKxB5B,EAAAA,GAAG,EAAErB,SAAS,CAACkD,MALS;AAMxB5B,EAAAA,MAAM,EAAEtB,SAAS,CAACiD,IANM;AAOxB1B,EAAAA,IAAI,EAAEvB,SAAS,CAAC8C;AAPQ,CAA1B;AAUA9B,aAAa,CAACmC,YAAd,GAA6B;AAC3B/B,EAAAA,MAAM,GAAI,CAAE,CADe;;AAE3BC,EAAAA,GAAG,EAAE,EAFsB;;AAG3BC,EAAAA,MAAM,GAAI,CAAE,CAHe;;AAI3BC,EAAAA,IAAI,EAAE;AAJqB,CAA7B;AAOA,eAAeP,aAAf","sourcesContent":["import React, {\n  useRef,\n  useCallback,\n  useMemo\n} from 'react'\n\nimport PropTypes from 'prop-types'\n\nimport isEmpty from 'lodash/isEmpty'\n\nimport Grid from '@material-ui/core/Grid'\n\nimport { useFormEffect } from '@britania-crm/forms'\nimport attachmentsSchema, { INITIAL_VALUES } from '@britania-crm/forms/schemas/vpc/vpc.attachments.schema'\nimport I18n, { useT } from '@britania-crm/i18n'\nimport Button from '@britania-crm/web-components/Button'\nimport Form from '@britania-crm/web-components/Form'\nimport InputHidden from '@britania-crm/web-components/InputHidden'\nimport InputText from '@britania-crm/web-components/InputText'\nimport Modal from '@britania-crm/web-components/Modal'\nimport UploadImage from '@britania-crm/web-components/UploadImage'\n\nimport useStyles, { ButtonContainer } from './styles'\n\nconst FormFileModal = ({\n  id, open, handleClose, onSave, row, onEdit, mode\n}) => {\n  const classes = useStyles()\n  const t = useT()\n  const formRef = useRef(null)\n\n  const modeView = useMemo(() => mode === 'view', [mode])\n\n  const titleModal = useMemo(() => {\n    switch (mode) {\n      case 'view':\n        return t('view of {this}', { this: t('archive', { howMany: 1 }) })\n      case 'edit':\n        return t('editing {this}', { this: t('archive', { howMany: 1 }) })\n      default:\n        return t('login image new file')\n    }\n  }, [mode, t])\n\n  const handleSubmit = useCallback(\n    (values) => {\n      if (!isEmpty(row)) {\n        onEdit(values)\n      } else {\n        onSave(values)\n      }\n      handleClose()\n    },\n    [handleClose, onEdit, onSave, row]\n  )\n\n  useFormEffect(() => {\n    if (!isEmpty(row)) {\n      formRef.current.setData({\n        file: row?.file,\n        description: row?.description,\n        name: row?.name,\n        path: row?.path\n      })\n    }\n  }, [formRef, row])\n\n  return (\n    <Modal\n      id={ id }\n      open={ open }\n      title={ titleModal }\n      maxWidth=\"md\"\n      fullWidth\n      escapeWhenLoading\n      FooterComponent={ () => (\n        <ButtonContainer>\n          {!modeView && (\n            <I18n as={ Button }\n              color=\"secondary\"\n              variant=\"outlined\"\n              onClick={ () => {\n                handleClose()\n                formRef.current.reset()\n              } }\n            >\n              cancel\n            </I18n>\n          )}\n          <Button\n            color=\"secondary\"\n            variant=\"contained\"\n            onClick={ () => modeView ? handleClose() : formRef.current.submit() }\n          >\n            { modeView ? t('turn back') : t('save')}\n          </Button>\n        </ButtonContainer>\n      ) }\n    >\n      <Form\n        ref={ formRef }\n        onSubmit={ handleSubmit }\n        schemaConstructor={ attachmentsSchema }\n        defaultValues={ INITIAL_VALUES }\n      >\n        <Grid container item sm={ 12 } spacing={ 1 } >\n          <Grid item sm={ 12 } className={ classes.upload }>\n            <UploadImage\n              name=\"file\"\n              hideWhenHasValue\n              types={ [\n                'image/png',\n                'image/jpg',\n                'image/jpeg',\n                'application/pdf',\n                'application/vnd.ms-excel',\n                'video/mp4',\n                'text/plain',\n                '.doc', '.docx',\n                'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n                '.eml', '.pts', 'message/rfc822', 'message/partial', '.msg', 'msg'\n              ] }\n              previewStyle={ { width: 200, height: 200 } }\n              clearable={ !modeView }\n              preview\n              title={ t('add the file') }\n              description={ t('the {this} or', { gender: 'male', this: t('archive', { howMany: 3 }) }) }\n            />\n            <InputHidden name=\"path\" />\n          </Grid>\n          <Grid item sm={ 12 } md={ 12 }>\n            <InputText\n              name=\"description\"\n              label={ t('description', { howMany: 1 }) }\n              disabled={ modeView }\n            />\n          </Grid>\n        </Grid>\n      </Form>\n    </Modal>\n  )\n}\n\nFormFileModal.propTypes = {\n  id: PropTypes.string.isRequired,\n  open: PropTypes.bool.isRequired,\n  handleClose: PropTypes.func.isRequired,\n  onSave: PropTypes.func,\n  row: PropTypes.object,\n  onEdit: PropTypes.func,\n  mode: PropTypes.string\n}\n\nFormFileModal.defaultProps = {\n  onSave () {},\n  row: {},\n  onEdit () {},\n  mode: 'create'\n}\n\nexport default FormFileModal\n"]},"metadata":{},"sourceType":"module"}