{"ast":null,"code":"import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { createLogger } from 'redux-logger';\nimport { offlineMiddleware, suspendSaga, consumeActionMiddleware } from 'redux-offline-queue';\nimport { persistStore } from 'redux-persist';\nimport createSagaMiddleware, { END } from 'redux-saga';\nimport { MSG021 } from '@britania-crm/constants/feedbackMessages.constants';\nimport crmApi from '@britania-crm/services/apis/crmApi';\nimport { AppActions } from '@britania-crm/stores/app';\nimport { AuthActions } from '@britania-crm/stores/auth';\nimport reducers from './reducers';\nimport sagas from './sagas';\nconst middlewares = [];\n\nif (process.env.REACT_APP_AMBIENTE === 'development') {\n  middlewares.push(createLogger({}));\n}\n\nconst sagaMiddleware = createSagaMiddleware();\nmiddlewares.push(offlineMiddleware({\n  stateName: 'network'\n}));\nmiddlewares.push(suspendSaga(sagaMiddleware));\nmiddlewares.push(consumeActionMiddleware());\nconst store = createStore(reducers, composeWithDevTools(applyMiddleware(...middlewares)));\n\nstore.close = () => store.dispatch(END);\n\nstore.persist = () => persistStore(store);\n\nstore.runSagas = sagaMiddleware.run;\nstore.runSagas(sagas);\n/*\n  Add header Authorization when store contains accessToken\n  or remove when it not contains accessToken\n*/\n\nstore.subscribe(() => {\n  const {\n    accessToken\n  } = store.getState().auth;\n\n  if (accessToken) {\n    crmApi.defaults.headers.common.Authorization = `Bearer ${accessToken}`;\n  } else {\n    const {\n      Authorization,\n      ...common\n    } = crmApi.defaults.headers.common || {};\n    crmApi.defaults.headers.common = common;\n  }\n});\ncrmApi.interceptors.response.use(response => response, error => {\n  const {\n    response = {}\n  } = error || {};\n  const {\n    status\n  } = response;\n\n  if (status === 401) {\n    const {\n      accessToken\n    } = store.getState().auth;\n\n    if (accessToken) {\n      store.dispatch(AuthActions.logout());\n\n      if (status === 401) {\n        store.dispatch(AppActions.addAlert({\n          type: 'warning',\n          message: MSG021\n        }));\n      } else {\n        store.dispatch(AppActions.addAlert({\n          type: 'warning',\n          message: 'Você não tem permissão para acessar essa área do sistema. Faça login novamente.'\n        }));\n      }\n    }\n  }\n\n  return Promise.reject(status === 403 || status === 401 ? { ...error,\n    message: MSG021\n  } : error);\n});\nexport default store;","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/src/store/store.js"],"names":["createStore","applyMiddleware","composeWithDevTools","createLogger","offlineMiddleware","suspendSaga","consumeActionMiddleware","persistStore","createSagaMiddleware","END","MSG021","crmApi","AppActions","AuthActions","reducers","sagas","middlewares","process","env","REACT_APP_AMBIENTE","push","sagaMiddleware","stateName","store","close","dispatch","persist","runSagas","run","subscribe","accessToken","getState","auth","defaults","headers","common","Authorization","interceptors","response","use","error","status","logout","addAlert","type","message","Promise","reject"],"mappings":"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","sourcesContent":["import {\n  createStore,\n  applyMiddleware\n} from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport { createLogger } from 'redux-logger'\nimport {\n  offlineMiddleware,\n  suspendSaga,\n  consumeActionMiddleware\n} from 'redux-offline-queue'\nimport { persistStore } from 'redux-persist'\nimport createSagaMiddleware, { END } from 'redux-saga'\n\nimport { MSG021 } from '@britania-crm/constants/feedbackMessages.constants'\nimport crmApi from '@britania-crm/services/apis/crmApi'\nimport { AppActions } from '@britania-crm/stores/app'\nimport { AuthActions } from '@britania-crm/stores/auth'\n\nimport reducers from './reducers'\nimport sagas from './sagas'\n\nconst middlewares = []\n\nif (process.env.REACT_APP_AMBIENTE === 'development') {\n  middlewares.push(createLogger({}))\n}\n\nconst sagaMiddleware = createSagaMiddleware()\n\nmiddlewares.push(offlineMiddleware({ stateName: 'network' }))\nmiddlewares.push(suspendSaga(sagaMiddleware))\nmiddlewares.push(consumeActionMiddleware())\n\nconst store = createStore(\n  reducers,\n  composeWithDevTools(applyMiddleware(...middlewares))\n)\n\nstore.close = () => store.dispatch(END)\nstore.persist = () => persistStore(store)\nstore.runSagas = sagaMiddleware.run\nstore.runSagas(sagas)\n\n/*\n  Add header Authorization when store contains accessToken\n  or remove when it not contains accessToken\n*/\nstore.subscribe(() => {\n  const { accessToken } = store.getState().auth\n\n  if (accessToken) {\n    crmApi.defaults.headers.common.Authorization = `Bearer ${ accessToken }`\n  } else {\n    const { Authorization, ...common } = crmApi.defaults.headers.common || {}\n    crmApi.defaults.headers.common = common\n  }\n})\n\ncrmApi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    const { response = {} } = error || {}\n\n    const { status } = response\n\n    if (status === 401) {\n      const { accessToken } = store.getState().auth\n      if (accessToken) {\n        store.dispatch(AuthActions.logout())\n\n        if (status === 401) {\n          store.dispatch(AppActions.addAlert({ type: 'warning', message: MSG021 }))\n        } else {\n          store.dispatch(AppActions.addAlert({ type: 'warning', message: 'Você não tem permissão para acessar essa área do sistema. Faça login novamente.' }))\n        }\n      }\n    }\n\n    return Promise.reject(\n      (status === 403 || status === 401)\n        ? {\n          ...error,\n          message: MSG021\n        }\n        : error\n    )\n  }\n)\n\nexport default store\n"]},"metadata":{},"sourceType":"module"}