{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/customers/modals/NewRevenueModal/NewRevenueModal.js\";\nimport React, { useCallback, useRef, useMemo } from 'react';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport isEmpty from 'lodash/isEmpty';\nimport map from 'lodash/map';\nimport Grid from '@material-ui/core/Grid';\nimport { useFormEffect } from '@britania-crm/forms';\nimport revenueSchema, { INITIAL_VALUES } from '@britania-crm/forms/schemas/customer/customerPreRegistration.revenue.schema';\nimport I18n, { useT } from '@britania-crm/i18n';\nimport Button from '@britania-crm/web-components/Button';\nimport Form from '@britania-crm/web-components/Form';\nimport InputMoney from '@britania-crm/web-components/InputMoney';\nimport InputNumber from '@britania-crm/web-components/InputNumber';\nimport InputSelect from '@britania-crm/web-components/InputSelect';\nimport Modal from '@britania-crm/web-components/Modal';\n\nconst NewRevenueModal = props => {\n  const {\n    id,\n    open,\n    handleClose,\n    onSubmit,\n    revenue\n  } = props;\n  const t = useT();\n  const formRef = useRef(null);\n  const monthOptions = useMemo(() => map(Array(12), (_, i) => ({\n    id: i + 1,\n    name: moment(i + 1, 'M').format('MMMM')\n  })), []);\n  const handleSubmit = useCallback(values => {\n    onSubmit({ ...values,\n      year: Number(values.year),\n      value: Number(values.value)\n    });\n    handleClose();\n  }, [handleClose, onSubmit]);\n  useFormEffect(() => {\n    if (!isEmpty(revenue)) {\n      formRef.current.setData(revenue);\n    }\n  }, [revenue]);\n  return /*#__PURE__*/React.createElement(Modal, {\n    id: id,\n    open: open,\n    maxWidth: \"md\",\n    title: t('revenue', {\n      howMany: 1\n    }),\n    variant: \"space\",\n    fullWidth: true,\n    FooterComponent: () => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(I18n, {\n      as: Button,\n      onClick: handleClose,\n      color: \"secondary\",\n      variant: \"outlined\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 11\n      }\n    }, \"cancel\"), /*#__PURE__*/React.createElement(I18n, {\n      as: Button,\n      onClick: () => formRef.current.submit(),\n      color: \"secondary\",\n      style: {\n        marginLeft: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 11\n      }\n    }, \"save\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    ref: formRef,\n    schemaConstructor: revenueSchema,\n    defaultValues: INITIAL_VALUES,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputSelect, {\n    name: \"month\",\n    label: t('month'),\n    options: monthOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 5,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputNumber, {\n    name: \"year\",\n    label: t('year'),\n    maxLength: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputMoney, {\n    name: \"value\",\n    label: t('value'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 13\n    }\n  })))));\n};\n\nNewRevenueModal.propTypes = {\n  id: PropTypes.string.isRequired,\n  open: PropTypes.bool.isRequired,\n  handleClose: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  revenue: PropTypes.object\n};\nNewRevenueModal.defaultProps = {\n  revenue: {}\n};\nexport default NewRevenueModal;","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/customers/modals/NewRevenueModal/NewRevenueModal.js"],"names":["React","useCallback","useRef","useMemo","moment","PropTypes","isEmpty","map","Grid","useFormEffect","revenueSchema","INITIAL_VALUES","I18n","useT","Button","Form","InputMoney","InputNumber","InputSelect","Modal","NewRevenueModal","props","id","open","handleClose","onSubmit","revenue","t","formRef","monthOptions","Array","_","i","name","format","handleSubmit","values","year","Number","value","current","setData","howMany","submit","marginLeft","propTypes","string","isRequired","bool","func","object","defaultProps"],"mappings":"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","sourcesContent":["import React, {\n  useCallback,\n  useRef,\n  useMemo\n} from 'react'\n\nimport moment from 'moment'\nimport PropTypes from 'prop-types'\n\nimport isEmpty from 'lodash/isEmpty'\nimport map from 'lodash/map'\n\nimport Grid from '@material-ui/core/Grid'\n\nimport { useFormEffect } from '@britania-crm/forms'\nimport revenueSchema, { INITIAL_VALUES } from '@britania-crm/forms/schemas/customer/customerPreRegistration.revenue.schema'\nimport I18n, { useT } from '@britania-crm/i18n'\nimport Button from '@britania-crm/web-components/Button'\nimport Form from '@britania-crm/web-components/Form'\nimport InputMoney from '@britania-crm/web-components/InputMoney'\nimport InputNumber from '@britania-crm/web-components/InputNumber'\nimport InputSelect from '@britania-crm/web-components/InputSelect'\nimport Modal from '@britania-crm/web-components/Modal'\n\nconst NewRevenueModal = (props) => {\n  const {\n    id,\n    open,\n    handleClose,\n    onSubmit,\n    revenue\n  } = props\n\n  const t = useT()\n  const formRef = useRef(null)\n\n  const monthOptions = useMemo(\n    () => map(Array(12), (_, i) => ({\n      id: i + 1,\n      name: moment(i + 1, 'M').format('MMMM')\n    })),\n    []\n  )\n\n  const handleSubmit = useCallback(\n    (values) => {\n      onSubmit({\n        ...values,\n        year: Number(values.year),\n        value: Number(values.value)\n      })\n      handleClose()\n    },\n    [handleClose, onSubmit]\n  )\n\n  useFormEffect(\n    () => {\n      if (!isEmpty(revenue)) {\n        formRef.current.setData(revenue)\n      }\n    },\n    [revenue]\n  )\n\n  return (\n    <Modal\n      id={ id }\n      open={ open }\n      maxWidth=\"md\"\n      title={ t('revenue', { howMany: 1 }) }\n      variant=\"space\"\n      fullWidth\n      FooterComponent={ () => (\n        <>\n          <I18n as={ Button }\n            onClick={ handleClose }\n            color=\"secondary\"\n            variant=\"outlined\"\n          >\n            cancel\n          </I18n>\n          <I18n as={ Button }\n            onClick={ () => formRef.current.submit() }\n            color=\"secondary\"\n            style={ { marginLeft: 10 } }\n          >\n            save\n          </I18n>\n        </>\n      ) }\n    >\n      <Form\n        ref={ formRef }\n        schemaConstructor={ revenueSchema }\n        defaultValues={ INITIAL_VALUES }\n        onSubmit={ handleSubmit }\n      >\n        <Grid container spacing={ 1 }>\n          <Grid item xs={ 12 } md={ 3 }>\n            <InputSelect\n              name=\"month\"\n              label={ t('month') }\n              options={ monthOptions }\n            />\n          </Grid>\n          <Grid item xs={ 12 } md={ 5 }>\n            <InputNumber\n              name=\"year\"\n              label={ t('year') }\n              maxLength={ 4 }\n            />\n          </Grid>\n          <Grid item xs={ 12 } md={ 4 }>\n            <InputMoney\n              name=\"value\"\n              label={ t('value') }\n            />\n          </Grid>\n        </Grid>\n      </Form>\n    </Modal>\n  )\n}\n\nNewRevenueModal.propTypes = {\n  id: PropTypes.string.isRequired,\n  open: PropTypes.bool.isRequired,\n  handleClose: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  revenue: PropTypes.object\n}\n\nNewRevenueModal.defaultProps = { revenue: {} }\n\nexport default NewRevenueModal\n"]},"metadata":{},"sourceType":"module"}