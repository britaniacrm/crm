{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/components/TreeView/ResponseAndConditionCards/ConditionCard/ConditionCard.js\";\nimport React, { useCallback, useState, useMemo, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport find from 'lodash/find';\nimport isEmpty from 'lodash/isEmpty';\nimport isNil from 'lodash/isNil';\nimport Grid from '@material-ui/core/Grid';\nimport { useT } from '@britania-crm/i18n';\nimport { getAllAccesses } from '@britania-crm/stores/access/access.selectors';\nimport { FieldActions } from '@britania-crm/stores/field';\nimport InputSelect from '@britania-crm/web-components/InputSelect';\nimport InputText from '@britania-crm/web-components/InputText';\nimport DeleteButton from '../DeleteButton';\nimport { Container } from '../styles';\nimport { conditions } from '../utils';\n\nconst ConditionCard = ({\n  onPropChange,\n  treeIndex,\n  readOnly,\n  items,\n  deleteNode\n}) => {\n  const [fields, setFields] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const t = useT();\n  const currentNodeState = useMemo(() => items[treeIndex], [items, treeIndex]);\n  const dispatch = useCallback(useDispatch(), []);\n  const accesses = useSelector(getAllAccesses);\n  useEffect(() => {\n    if (currentNodeState.accessId) {\n      setLoading(true);\n      dispatch(FieldActions.getFields(currentNodeState.accessId, setFields, setLoading));\n    }\n  }, [currentNodeState.accessId, dispatch, onPropChange, treeIndex]);\n  useEffect(() => {\n    if (currentNodeState.fieldId) {\n      const eventMock = {\n        target: {\n          value: currentNodeState.fieldId\n        }\n      };\n      onPropChange('fieldId', treeIndex)(eventMock);\n    }\n  }, [fields, currentNodeState.fieldId, onPropChange, treeIndex]);\n\n  const setAccess = ({\n    target: {\n      value\n    }\n  }) => {\n    const item = find(accesses, access => access.id === value);\n    onPropChange('access', treeIndex)({\n      name: item === null || item === void 0 ? void 0 : item.name,\n      id: value\n    });\n    onPropChange('accessId', treeIndex)(value);\n  };\n\n  const setField = ({\n    target: {\n      value\n    }\n  }) => {\n    const item = find(fields, field => field.id === value);\n    onPropChange('field', treeIndex)({\n      name: item === null || item === void 0 ? void 0 : item.name,\n      id: value\n    });\n    onPropChange('fieldId', treeIndex)(value);\n  };\n\n  return /*#__PURE__*/React.createElement(Container, {\n    style: {\n      marginTop: 5\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InputText, {\n    detached: true,\n    onChange: onPropChange('title', treeIndex),\n    name: \"title\",\n    label: t('conditional name'),\n    value: currentNodeState.title,\n    required: true,\n    variant: \"outlined\",\n    readOnly: readOnly,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    md: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InputSelect, {\n    detached: true,\n    margin: \"none\",\n    id: \"access\",\n    name: \"access\",\n    label: t('form'),\n    onChange: setAccess,\n    value: currentNodeState.accessId || '',\n    disabled: readOnly,\n    options: accesses,\n    required: true,\n    valueKey: \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    md: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InputSelect, {\n    detached: true // margin=\"none\"\n    ,\n    id: \"field\",\n    name: \"field\",\n    label: t('field', {\n      howMany: 1\n    }),\n    onChange: setField,\n    value: currentNodeState.fieldId || '',\n    disabled: readOnly || isNil(currentNodeState.accessId) || isEmpty(fields),\n    options: fields,\n    required: true,\n    loading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    md: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InputSelect, {\n    detached: true,\n    disabled: readOnly,\n    value: currentNodeState.comparisonSymbol || '',\n    onChange: onPropChange('comparisonSymbol', treeIndex),\n    name: \"condition\",\n    label: t('condition'),\n    id: \"condition\",\n    required: true,\n    options: conditions,\n    idKey: \"symbol\",\n    valueKey: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    md: 3,\n    style: {\n      display: 'flex',\n      alignItems: 'center'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(InputText, {\n    detached: true,\n    readOnly: readOnly,\n    onChange: onPropChange('comparisonValue', treeIndex),\n    name: \"comparisonValue\",\n    label: t('value'),\n    value: currentNodeState.comparisonValue,\n    required: true,\n    variant: \"outlined\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }), !readOnly && /*#__PURE__*/React.createElement(DeleteButton, {\n    node: currentNodeState,\n    onDelete: deleteNode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }\n  }))));\n};\n\nConditionCard.propTypes = {\n  onPropChange: PropTypes.func.isRequired,\n  treeIndex: PropTypes.number.isRequired,\n  readOnly: PropTypes.bool.isRequired,\n  items: PropTypes.array.isRequired,\n  deleteNode: PropTypes.func.isRequired\n};\nexport default ConditionCard;","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/components/TreeView/ResponseAndConditionCards/ConditionCard/ConditionCard.js"],"names":["React","useCallback","useState","useMemo","useEffect","useSelector","useDispatch","PropTypes","find","isEmpty","isNil","Grid","useT","getAllAccesses","FieldActions","InputSelect","InputText","DeleteButton","Container","conditions","ConditionCard","onPropChange","treeIndex","readOnly","items","deleteNode","fields","setFields","loading","setLoading","t","currentNodeState","dispatch","accesses","accessId","getFields","fieldId","eventMock","target","value","setAccess","item","access","id","name","setField","field","marginTop","title","howMany","comparisonSymbol","display","alignItems","comparisonValue","propTypes","func","isRequired","number","bool","array"],"mappings":"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","sourcesContent":["import React, {\n  useCallback,\n  useState,\n  useMemo,\n  useEffect\n} from 'react'\nimport {\n  useSelector,\n  useDispatch\n} from 'react-redux'\n\nimport PropTypes from 'prop-types'\n\nimport find from 'lodash/find'\nimport isEmpty from 'lodash/isEmpty'\nimport isNil from 'lodash/isNil'\n\nimport Grid from '@material-ui/core/Grid'\n\nimport { useT } from '@britania-crm/i18n'\nimport { getAllAccesses } from '@britania-crm/stores/access/access.selectors'\nimport { FieldActions } from '@britania-crm/stores/field'\nimport InputSelect from '@britania-crm/web-components/InputSelect'\nimport InputText from '@britania-crm/web-components/InputText'\n\nimport DeleteButton from '../DeleteButton'\nimport { Container } from '../styles'\nimport { conditions } from '../utils'\n\nconst ConditionCard = ({\n  onPropChange, treeIndex, readOnly, items, deleteNode\n}) => {\n  const [fields, setFields] = useState([])\n  const [loading, setLoading] = useState(false)\n  const t = useT()\n\n  const currentNodeState = useMemo(() => items[treeIndex], [items, treeIndex])\n\n  const dispatch = useCallback(useDispatch(), [])\n\n  const accesses = useSelector(getAllAccesses)\n\n  useEffect(() => {\n    if (currentNodeState.accessId) {\n      setLoading(true)\n      dispatch(FieldActions.getFields(currentNodeState.accessId, setFields, setLoading))\n    }\n  }, [currentNodeState.accessId, dispatch, onPropChange, treeIndex])\n\n  useEffect(() => {\n    if (currentNodeState.fieldId) {\n      const eventMock = { target: { value: currentNodeState.fieldId } }\n\n      onPropChange('fieldId', treeIndex)(eventMock)\n    }\n  }, [fields, currentNodeState.fieldId, onPropChange, treeIndex])\n\n  const setAccess = ({ target: { value } }) => {\n    const item = find(accesses, (access) => access.id === value)\n\n    onPropChange('access', treeIndex)({ name: item?.name, id: value })\n    onPropChange('accessId', treeIndex)(value)\n  }\n\n  const setField = ({ target: { value } }) => {\n    const item = find(fields, (field) => field.id === value)\n\n    onPropChange('field', treeIndex)({ name: item?.name, id: value })\n    onPropChange('fieldId', treeIndex)(value)\n  }\n\n  return (\n    <Container style={ { marginTop: 5 } }>\n      <Grid container spacing={ 1 }>\n        <Grid item sm={ 12 } md={ 3 }>\n          <InputText\n            detached\n            onChange={ onPropChange('title', treeIndex) }\n            name=\"title\"\n            label={ t('conditional name') }\n            value={ currentNodeState.title }\n            required\n            variant=\"outlined\"\n            readOnly={ readOnly }\n          />\n        </Grid>\n\n        <Grid item sm={ 12 } md={ 2 }>\n          <InputSelect\n            detached\n            margin=\"none\"\n            id=\"access\"\n            name=\"access\"\n            label={ t('form') }\n            onChange={ setAccess }\n            value={ currentNodeState.accessId || '' }\n            disabled={ readOnly }\n            options={ accesses }\n            required\n            valueKey=\"description\"\n          />\n        </Grid>\n\n        <Grid item sm={ 12 } md={ 2 }>\n          <InputSelect\n            detached\n            // margin=\"none\"\n            id=\"field\"\n            name=\"field\"\n            label={ t('field', { howMany: 1 }) }\n            onChange={ setField }\n            value={ currentNodeState.fieldId || '' }\n            disabled={ readOnly || isNil(currentNodeState.accessId) || isEmpty(fields) }\n            options={ fields }\n            required\n            loading={ loading }\n          />\n        </Grid>\n\n        <Grid item sm={ 12 } md={ 2 }>\n          <InputSelect\n            detached\n            disabled={ readOnly }\n            value={ currentNodeState.comparisonSymbol || '' }\n            onChange={ onPropChange('comparisonSymbol', treeIndex) }\n            name=\"condition\"\n            label={ t('condition') }\n            id=\"condition\"\n            required={ true }\n            options={ conditions }\n            idKey=\"symbol\"\n            valueKey=\"name\"\n          />\n        </Grid>\n\n        <Grid item sm={ 12 } md={ 3 } style={ { display: 'flex', alignItems: 'center' } }>\n          <InputText\n            detached\n            readOnly={ readOnly }\n            onChange={ onPropChange('comparisonValue', treeIndex) }\n            name=\"comparisonValue\"\n            label={ t('value') }\n            value={ currentNodeState.comparisonValue }\n            required\n            variant=\"outlined\"\n          />\n          {!readOnly && (\n            <DeleteButton\n              node={ currentNodeState }\n              onDelete={ deleteNode }\n            />\n          )}\n        </Grid>\n\n      </Grid>\n    </Container>\n  )\n}\n\nConditionCard.propTypes = {\n  onPropChange: PropTypes.func.isRequired,\n  treeIndex: PropTypes.number.isRequired,\n  readOnly: PropTypes.bool.isRequired,\n  items: PropTypes.array.isRequired,\n  deleteNode: PropTypes.func.isRequired\n}\n\nexport default ConditionCard\n"]},"metadata":{},"sourceType":"module"}