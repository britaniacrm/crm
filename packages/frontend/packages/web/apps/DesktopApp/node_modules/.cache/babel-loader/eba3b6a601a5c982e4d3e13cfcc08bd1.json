{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/components/RichTextEditor/RichTextEditorStyled.js\";\nimport React, { useMemo, useCallback, forwardRef } from 'react';\nimport { renderToString } from 'react-dom/server';\nimport { Quill } from 'react-quill';\nimport PropTypes from 'prop-types';\nimport Box from '@material-ui/core/Box';\nimport FormHelperText from '@material-ui/core/FormHelperText';\nimport InfoIcon from '@material-ui/icons/Info';\nimport { colors } from '@britania-crm/styles';\nimport { StyledRichTextEditor, StyledAttachFile } from './styles';\n/**\n * Add attach icon\n */\n\nconst icons = Quill.import('ui/icons');\nicons.attach = renderToString( /*#__PURE__*/React.createElement(StyledAttachFile, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 31\n  }\n}));\nconst RichTextEditorStyled = forwardRef(({\n  error,\n  onChange,\n  getFiles,\n  required,\n  label: externalLabel,\n  ...props\n}, fieldRef) => {\n  const handleAttach = useCallback(() => {\n    if (getFiles) {\n      const input = document.createElement('input');\n      const fileExtensions = '.jpg,.xls, .xlsx, .pdf';\n      input.setAttribute('type', 'file');\n      input.setAttribute('accept', fileExtensions); // input.setAttribute('multiple', '')\n\n      input.click();\n\n      input.onchange = () => {\n        getFiles(input.files);\n      };\n    }\n  }, [getFiles]);\n  const label = useMemo(() => `${externalLabel}${required ? ' *' : ''}`, [externalLabel, required]);\n  const modules = useMemo(() => ({\n    toolbar: {\n      container: [[{\n        color: []\n      }], [{\n        align: []\n      }], [{\n        header: [1, 2, 3, 4, 5, 6, false]\n      }], ['bold', 'underline', 'strike', {\n        script: 'sub'\n      }, {\n        script: 'super'\n      }], [{\n        list: 'bullet'\n      }, {\n        list: 'ordered'\n      }], ['link', getFiles ? 'attach' : undefined]],\n      handlers: {\n        attach: handleAttach\n      }\n    },\n    clipboard: {\n      matchVisual: true\n    }\n  }), [getFiles, handleAttach]);\n  const handleChange = useCallback(text => {\n    const convertTextToEmpty = text === '<p><br></p>' ? '' : text;\n    onChange(convertTextToEmpty);\n  }, [onChange]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(StyledRichTextEditor, Object.assign({}, props, {\n    placeholder: label,\n    required: required,\n    forwardedRef: fieldRef,\n    modules: modules,\n    onChange: handleChange,\n    theme: \"snow\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginLeft: 10,\n      marginBottom: 10\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }\n  }, !!error && /*#__PURE__*/React.createElement(FormHelperText, {\n    error: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Box, {\n    style: {\n      color: colors.error.main\n    },\n    component: \"span\",\n    display: \"flex\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InfoIcon, {\n    fontSize: \"small\",\n    style: {\n      marginRight: '8px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 15\n    }\n  }), ' ', error))));\n});\nRichTextEditorStyled.propTypes = {\n  error: PropTypes.string,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  getFiles: PropTypes.func,\n  required: PropTypes.bool,\n  label: PropTypes.string\n};\nRichTextEditorStyled.defaultProps = {\n  label: null,\n  error: undefined,\n  getFiles: undefined,\n  required: false\n};\nexport default RichTextEditorStyled;","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/components/RichTextEditor/RichTextEditorStyled.js"],"names":["React","useMemo","useCallback","forwardRef","renderToString","Quill","PropTypes","Box","FormHelperText","InfoIcon","colors","StyledRichTextEditor","StyledAttachFile","icons","import","attach","RichTextEditorStyled","error","onChange","getFiles","required","label","externalLabel","props","fieldRef","handleAttach","input","document","createElement","fileExtensions","setAttribute","click","onchange","files","modules","toolbar","container","color","align","header","script","list","undefined","handlers","clipboard","matchVisual","handleChange","text","convertTextToEmpty","marginLeft","marginBottom","main","marginRight","propTypes","string","value","isRequired","func","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, {\n  useMemo,\n  useCallback,\n  forwardRef\n} from 'react'\nimport { renderToString } from 'react-dom/server'\nimport { Quill } from 'react-quill'\n\nimport PropTypes from 'prop-types'\n\nimport Box from '@material-ui/core/Box'\nimport FormHelperText from '@material-ui/core/FormHelperText'\nimport InfoIcon from '@material-ui/icons/Info'\n\nimport { colors } from '@britania-crm/styles'\n\nimport {\n  StyledRichTextEditor,\n  StyledAttachFile\n} from './styles'\n\n/**\n * Add attach icon\n */\nconst icons = Quill.import('ui/icons')\nicons.attach = renderToString(<StyledAttachFile />)\n\nconst RichTextEditorStyled = forwardRef(({\n  error,\n  onChange,\n  getFiles,\n  required,\n  label: externalLabel,\n  ...props\n}, fieldRef) => {\n  const handleAttach = useCallback(() => {\n    if (getFiles) {\n      const input = document.createElement('input')\n      const fileExtensions = '.jpg,.xls, .xlsx, .pdf'\n\n      input.setAttribute('type', 'file')\n      input.setAttribute('accept', fileExtensions)\n      // input.setAttribute('multiple', '')\n      input.click()\n      input.onchange = () => {\n        getFiles(input.files)\n      }\n    }\n  }, [getFiles])\n\n  const label = useMemo(\n    () => `${ externalLabel }${ required ? ' *' : '' }`,\n    [externalLabel, required]\n  )\n\n  const modules = useMemo(() => ({\n    toolbar: {\n      container: [\n        [{ color: [] }],\n        [{ align: [] }],\n        [{ header: [1, 2, 3, 4, 5, 6, false] }],\n        ['bold', 'underline', 'strike', { script: 'sub' }, { script: 'super' }],\n        [{ list: 'bullet' }, { list: 'ordered' }],\n        ['link', getFiles ? 'attach' : undefined]\n      ],\n      handlers: { attach: handleAttach }\n    },\n    clipboard: { matchVisual: true }\n  }), [getFiles, handleAttach])\n\n  const handleChange = useCallback((text) => {\n    const convertTextToEmpty = text === '<p><br></p>' ? '' : text\n    onChange(convertTextToEmpty)\n  }, [onChange])\n\n  return (\n    <>\n      <StyledRichTextEditor\n        { ...props }\n        placeholder={ label }\n        required={ required }\n        forwardedRef={ fieldRef }\n        modules={ modules }\n        onChange={ handleChange }\n        theme=\"snow\"\n      />\n      <div style={ { marginLeft: 10, marginBottom: 10 } }>\n        {!!error && (\n          <FormHelperText error>\n            <Box style={ { color: colors.error.main } } component=\"span\" display=\"flex\" alignItems=\"center\">\n              <InfoIcon fontSize=\"small\" style={ { marginRight: '8px' } } />\n              {' '}{ error }\n            </Box>\n          </FormHelperText>\n        )}\n      </div>\n    </>\n  )\n})\n\nRichTextEditorStyled.propTypes = {\n  error: PropTypes.string,\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n  getFiles: PropTypes.func,\n  required: PropTypes.bool,\n  label: PropTypes.string\n}\n\nRichTextEditorStyled.defaultProps = {\n  label: null,\n  error: undefined,\n  getFiles: undefined,\n  required: false\n}\n\nexport default RichTextEditorStyled\n"]},"metadata":{},"sourceType":"module"}