{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/components/InputDate/InputDate.js\";\nimport React, { useCallback, useMemo, useRef, useState } from 'react';\nimport moment from 'moment/moment';\nimport PropTypes from 'prop-types';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport dateMask from '@britania-crm/forms/masks/date.mask.js';\nimport colors from '@britania-crm/styles/colors';\nimport { dateBackFormat, dateFriendlyFormat } from '@britania-crm/utils/date';\nimport CalendarPicker from '@britania-crm/web-components/CalendarPicker';\nimport CalendarIcon from '@britania-crm/web-components/Icons/CalendarIcon';\nimport TextField from '@britania-crm/web-components/TextField';\n\nconst InputDate = props => {\n  const {\n    value,\n    onChange,\n    onClick,\n    adornmentStyle,\n    pickerProps,\n    min,\n    max,\n    onValueChange,\n    ...rest\n  } = props;\n  const {\n    detached,\n    disabled\n  } = rest;\n  const [calendarValue, setCalendarValue] = useState(value);\n  const inputRef = useRef();\n  const date = useMemo(() => detached ? value : calendarValue, [calendarValue, detached, value]);\n  const calendarOptions = useMemo(() => ({\n    mode: 'single'\n  }), []);\n  const transformRender = useCallback(newDate => {\n    const newMoment = moment(newDate, dateBackFormat, true);\n\n    if (newMoment.isValid()) {\n      return newMoment.format(dateFriendlyFormat);\n    }\n\n    return newMoment._i;\n  }, []);\n  const transformValue = useCallback(newDate => {\n    const newMoment = moment(newDate, dateFriendlyFormat, true);\n\n    if (newMoment.isValid()) {\n      return newMoment.format(dateBackFormat);\n    }\n\n    return newMoment._i;\n  }, []); // only use it outside a form\n\n  const handleInputChange = useCallback(({\n    target: {\n      value: newDate\n    }\n  }) => {\n    onChange(transformValue(newDate));\n  }, [onChange, transformValue]); // only use it inside a form\n\n  const handleFieldChange = useCallback((newDate, fieldMounted) => {\n    if (!detached) {\n      if (moment(newDate, dateBackFormat, true).isValid()) {\n        setCalendarValue(newDate);\n      } else {\n        setCalendarValue('');\n      }\n    }\n\n    onValueChange(newDate, fieldMounted);\n  }, [detached, onValueChange]);\n  const handleCalendarChange = useCallback(newDate => {\n    if (!detached && inputRef.current.setValue) {\n      inputRef.current.setValue(newDate);\n    }\n\n    onChange(newDate);\n  }, [detached, onChange]);\n\n  if (detached) {\n    rest.value = date;\n    rest.onChange = handleInputChange;\n  } else {\n    rest.transformValue = transformValue;\n    rest.onValueChange = handleFieldChange;\n  }\n\n  return /*#__PURE__*/React.createElement(CalendarPicker, Object.assign({\n    value: date,\n    onChange: handleCalendarChange,\n    options: calendarOptions,\n    minDate: min,\n    maxDate: max,\n    disabled: disabled\n  }, pickerProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(TextField, Object.assign({\n    \"data-input\": true,\n    ref: inputRef\n  }, rest, {\n    setMask: dateMask,\n    validateOnBlur: false,\n    type: \"tel\",\n    autoComplete: \"off\",\n    transformRender: transformRender,\n    InputProps: {\n      endAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n        style: adornmentStyle,\n        position: \"end\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }\n      }, disabled ? /*#__PURE__*/React.createElement(CalendarIcon, {\n        size: 20,\n        style: {\n          color: colors.secondary.main\n        },\n        onClick: onClick,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 17\n        }\n      }) : /*#__PURE__*/React.createElement(CalendarIcon, {\n        size: 20,\n        style: {\n          color: colors.secondary.main\n        },\n        onClick: onClick,\n        \"data-toggle\": true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 17\n        }\n      }))\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 7\n    }\n  })));\n};\n\nInputDate.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  onValueChange: PropTypes.func,\n  adornmentStyle: PropTypes.object,\n  onClick: PropTypes.func,\n  disabled: PropTypes.bool,\n  pickerProps: PropTypes.object,\n  min: PropTypes.string,\n  max: PropTypes.string\n};\nInputDate.defaultProps = {\n  value: '',\n\n  onChange() {},\n\n  onValueChange() {},\n\n  adornmentStyle: {},\n\n  onClick() {},\n\n  disabled: false,\n  pickerProps: {},\n  min: undefined,\n  max: undefined\n};\nexport default InputDate;","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/components/InputDate/InputDate.js"],"names":["React","useCallback","useMemo","useRef","useState","moment","PropTypes","InputAdornment","dateMask","colors","dateBackFormat","dateFriendlyFormat","CalendarPicker","CalendarIcon","TextField","InputDate","props","value","onChange","onClick","adornmentStyle","pickerProps","min","max","onValueChange","rest","detached","disabled","calendarValue","setCalendarValue","inputRef","date","calendarOptions","mode","transformRender","newDate","newMoment","isValid","format","_i","transformValue","handleInputChange","target","handleFieldChange","fieldMounted","handleCalendarChange","current","setValue","endAdornment","color","secondary","main","propTypes","string","func","object","bool","defaultProps","undefined"],"mappings":"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","sourcesContent":["import React, {\n  useCallback,\n  useMemo,\n  useRef,\n  useState\n} from 'react'\n\nimport moment from 'moment/moment'\nimport PropTypes from 'prop-types'\n\nimport InputAdornment from '@material-ui/core/InputAdornment'\n\nimport dateMask from '@britania-crm/forms/masks/date.mask.js'\nimport colors from '@britania-crm/styles/colors'\nimport {\n  dateBackFormat,\n  dateFriendlyFormat\n} from '@britania-crm/utils/date'\nimport CalendarPicker from '@britania-crm/web-components/CalendarPicker'\nimport CalendarIcon from '@britania-crm/web-components/Icons/CalendarIcon'\nimport TextField from '@britania-crm/web-components/TextField'\n\nconst InputDate = (props) => {\n  const {\n    value,\n    onChange,\n    onClick,\n    adornmentStyle,\n    pickerProps,\n    min,\n    max,\n    onValueChange,\n    ...rest\n  } = props\n\n  const { detached, disabled } = rest\n\n  const [calendarValue, setCalendarValue] = useState(value)\n\n  const inputRef = useRef()\n\n  const date = useMemo(\n    () => detached ? value : calendarValue,\n    [calendarValue, detached, value]\n  )\n\n  const calendarOptions = useMemo(\n    () => ({ mode: 'single' }),\n    []\n  )\n\n  const transformRender = useCallback(\n    (newDate) => {\n      const newMoment = moment(newDate, dateBackFormat, true)\n      if (newMoment.isValid()) {\n        return newMoment.format(dateFriendlyFormat)\n      }\n      return newMoment._i\n    },\n    []\n  )\n\n  const transformValue = useCallback(\n    (newDate) => {\n      const newMoment = moment(newDate, dateFriendlyFormat, true)\n      if (newMoment.isValid()) {\n        return newMoment.format(dateBackFormat)\n      }\n      return newMoment._i\n    },\n    []\n  )\n\n  // only use it outside a form\n  const handleInputChange = useCallback(\n    ({ target: { value: newDate } }) => {\n      onChange(transformValue(newDate))\n    },\n    [onChange, transformValue]\n  )\n\n  // only use it inside a form\n  const handleFieldChange = useCallback(\n    (newDate, fieldMounted) => {\n      if (!detached) {\n        if (moment(newDate, dateBackFormat, true).isValid()) {\n          setCalendarValue(newDate)\n        } else {\n          setCalendarValue('')\n        }\n      }\n      onValueChange(newDate, fieldMounted)\n    },\n    [detached, onValueChange]\n  )\n\n  const handleCalendarChange = useCallback(\n    (newDate) => {\n      if (!detached && inputRef.current.setValue) {\n        inputRef.current.setValue(newDate)\n      }\n      onChange(newDate)\n    },\n    [detached, onChange]\n  )\n\n  if (detached) {\n    rest.value = date\n    rest.onChange = handleInputChange\n  } else {\n    rest.transformValue = transformValue\n    rest.onValueChange = handleFieldChange\n  }\n\n  return (\n    <CalendarPicker\n      value={ date }\n      onChange={ handleCalendarChange }\n      options={ calendarOptions }\n      minDate={ min }\n      maxDate={ max }\n      disabled={ disabled }\n      { ...pickerProps }\n    >\n      <TextField\n        data-input\n        ref={ inputRef }\n        { ...rest }\n        setMask={ dateMask }\n        validateOnBlur={ false }\n        type=\"tel\"\n        autoComplete=\"off\"\n        transformRender={ transformRender }\n        InputProps={ {\n          endAdornment: (\n            <InputAdornment style={ adornmentStyle } position=\"end\">\n              { disabled ? (\n                <CalendarIcon\n                  size={ 20 }\n                  style={ { color: colors.secondary.main } }\n                  onClick={ onClick }\n                />\n              ) : (\n                <CalendarIcon\n                  size={ 20 }\n                  style={ { color: colors.secondary.main } }\n                  onClick={ onClick }\n                  data-toggle\n                />\n              )}\n            </InputAdornment>\n          )\n        } }\n      />\n    </CalendarPicker>\n  )\n}\n\nInputDate.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  onValueChange: PropTypes.func,\n  adornmentStyle: PropTypes.object,\n  onClick: PropTypes.func,\n  disabled: PropTypes.bool,\n  pickerProps: PropTypes.object,\n  min: PropTypes.string,\n  max: PropTypes.string\n}\n\nInputDate.defaultProps = {\n  value: '',\n  onChange () {},\n  onValueChange () {},\n  adornmentStyle: {},\n  onClick () {},\n  disabled: false,\n  pickerProps: {},\n  min: undefined,\n  max: undefined\n}\n\nexport default InputDate\n"]},"metadata":{},"sourceType":"module"}