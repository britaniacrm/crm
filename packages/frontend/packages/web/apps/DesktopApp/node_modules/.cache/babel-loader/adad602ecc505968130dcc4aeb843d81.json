{"ast":null,"code":"\"use strict\";\n\nvar removeHash = function removeHash(hex) {\n  return hex.charAt(0) === '#' ? hex.slice(1) : hex;\n};\n\nvar parseHex = function parseHex(nakedHex) {\n  var isShort = nakedHex.length === 3 || nakedHex.length === 4;\n  var twoDigitHexR = isShort ? \"\".concat(nakedHex.slice(0, 1)).concat(nakedHex.slice(0, 1)) : nakedHex.slice(0, 2);\n  var twoDigitHexG = isShort ? \"\".concat(nakedHex.slice(1, 2)).concat(nakedHex.slice(1, 2)) : nakedHex.slice(2, 4);\n  var twoDigitHexB = isShort ? \"\".concat(nakedHex.slice(2, 3)).concat(nakedHex.slice(2, 3)) : nakedHex.slice(4, 6);\n  var twoDigitHexA = (isShort ? \"\".concat(nakedHex.slice(3, 4)).concat(nakedHex.slice(3, 4)) : nakedHex.slice(6, 8)) || 'ff'; // const numericA = +((parseInt(a, 16) / 255).toFixed(2));\n\n  return {\n    r: twoDigitHexR,\n    g: twoDigitHexG,\n    b: twoDigitHexB,\n    a: twoDigitHexA\n  };\n};\n\nvar hexToDecimal = function hexToDecimal(hex) {\n  return parseInt(hex, 16);\n};\n\nvar hexesToDecimals = function hexesToDecimals(_ref) {\n  var r = _ref.r,\n      g = _ref.g,\n      b = _ref.b,\n      a = _ref.a;\n  return {\n    r: hexToDecimal(r),\n    g: hexToDecimal(g),\n    b: hexToDecimal(b),\n    a: +(hexToDecimal(a) / 255).toFixed(2)\n  };\n};\n\nvar isNumeric = function isNumeric(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}; // eslint-disable-line no-restricted-globals, max-len\n\n\nvar formatRgb = function formatRgb(decimalObject, parameterA) {\n  var r = decimalObject.r,\n      g = decimalObject.g,\n      b = decimalObject.b,\n      parsedA = decimalObject.a;\n  var a = isNumeric(parameterA) ? parameterA : parsedA;\n  return \"rgba(\".concat(r, \", \").concat(g, \", \").concat(b, \", \").concat(a, \")\");\n};\n/**\n * Turns an old-fashioned css hex color value into a rgb color value.\n *\n * If you specify an alpha value, you'll get a rgba() value instead.\n *\n * @param The hex value to convert. ('123456'. '#123456', ''123', '#123')\n * @param An alpha value to apply. (optional) ('0.5', '0.25')\n * @return An rgb or rgba value. ('rgb(11, 22, 33)'. 'rgba(11, 22, 33, 0.5)')\n */\n\n\nvar hexToRgba = function hexToRgba(hex, a) {\n  var hashlessHex = removeHash(hex);\n  var hexObject = parseHex(hashlessHex);\n  var decimalObject = hexesToDecimals(hexObject);\n  return formatRgb(decimalObject, a);\n};\n\nmodule.exports = hexToRgba;","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/node_modules/hex-to-rgba/build/index.js"],"names":["removeHash","hex","charAt","slice","parseHex","nakedHex","isShort","length","twoDigitHexR","concat","twoDigitHexG","twoDigitHexB","twoDigitHexA","r","g","b","a","hexToDecimal","parseInt","hexesToDecimals","_ref","toFixed","isNumeric","n","isNaN","parseFloat","isFinite","formatRgb","decimalObject","parameterA","parsedA","hexToRgba","hashlessHex","hexObject","module","exports"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar removeHash = function removeHash(hex) {\n  return hex.charAt(0) === '#' ? hex.slice(1) : hex;\n};\n\nvar parseHex = function parseHex(nakedHex) {\n  var isShort = nakedHex.length === 3 || nakedHex.length === 4;\n  var twoDigitHexR = isShort ? \"\".concat(nakedHex.slice(0, 1)).concat(nakedHex.slice(0, 1)) : nakedHex.slice(0, 2);\n  var twoDigitHexG = isShort ? \"\".concat(nakedHex.slice(1, 2)).concat(nakedHex.slice(1, 2)) : nakedHex.slice(2, 4);\n  var twoDigitHexB = isShort ? \"\".concat(nakedHex.slice(2, 3)).concat(nakedHex.slice(2, 3)) : nakedHex.slice(4, 6);\n  var twoDigitHexA = (isShort ? \"\".concat(nakedHex.slice(3, 4)).concat(nakedHex.slice(3, 4)) : nakedHex.slice(6, 8)) || 'ff'; // const numericA = +((parseInt(a, 16) / 255).toFixed(2));\n\n  return {\n    r: twoDigitHexR,\n    g: twoDigitHexG,\n    b: twoDigitHexB,\n    a: twoDigitHexA\n  };\n};\n\nvar hexToDecimal = function hexToDecimal(hex) {\n  return parseInt(hex, 16);\n};\n\nvar hexesToDecimals = function hexesToDecimals(_ref) {\n  var r = _ref.r,\n      g = _ref.g,\n      b = _ref.b,\n      a = _ref.a;\n  return {\n    r: hexToDecimal(r),\n    g: hexToDecimal(g),\n    b: hexToDecimal(b),\n    a: +(hexToDecimal(a) / 255).toFixed(2)\n  };\n};\n\nvar isNumeric = function isNumeric(n) {\n  return !isNaN(parseFloat(n)) && isFinite(n);\n}; // eslint-disable-line no-restricted-globals, max-len\n\n\nvar formatRgb = function formatRgb(decimalObject, parameterA) {\n  var r = decimalObject.r,\n      g = decimalObject.g,\n      b = decimalObject.b,\n      parsedA = decimalObject.a;\n  var a = isNumeric(parameterA) ? parameterA : parsedA;\n  return \"rgba(\".concat(r, \", \").concat(g, \", \").concat(b, \", \").concat(a, \")\");\n};\n/**\n * Turns an old-fashioned css hex color value into a rgb color value.\n *\n * If you specify an alpha value, you'll get a rgba() value instead.\n *\n * @param The hex value to convert. ('123456'. '#123456', ''123', '#123')\n * @param An alpha value to apply. (optional) ('0.5', '0.25')\n * @return An rgb or rgba value. ('rgb(11, 22, 33)'. 'rgba(11, 22, 33, 0.5)')\n */\n\n\nvar hexToRgba = function hexToRgba(hex, a) {\n  var hashlessHex = removeHash(hex);\n  var hexObject = parseHex(hashlessHex);\n  var decimalObject = hexesToDecimals(hexObject);\n  return formatRgb(decimalObject, a);\n};\n\nmodule.exports = hexToRgba;"]},"metadata":{},"sourceType":"script"}