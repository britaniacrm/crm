{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/customers/modals/PreRegistrationCfopModal/PreRegistrationCfopModal.js\";\nimport React, { useCallback, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport map from 'lodash/map';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport I18n, { useT } from '@britania-crm/i18n';\nimport { clients as clientsCrmRoutes } from '@britania-crm/services/apis/crmApi/resources/routes';\nimport Button from '@britania-crm/web-components/Button';\nimport Form from '@britania-crm/web-components/Form';\nimport InputAutocomplete from '@britania-crm/web-components/InputAutocomplete';\nimport Modal from '@britania-crm/web-components/Modal';\n\nconst PreRegistrationCfopModal = props => {\n  const {\n    id,\n    open,\n    handleClose,\n    onSubmit,\n    title,\n    schema,\n    defaultValues,\n    disabled\n  } = props;\n  const t = useT();\n  const formRef = useRef(null);\n  const rows = useMemo(() => {\n    const arrayNames = map(defaultValues, (_, name) => name);\n    const groups = [];\n\n    for (let i = 0; i < arrayNames.length; i = i + 2) {\n      groups.push({\n        codeName: arrayNames[i],\n        descriptionName: arrayNames[i + 1]\n      });\n    }\n\n    return groups;\n  }, [defaultValues]);\n  const handleSubmit = useCallback(values => {\n    onSubmit(values);\n    handleClose();\n  }, [handleClose, onSubmit]);\n  return /*#__PURE__*/React.createElement(Modal, {\n    id: id,\n    open: open,\n    maxWidth: \"md\",\n    title: title,\n    variant: \"space\",\n    fullWidth: true,\n    FooterComponent: () => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Button, {\n      onClick: handleClose,\n      color: \"secondary\",\n      variant: \"outlined\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }\n    }, disabled ? t('turn back') : t('cancel')), !disabled && /*#__PURE__*/React.createElement(I18n, {\n      as: Button,\n      onClick: () => formRef.current.submit(),\n      color: \"secondary\",\n      style: {\n        marginLeft: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 15\n      }\n    }, \"save\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    ref: formRef,\n    schemaConstructor: schema,\n    defaultValues: defaultValues,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }\n  }, map(rows, row => /*#__PURE__*/React.createElement(Grid, {\n    key: row.codeName,\n    item: true,\n    sm: 12,\n    md: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(I18n, {\n    as: Typography,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 19\n    }\n  }, `cfop ${row.codeName}` || '')), row.codeName && /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(InputAutocomplete, {\n    url: clientsCrmRoutes.getOperationNature,\n    params: {\n      page: 1,\n      pageSize: 10\n    },\n    valueKey: \"code\",\n    paramName: \"code\",\n    name: row.codeName,\n    label: t('code', {\n      howMany: 1\n    }),\n    disabled: disabled,\n    onValueChange: value => {\n      if (value === null || value === void 0 ? void 0 : value.description) {\n        formRef.current.setFieldValue(row.descriptionName, value);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 21\n    }\n  })), row.descriptionName && /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    md: 8,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(InputAutocomplete, {\n    url: clientsCrmRoutes.getOperationNature,\n    params: {\n      page: 1,\n      pageSize: 10\n    },\n    valueKey: \"description\",\n    paramName: \"description\",\n    name: row.descriptionName,\n    label: t('description'),\n    disabled: disabled,\n    onValueChange: value => {\n      if (value === null || value === void 0 ? void 0 : value.code) {\n        formRef.current.setFieldValue(row.codeName, value);\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 21\n    }\n  }))))))));\n};\n\nPreRegistrationCfopModal.propTypes = {\n  id: PropTypes.string.isRequired,\n  open: PropTypes.bool.isRequired,\n  handleClose: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n  schema: PropTypes.func.isRequired,\n  defaultValues: PropTypes.object.isRequired,\n  disabled: PropTypes.bool\n};\nPreRegistrationCfopModal.defaultProps = {\n  disabled: false\n};\nexport default PreRegistrationCfopModal;","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/customers/modals/PreRegistrationCfopModal/PreRegistrationCfopModal.js"],"names":["React","useCallback","useRef","useMemo","PropTypes","map","Grid","Typography","I18n","useT","clients","clientsCrmRoutes","Button","Form","InputAutocomplete","Modal","PreRegistrationCfopModal","props","id","open","handleClose","onSubmit","title","schema","defaultValues","disabled","t","formRef","rows","arrayNames","_","name","groups","i","length","push","codeName","descriptionName","handleSubmit","values","current","submit","marginLeft","row","getOperationNature","page","pageSize","howMany","value","description","setFieldValue","code","propTypes","string","isRequired","bool","func","object","defaultProps"],"mappings":"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","sourcesContent":["import React, {\n  useCallback,\n  useRef,\n  useMemo\n} from 'react'\n\nimport PropTypes from 'prop-types'\n\nimport map from 'lodash/map'\n\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\n\nimport I18n, { useT } from '@britania-crm/i18n'\nimport { clients as clientsCrmRoutes } from '@britania-crm/services/apis/crmApi/resources/routes'\nimport Button from '@britania-crm/web-components/Button'\nimport Form from '@britania-crm/web-components/Form'\nimport InputAutocomplete from '@britania-crm/web-components/InputAutocomplete'\nimport Modal from '@britania-crm/web-components/Modal'\n\nconst PreRegistrationCfopModal = (props) => {\n  const {\n    id,\n    open,\n    handleClose,\n    onSubmit,\n    title,\n    schema,\n    defaultValues,\n    disabled\n  } = props\n\n  const t = useT()\n  const formRef = useRef(null)\n  const rows = useMemo(\n    () => {\n      const arrayNames = map(defaultValues, (_, name) => name)\n\n      const groups = []\n      for (let i = 0; i < arrayNames.length; i = i + 2) {\n        groups.push({ codeName: arrayNames[i], descriptionName: arrayNames[i + 1] })\n      }\n      return groups\n    },\n    [defaultValues]\n  )\n\n  const handleSubmit = useCallback(\n    (values) => {\n      onSubmit(values)\n      handleClose()\n    },\n    [handleClose, onSubmit]\n  )\n\n  return (\n    <Modal\n      id={ id }\n      open={ open }\n      maxWidth=\"md\"\n      title={ title }\n      variant=\"space\"\n      fullWidth\n      FooterComponent={ () => (\n        <>\n          <Button\n            onClick={ handleClose }\n            color=\"secondary\"\n            variant=\"outlined\"\n          >\n            {disabled ? t('turn back') : t('cancel')}\n          </Button>\n          {\n            !disabled && (\n              <I18n as={ Button }\n                onClick={ () => formRef.current.submit() }\n                color=\"secondary\"\n                style={ { marginLeft: 10 } }\n              >\n            save\n              </I18n>\n            )\n          }\n        </>\n      )\n      }\n    >\n      <Form\n        ref={ formRef }\n        schemaConstructor={ schema }\n        defaultValues={ defaultValues }\n        onSubmit={ handleSubmit }\n      >\n        <Grid container spacing={ 2 }>\n          {map(rows, (row) => (\n            <Grid key={ row.codeName } item sm={ 12 } md={ 6 }>\n              <Grid container spacing={ 1 }>\n                <Grid item sm={ 12 }>\n                  <I18n as={ Typography }>\n                    {`cfop ${ row.codeName }` || ''}\n                  </I18n>\n                </Grid>\n\n                {row.codeName && (\n                  <Grid item sm={ 12 } md={ 4 }>\n                    <InputAutocomplete\n                      url={ clientsCrmRoutes.getOperationNature }\n                      params={ {\n                        page: 1,\n                        pageSize: 10\n                      }\n                      }\n                      valueKey=\"code\"\n                      paramName=\"code\"\n                      name={ row.codeName }\n                      label={ t('code', { howMany: 1 }) }\n                      disabled={ disabled }\n                      onValueChange={ (value) => {\n                        if (value?.description) {\n                          formRef.current.setFieldValue(row.descriptionName, value)\n                        }\n                      } }\n                    />\n                  </Grid>\n                )}\n\n                {row.descriptionName && (\n                  <Grid item sm={ 12 } md={ 8 }>\n                    <InputAutocomplete\n                      url={ clientsCrmRoutes.getOperationNature }\n                      params={ {\n                        page: 1,\n                        pageSize: 10\n                      }\n                      }\n                      valueKey=\"description\"\n                      paramName=\"description\"\n                      name={ row.descriptionName }\n                      label={ t('description') }\n                      disabled={ disabled }\n                      onValueChange={ (value) => {\n                        if (value?.code) {\n                          formRef.current.setFieldValue(row.codeName, value)\n                        }\n                      } }\n                    />\n                  </Grid>\n                )}\n              </Grid>\n            </Grid>\n          ))}\n        </Grid>\n      </Form>\n    </Modal>\n  )\n}\n\nPreRegistrationCfopModal.propTypes = {\n  id: PropTypes.string.isRequired,\n  open: PropTypes.bool.isRequired,\n  handleClose: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n  schema: PropTypes.func.isRequired,\n  defaultValues: PropTypes.object.isRequired,\n  disabled: PropTypes.bool\n}\n\nPreRegistrationCfopModal.defaultProps = { disabled: false }\n\nexport default PreRegistrationCfopModal\n"]},"metadata":{},"sourceType":"module"}