{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/customerRanking/components/EditableCellNumber/EditableCellNumber.js\";\nimport React, { useEffect, useCallback, useMemo, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport { MIN_VALUE, MAX_VALUE } from '@britania-crm/constants/customerRanking.constants';\nimport { isPercentageValid } from '@britania-crm/utils';\nimport * as INDICATORS from '../../constants/table';\nimport { Input } from './styles';\n\nconst getParentCategory = (id = '') => id.split('_')[0];\n\nconst EditableCellNumber = ({\n  prop\n}) => {\n  const {\n    value: initialValue,\n    row,\n    row: {\n      index\n    },\n    column,\n    column: {\n      id\n    },\n    updateMyData,\n    columnEditable\n  } = prop;\n  const [value, setValue] = useState(initialValue);\n  const [lastValidValue, setLastValidValue] = useState(initialValue);\n  const category = useMemo(() => getParentCategory(prop.cell.column.id), [prop.cell.column.id]);\n  const preSymbol = useMemo(() => column.headerId !== INDICATORS.WEIGHT && get(row, `values.${category}_SYMBOL`), [category, column.headerId, row]);\n  const posSymbol = useMemo(() => column.headerId !== INDICATORS.WEIGHT && '%', [column.headerId]);\n  const onChange = useCallback(e => {\n    if (isPercentageValid(Number(e.target.value))) {\n      const val = Number(e.target.value);\n      setValue(val);\n      setLastValidValue(val);\n    }\n  }, []);\n  const onBlur = useCallback(e => {\n    const val = Number(e.target.value);\n\n    if (!isPercentageValid(val, 0, 100)) {\n      setValue(lastValidValue);\n    } else {\n      updateMyData(index, id, val);\n    }\n  }, [id, index, lastValidValue, updateMyData]);\n  useEffect(() => {\n    setValue(initialValue);\n  }, [initialValue]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'space-between'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }\n  }, preSymbol, /*#__PURE__*/React.createElement(Input, {\n    type: \"number\",\n    min: MIN_VALUE,\n    max: MAX_VALUE,\n    disabled: columnEditable !== column.parent.id,\n    value: value,\n    onChange: onChange,\n    onBlur: onBlur,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }\n  }), posSymbol);\n};\n\nEditableCellNumber.propTypes = {\n  prop: PropTypes.object.isRequired\n};\nexport default EditableCellNumber;","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/customerRanking/components/EditableCellNumber/EditableCellNumber.js"],"names":["React","useEffect","useCallback","useMemo","useState","PropTypes","get","MIN_VALUE","MAX_VALUE","isPercentageValid","INDICATORS","Input","getParentCategory","id","split","EditableCellNumber","prop","value","initialValue","row","index","column","updateMyData","columnEditable","setValue","lastValidValue","setLastValidValue","category","cell","preSymbol","headerId","WEIGHT","posSymbol","onChange","e","Number","target","val","onBlur","display","alignItems","justifyContent","parent","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, {\n  useEffect,\n  useCallback,\n  useMemo,\n  useState\n} from 'react'\n\nimport PropTypes from 'prop-types'\n\nimport get from 'lodash/get'\n\nimport {\n  MIN_VALUE,\n  MAX_VALUE\n} from '@britania-crm/constants/customerRanking.constants'\nimport { isPercentageValid } from '@britania-crm/utils'\n\nimport * as INDICATORS from '../../constants/table'\nimport { Input } from './styles'\n\nconst getParentCategory = (id = '') => id.split('_')[0]\n\nconst EditableCellNumber = ({ prop }) => {\n  const {\n    value: initialValue,\n    row,\n    row: { index },\n    column,\n    column: { id },\n    updateMyData,\n    columnEditable\n  } = prop\n\n  const [value, setValue] = useState(initialValue)\n  const [lastValidValue, setLastValidValue] = useState(initialValue)\n\n  const category = useMemo(\n    () => getParentCategory(prop.cell.column.id),\n    [prop.cell.column.id]\n  )\n\n  const preSymbol = useMemo(\n    () => (column.headerId !== INDICATORS.WEIGHT) && get(row, `values.${ category }_SYMBOL`),\n    [category, column.headerId, row]\n  )\n\n  const posSymbol = useMemo(\n    () => (column.headerId !== INDICATORS.WEIGHT) && '%',\n    [column.headerId]\n  )\n\n  const onChange = useCallback(\n    (e) => {\n      if (isPercentageValid(Number(e.target.value))) {\n        const val = Number(e.target.value)\n        setValue(val)\n        setLastValidValue(val)\n      }\n    },\n    []\n  )\n\n  const onBlur = useCallback(\n    (e) => {\n      const val = Number(e.target.value)\n\n      if (!isPercentageValid(val, 0, 100)) {\n        setValue(lastValidValue)\n      } else {\n        updateMyData(index, id, val)\n      }\n    },\n    [id, index, lastValidValue, updateMyData]\n  )\n\n  useEffect(() => {\n    setValue(initialValue)\n  }, [initialValue])\n\n  return (\n    <div style={ {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'space-between'\n    } }\n    >\n      { preSymbol }\n      <Input\n        type=\"number\"\n        min={ MIN_VALUE }\n        max={ MAX_VALUE }\n        disabled={ columnEditable !== column.parent.id }\n        value={ value }\n        onChange={ onChange }\n        onBlur={ onBlur }\n      />\n      { posSymbol }\n    </div>\n  )\n}\n\nEditableCellNumber.propTypes = { prop: PropTypes.object.isRequired }\n\nexport default EditableCellNumber\n"]},"metadata":{},"sourceType":"module"}