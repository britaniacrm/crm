{"ast":null,"code":"var _curry2 = /*#__PURE__*/require('./internal/_curry2');\n\nvar _isFunction = /*#__PURE__*/require('./internal/_isFunction');\n\nvar curryN = /*#__PURE__*/require('./curryN');\n\nvar toString = /*#__PURE__*/require('./toString');\n/**\n * Turns a named method with a specified arity into a function that can be\n * called directly supplied with arguments and a target object.\n *\n * The returned function is curried and accepts `arity + 1` parameters where\n * the final parameter is the target object.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)\n * @param {Number} arity Number of arguments the returned function should take\n *        before the target object.\n * @param {String} method Name of the method to call.\n * @return {Function} A new curried function.\n * @see R.construct\n * @example\n *\n *      const sliceFrom = R.invoker(1, 'slice');\n *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'\n *      const sliceFrom6 = R.invoker(2, 'slice')(6);\n *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'\n * @symb R.invoker(0, 'method')(o) = o['method']()\n * @symb R.invoker(1, 'method')(a, o) = o['method'](a)\n * @symb R.invoker(2, 'method')(a, b, o) = o['method'](a, b)\n */\n\n\nvar invoker = /*#__PURE__*/_curry2(function invoker(arity, method) {\n  return curryN(arity + 1, function () {\n    var target = arguments[arity];\n\n    if (target != null && _isFunction(target[method])) {\n      return target[method].apply(target, Array.prototype.slice.call(arguments, 0, arity));\n    }\n\n    throw new TypeError(toString(target) + ' does not have a method named \"' + method + '\"');\n  });\n});\n\nmodule.exports = invoker;","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/node_modules/ramda/src/invoker.js"],"names":["_curry2","require","_isFunction","curryN","toString","invoker","arity","method","target","arguments","apply","Array","prototype","slice","call","TypeError","module","exports"],"mappings":"AAAA,IAAIA,OAAO,GAAG,aAAaC,OAAO,CAAC,oBAAD,CAAlC;;AAEA,IAAIC,WAAW,GAAG,aAAaD,OAAO,CAAC,wBAAD,CAAtC;;AAEA,IAAIE,MAAM,GAAG,aAAaF,OAAO,CAAC,UAAD,CAAjC;;AAEA,IAAIG,QAAQ,GAAG,aAAaH,OAAO,CAAC,YAAD,CAAnC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAII,OAAO,GAAG,aAAaL,OAAO,CAAC,SAASK,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AACjE,SAAOJ,MAAM,CAACG,KAAK,GAAG,CAAT,EAAY,YAAY;AACnC,QAAIE,MAAM,GAAGC,SAAS,CAACH,KAAD,CAAtB;;AACA,QAAIE,MAAM,IAAI,IAAV,IAAkBN,WAAW,CAACM,MAAM,CAACD,MAAD,CAAP,CAAjC,EAAmD;AACjD,aAAOC,MAAM,CAACD,MAAD,CAAN,CAAeG,KAAf,CAAqBF,MAArB,EAA6BG,KAAK,CAACC,SAAN,CAAgBC,KAAhB,CAAsBC,IAAtB,CAA2BL,SAA3B,EAAsC,CAAtC,EAAyCH,KAAzC,CAA7B,CAAP;AACD;;AACD,UAAM,IAAIS,SAAJ,CAAcX,QAAQ,CAACI,MAAD,CAAR,GAAmB,iCAAnB,GAAuDD,MAAvD,GAAgE,GAA9E,CAAN;AACD,GANY,CAAb;AAOD,CARiC,CAAlC;;AASAS,MAAM,CAACC,OAAP,GAAiBZ,OAAjB","sourcesContent":["var _curry2 = /*#__PURE__*/require('./internal/_curry2');\n\nvar _isFunction = /*#__PURE__*/require('./internal/_isFunction');\n\nvar curryN = /*#__PURE__*/require('./curryN');\n\nvar toString = /*#__PURE__*/require('./toString');\n\n/**\n * Turns a named method with a specified arity into a function that can be\n * called directly supplied with arguments and a target object.\n *\n * The returned function is curried and accepts `arity + 1` parameters where\n * the final parameter is the target object.\n *\n * @func\n * @memberOf R\n * @since v0.1.0\n * @category Function\n * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)\n * @param {Number} arity Number of arguments the returned function should take\n *        before the target object.\n * @param {String} method Name of the method to call.\n * @return {Function} A new curried function.\n * @see R.construct\n * @example\n *\n *      const sliceFrom = R.invoker(1, 'slice');\n *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'\n *      const sliceFrom6 = R.invoker(2, 'slice')(6);\n *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'\n * @symb R.invoker(0, 'method')(o) = o['method']()\n * @symb R.invoker(1, 'method')(a, o) = o['method'](a)\n * @symb R.invoker(2, 'method')(a, b, o) = o['method'](a, b)\n */\n\n\nvar invoker = /*#__PURE__*/_curry2(function invoker(arity, method) {\n  return curryN(arity + 1, function () {\n    var target = arguments[arity];\n    if (target != null && _isFunction(target[method])) {\n      return target[method].apply(target, Array.prototype.slice.call(arguments, 0, arity));\n    }\n    throw new TypeError(toString(target) + ' does not have a method named \"' + method + '\"');\n  });\n});\nmodule.exports = invoker;"]},"metadata":{},"sourceType":"script"}