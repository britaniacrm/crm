{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/components/Badges/BadgesStyled.js\";\nimport React, { useCallback, forwardRef, memo } from 'react';\nimport PropTypes from 'prop-types';\nimport filter from 'lodash/filter';\nimport find from 'lodash/find';\nimport map from 'lodash/map';\nimport { areEqual } from '@britania-crm/utils/memo';\nimport { Container, BadgeOptions, Badge, Label } from './styles';\nconst Badges = forwardRef(({\n  options,\n  value,\n  onChange,\n  label\n}, fieldRef) => {\n  const handleCheckOption = useCallback(currentOption => {\n    let changedValue;\n    const isSelectedOption = !!find(value, {\n      id: currentOption.id\n    });\n\n    if (isSelectedOption) {\n      changedValue = filter(value, option => option.id !== currentOption.id);\n    } else {\n      changedValue = [...value, { ...currentOption\n      }];\n    }\n\n    onChange(changedValue);\n  }, [onChange, value]);\n  return /*#__PURE__*/React.createElement(Container, {\n    ref: fieldRef,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 5\n    }\n  }, label && /*#__PURE__*/React.createElement(Label, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }\n  }, label), /*#__PURE__*/React.createElement(BadgeOptions, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, map(options, option => /*#__PURE__*/React.createElement(Badge, {\n    key: String(option.id),\n    selected: find(value, {\n      id: option.id\n    }),\n    onClick: () => handleCheckOption(option),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }, option.name))));\n});\nBadges.propTypes = {\n  value: PropTypes.array,\n  onChange: PropTypes.func,\n  label: PropTypes.string,\n  options: PropTypes.array\n};\nBadges.defaultProps = {\n  value: [],\n\n  onChange() {},\n\n  label: null,\n  options: []\n};\nexport default memo(Badges, areEqual);","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/components/Badges/BadgesStyled.js"],"names":["React","useCallback","forwardRef","memo","PropTypes","filter","find","map","areEqual","Container","BadgeOptions","Badge","Label","Badges","options","value","onChange","label","fieldRef","handleCheckOption","currentOption","changedValue","isSelectedOption","id","option","String","name","propTypes","array","func","string","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,IACEC,WADF,EAEEC,UAFF,EAGEC,IAHF,QAIO,OAJP;AAMA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,IAAP,MAAiB,aAAjB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AAEA,SAASC,QAAT,QAAyB,0BAAzB;AAEA,SACEC,SADF,EAEEC,YAFF,EAGEC,KAHF,EAIEC,KAJF,QAKO,UALP;AAOA,MAAMC,MAAM,GAAGX,UAAU,CAAC,CAAC;AACzBY,EAAAA,OADyB;AAEzBC,EAAAA,KAFyB;AAGzBC,EAAAA,QAHyB;AAIzBC,EAAAA;AAJyB,CAAD,EAKvBC,QALuB,KAKV;AACd,QAAMC,iBAAiB,GAAGlB,WAAW,CAClCmB,aAAD,IAAmB;AACjB,QAAIC,YAAJ;AACA,UAAMC,gBAAgB,GAAG,CAAC,CAAChB,IAAI,CAACS,KAAD,EAAQ;AAAEQ,MAAAA,EAAE,EAAEH,aAAa,CAACG;AAApB,KAAR,CAA/B;;AAEA,QAAID,gBAAJ,EAAsB;AACpBD,MAAAA,YAAY,GAAGhB,MAAM,CAACU,KAAD,EAASS,MAAD,IAAYA,MAAM,CAACD,EAAP,KAAcH,aAAa,CAACG,EAAhD,CAArB;AACD,KAFD,MAEO;AACLF,MAAAA,YAAY,GAAG,CAAC,GAAGN,KAAJ,EAAW,EAAE,GAAGK;AAAL,OAAX,CAAf;AACD;;AAEDJ,IAAAA,QAAQ,CAACK,YAAD,CAAR;AACD,GAZkC,EAanC,CAACL,QAAD,EAAWD,KAAX,CAbmC,CAArC;AAgBA,sBACE,oBAAC,SAAD;AAAW,IAAA,GAAG,EAAGG,QAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGD,KAAK,iBAAI,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQA,KAAR,CADZ,eAEE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGV,GAAG,CAACO,OAAD,EAAWU,MAAD,iBACZ,oBAAC,KAAD;AACE,IAAA,GAAG,EAAGC,MAAM,CAACD,MAAM,CAACD,EAAR,CADd;AAEE,IAAA,QAAQ,EAAGjB,IAAI,CAACS,KAAD,EAAQ;AAAEQ,MAAAA,EAAE,EAAEC,MAAM,CAACD;AAAb,KAAR,CAFjB;AAGE,IAAA,OAAO,EAAG,MAAMJ,iBAAiB,CAACK,MAAD,CAHnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGA,MAAM,CAACE,IALV,CADE,CADN,CAFF,CADF;AAgBD,CAtCwB,CAAzB;AAwCAb,MAAM,CAACc,SAAP,GAAmB;AACjBZ,EAAAA,KAAK,EAAEX,SAAS,CAACwB,KADA;AAEjBZ,EAAAA,QAAQ,EAAEZ,SAAS,CAACyB,IAFH;AAGjBZ,EAAAA,KAAK,EAAEb,SAAS,CAAC0B,MAHA;AAIjBhB,EAAAA,OAAO,EAAEV,SAAS,CAACwB;AAJF,CAAnB;AAOAf,MAAM,CAACkB,YAAP,GAAsB;AACpBhB,EAAAA,KAAK,EAAE,EADa;;AAEpBC,EAAAA,QAAQ,GAAI,CAAE,CAFM;;AAGpBC,EAAAA,KAAK,EAAE,IAHa;AAIpBH,EAAAA,OAAO,EAAE;AAJW,CAAtB;AAOA,eAAeX,IAAI,CAACU,MAAD,EAASL,QAAT,CAAnB","sourcesContent":["import React, {\n  useCallback,\n  forwardRef,\n  memo\n} from 'react'\n\nimport PropTypes from 'prop-types'\n\nimport filter from 'lodash/filter'\nimport find from 'lodash/find'\nimport map from 'lodash/map'\n\nimport { areEqual } from '@britania-crm/utils/memo'\n\nimport {\n  Container,\n  BadgeOptions,\n  Badge,\n  Label\n} from './styles'\n\nconst Badges = forwardRef(({\n  options,\n  value,\n  onChange,\n  label\n}, fieldRef) => {\n  const handleCheckOption = useCallback(\n    (currentOption) => {\n      let changedValue\n      const isSelectedOption = !!find(value, { id: currentOption.id })\n\n      if (isSelectedOption) {\n        changedValue = filter(value, (option) => option.id !== currentOption.id)\n      } else {\n        changedValue = [...value, { ...currentOption }]\n      }\n\n      onChange(changedValue)\n    },\n    [onChange, value]\n  )\n\n  return (\n    <Container ref={ fieldRef }>\n      {label && <Label>{label}</Label>}\n      <BadgeOptions>\n        {map(options, (option) => (\n          <Badge\n            key={ String(option.id) }\n            selected={ find(value, { id: option.id }) }\n            onClick={ () => handleCheckOption(option) }\n          >\n            {option.name}\n          </Badge>\n        ))}\n      </BadgeOptions>\n    </Container>\n  )\n})\n\nBadges.propTypes = {\n  value: PropTypes.array,\n  onChange: PropTypes.func,\n  label: PropTypes.string,\n  options: PropTypes.array\n}\n\nBadges.defaultProps = {\n  value: [],\n  onChange () {},\n  label: null,\n  options: []\n}\n\nexport default memo(Badges, areEqual)\n"]},"metadata":{},"sourceType":"module"}