{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/components/InputDayMonth/InputDayMonth.js\";\nimport React, { useCallback } from 'react';\nimport moment from 'moment/moment';\nimport PropTypes from 'prop-types';\nimport InputAdornment from '@material-ui/core/InputAdornment';\nimport dayMonthMask from '@britania-crm/forms/masks/dayMonth.mask.js';\nimport colors from '@britania-crm/styles/colors';\nimport { leapYear, dateBackFormat, dateFriendlyFormat, monthDayBackFormat, monthDayFriendlyFormat } from '@britania-crm/utils/date';\nimport CalendarIcon from '@britania-crm/web-components/Icons/CalendarIcon';\nimport TextField from '@britania-crm/web-components/TextField';\n\nconst InputDayMonth = props => {\n  const {\n    value,\n    onChange,\n    onClick,\n    adornmentStyle,\n    ...rest\n  } = props;\n  const {\n    detached\n  } = rest;\n  const transformRender = useCallback(newDate => {\n    const newMoment = moment(`${leapYear}-${newDate}`, dateBackFormat, true);\n\n    if (newMoment.isValid()) {\n      return newMoment.format(monthDayFriendlyFormat);\n    }\n\n    return newDate;\n  }, []);\n  const transformValue = useCallback(newDate => {\n    const newMoment = moment(`${newDate}/${leapYear}`, dateFriendlyFormat, true);\n\n    if (newMoment.isValid()) {\n      return newMoment.format(monthDayBackFormat);\n    }\n\n    return newDate;\n  }, []); // only use it outside a form\n\n  const handleInputChange = useCallback(({\n    target: {\n      value: newDate\n    }\n  }) => {\n    onChange(transformValue(newDate));\n  }, [onChange, transformValue]);\n\n  if (detached) {\n    rest.value = value;\n    rest.onChange = handleInputChange;\n  } else {\n    rest.transformValue = transformValue;\n    rest.transformRender = transformRender;\n  }\n\n  return /*#__PURE__*/React.createElement(TextField, Object.assign({}, rest, {\n    type: \"tel\",\n    setMask: dayMonthMask,\n    InputProps: {\n      endAdornment: /*#__PURE__*/React.createElement(InputAdornment, {\n        style: adornmentStyle,\n        position: \"end\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(CalendarIcon, {\n        size: 20,\n        style: {\n          color: colors.secondary.main\n        },\n        onClick: onClick,\n        \"data-toggle\": true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }\n      }))\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 5\n    }\n  }));\n};\n\nInputDayMonth.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  onClick: PropTypes.func,\n  adornmentStyle: PropTypes.object\n};\nInputDayMonth.defaultProps = {\n  value: '',\n\n  onChange() {},\n\n  onClick() {},\n\n  adornmentStyle: {}\n};\nexport default InputDayMonth;","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/components/InputDayMonth/InputDayMonth.js"],"names":["React","useCallback","moment","PropTypes","InputAdornment","dayMonthMask","colors","leapYear","dateBackFormat","dateFriendlyFormat","monthDayBackFormat","monthDayFriendlyFormat","CalendarIcon","TextField","InputDayMonth","props","value","onChange","onClick","adornmentStyle","rest","detached","transformRender","newDate","newMoment","isValid","format","transformValue","handleInputChange","target","endAdornment","color","secondary","main","propTypes","string","func","object","defaultProps"],"mappings":"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","sourcesContent":["import React, { useCallback } from 'react'\n\nimport moment from 'moment/moment'\nimport PropTypes from 'prop-types'\n\nimport InputAdornment from '@material-ui/core/InputAdornment'\n\nimport dayMonthMask from '@britania-crm/forms/masks/dayMonth.mask.js'\nimport colors from '@britania-crm/styles/colors'\nimport {\n  leapYear,\n  dateBackFormat,\n  dateFriendlyFormat,\n  monthDayBackFormat,\n  monthDayFriendlyFormat\n} from '@britania-crm/utils/date'\nimport CalendarIcon from '@britania-crm/web-components/Icons/CalendarIcon'\nimport TextField from '@britania-crm/web-components/TextField'\n\nconst InputDayMonth = (props) => {\n  const {\n    value,\n    onChange,\n    onClick,\n    adornmentStyle,\n    ...rest\n  } = props\n\n  const { detached } = rest\n\n  const transformRender = useCallback(\n    (newDate) => {\n      const newMoment = moment(`${ leapYear }-${ newDate }`, dateBackFormat, true)\n      if (newMoment.isValid()) {\n        return newMoment.format(monthDayFriendlyFormat)\n      }\n      return newDate\n    },\n    []\n  )\n\n  const transformValue = useCallback(\n    (newDate) => {\n      const newMoment = moment(`${ newDate }/${ leapYear }`, dateFriendlyFormat, true)\n      if (newMoment.isValid()) {\n        return newMoment.format(monthDayBackFormat)\n      }\n      return newDate\n    },\n    []\n  )\n\n  // only use it outside a form\n  const handleInputChange = useCallback(\n    ({ target: { value: newDate } }) => {\n      onChange(transformValue(newDate))\n    },\n    [onChange, transformValue]\n  )\n\n  if (detached) {\n    rest.value = value\n    rest.onChange = handleInputChange\n  } else {\n    rest.transformValue = transformValue\n    rest.transformRender = transformRender\n  }\n\n  return (\n    <TextField\n      { ...rest }\n      type=\"tel\"\n      setMask={ dayMonthMask }\n      InputProps={ {\n        endAdornment: (\n          <InputAdornment style={ adornmentStyle } position=\"end\">\n            <CalendarIcon\n              size={ 20 }\n              style={ { color: colors.secondary.main } }\n              onClick={ onClick }\n              data-toggle\n            />\n          </InputAdornment>\n        )\n      } }\n    />\n  )\n}\n\nInputDayMonth.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  onClick: PropTypes.func,\n  adornmentStyle: PropTypes.object\n}\n\nInputDayMonth.defaultProps = {\n  value: '',\n  onChange () {},\n  onClick () {},\n  adornmentStyle: {}\n}\n\nexport default InputDayMonth\n"]},"metadata":{},"sourceType":"module"}