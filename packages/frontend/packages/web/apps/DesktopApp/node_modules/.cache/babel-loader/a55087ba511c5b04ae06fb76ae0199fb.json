{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/components/MessageCard/MessageCard.js\";\nimport React, { useMemo } from 'react';\nimport clsx from 'clsx';\nimport parse from 'html-react-parser';\nimport PropTypes from 'prop-types';\nimport map from 'lodash/map';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport I18n from '@britania-crm/i18n';\nimport { formatBackDateToFriendlyFormat } from '@britania-crm/utils/date';\nimport Button from '@britania-crm/web-components/Button';\nimport useStyles from './styles';\n\nconst MessageCard = ({\n  item,\n  handlePopoverOpen\n}) => {\n  const classes = useStyles();\n  const filterProfile = useMemo(() => {\n    const profile = map(item === null || item === void 0 ? void 0 : item.messageProfile, option => {\n      var _option$profile$;\n\n      return option === null || option === void 0 ? void 0 : (_option$profile$ = option.profile[0]) === null || _option$profile$ === void 0 ? void 0 : _option$profile$.name;\n    });\n    return profile.join(' - ');\n  }, [item]);\n  return /*#__PURE__*/React.createElement(Card, {\n    className: classes.root,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    className: classes.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(I18n, {\n    as: Typography,\n    variant: \"h5\",\n    gutterBottom: true,\n    className: classes.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 13\n    }\n  }, \"last message\"), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    gutterBottom: true,\n    className: classes.title2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 13\n    }\n  }, item.title), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"subtitle2\",\n    gutterBottom: true,\n    className: clsx(classes.info, classes.title),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 15\n    }\n  }, filterProfile), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 15\n    }\n  }, formatBackDateToFriendlyFormat(item.expirationDate)))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    className: classes.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 11\n    }\n  }, (item === null || item === void 0 ? void 0 : item.content) && parse(item.content)))), /*#__PURE__*/React.createElement(CardActions, {\n    className: classes.buttons,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(I18n, {\n    as: Button,\n    color: \"success\",\n    variant: \"outlined\",\n    onClick: event => handlePopoverOpen(event, item.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }\n  }, \"read more\")));\n};\n\nMessageCard.propTypes = {\n  item: PropTypes.object.isRequired,\n  handlePopoverOpen: PropTypes.func\n};\nMessageCard.defaultProps = {\n  anchorEl: {},\n\n  handlePopoverOpen() {}\n\n};\nexport default MessageCard;","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/components/MessageCard/MessageCard.js"],"names":["React","useMemo","clsx","parse","PropTypes","map","Card","CardActions","CardContent","Grid","Typography","I18n","formatBackDateToFriendlyFormat","Button","useStyles","MessageCard","item","handlePopoverOpen","classes","filterProfile","profile","messageProfile","option","name","join","root","container","title","title2","info","expirationDate","content","buttons","event","id","propTypes","object","isRequired","func","defaultProps","anchorEl"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react'\n\nimport clsx from 'clsx'\nimport parse from 'html-react-parser'\nimport PropTypes from 'prop-types'\n\nimport map from 'lodash/map'\n\nimport Card from '@material-ui/core/Card'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\n\nimport I18n from '@britania-crm/i18n'\nimport { formatBackDateToFriendlyFormat } from '@britania-crm/utils/date'\nimport Button from '@britania-crm/web-components/Button'\n\nimport useStyles from './styles'\n\nconst MessageCard = ({ item, handlePopoverOpen }) => {\n  const classes = useStyles()\n\n  const filterProfile = useMemo(() => {\n    const profile = map(item?.messageProfile, (option) => option?.profile[0]?.name)\n    return profile.join(' - ')\n  }, [item])\n\n  return (\n    <Card className={ classes.root }>\n      <CardContent>\n        <Grid className={ classes.container }>\n          <Grid item xs={ 12 }>\n            <I18n as={ Typography } variant=\"h5\" gutterBottom className={ classes.title } >\n            last message\n            </I18n>\n            <Typography variant=\"h6\" gutterBottom className={ classes.title2 }>\n              {item.title}\n            </Typography>\n            <Typography\n              variant=\"subtitle2\"\n              gutterBottom\n              className={ clsx(classes.info, classes.title) }\n            >\n              <span>{filterProfile}</span>\n              <span>{formatBackDateToFriendlyFormat(item.expirationDate)}</span>\n            </Typography>\n          </Grid>\n          <Grid item xs={ 12 } className={ classes.content }>\n            {item?.content && parse(item.content)}\n          </Grid>\n        </Grid>\n      </CardContent>\n      <CardActions className={ classes.buttons }>\n        <I18n as={ Button } color=\"success\" variant=\"outlined\" onClick={ (event) => handlePopoverOpen(event, item.id) } >\n      read more\n        </I18n>\n      </CardActions>\n    </Card>\n  )\n}\n\nMessageCard.propTypes = {\n  item: PropTypes.object.isRequired,\n  handlePopoverOpen: PropTypes.func\n}\n\nMessageCard.defaultProps = {\n  anchorEl: {},\n  handlePopoverOpen () {}\n}\n\nexport default MessageCard\n"]},"metadata":{},"sourceType":"module"}