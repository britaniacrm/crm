{"ast":null,"code":"/**\n * Created by Samuel on 6/4/2016.\n * Simple wrapper functions to produce shorter UUIDs for cookies, maybe everything?\n */\nconst anyBase = require('any-base');\n\nconst uuidV4 = require('uuid').v4;\n\nconst flickrBase58 = '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ';\nconst cookieBase90 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%&'()*+-./:<=>?@[]^_`{|}~\";\nconst baseOptions = {\n  consistentLength: true\n}; // A default generator, instantiated only if used.\n\nlet toFlickr;\n/**\n * Takes a UUID, strips the dashes, and translates.\n * @param {string} longId\n * @param {function(string)} translator\n * @param {Object} [paddingParams]\n * @returns {string}\n */\n\nconst shortenUUID = (longId, translator, paddingParams) => {\n  const translated = translator(longId.toLowerCase().replace(/-/g, ''));\n  if (!paddingParams || !paddingParams.consistentLength) return translated;\n  return translated.padStart(paddingParams.shortIdLength, paddingParams.paddingChar);\n};\n/**\n * Translate back to hex and turn back into UUID format, with dashes\n * @param {string} shortId\n * @param {function(string)} translator\n * @returns {string}\n */\n\n\nconst enlargeUUID = (shortId, translator) => {\n  const uu1 = translator(shortId).padStart(32, '0'); // Join the zero padding and the UUID and then slice it up with match\n\n  const m = uu1.match(/(\\w{8})(\\w{4})(\\w{4})(\\w{4})(\\w{12})/); // Accumulate the matches and join them.\n\n  return [m[1], m[2], m[3], m[4], m[5]].join('-');\n}; // Calculate length for the shortened ID\n\n\nconst getShortIdLength = alphabetLength => Math.ceil(Math.log(2 ** 128) / Math.log(alphabetLength));\n\nmodule.exports = (() => {\n  /**\n   * @param {string} toAlphabet - Defaults to flickrBase58 if not provided\n   * @param {Object} [options]\n   *\n   * @returns {{new: (function()),\n   *  uuid: (function()),\n   *  fromUUID: (function(string)),\n   *  toUUID: (function(string)),\n   *  alphabet: (string)}}\n   */\n  const makeConvertor = (toAlphabet, options) => {\n    // Default to Flickr 58\n    const useAlphabet = toAlphabet || flickrBase58; // Default to baseOptions\n\n    const selectedOptions = { ...baseOptions,\n      ...options\n    }; // Check alphabet for duplicate entries\n\n    if ([...new Set(Array.from(useAlphabet))].length !== useAlphabet.length) {\n      throw new Error('The provided Alphabet has duplicate characters resulting in unreliable results');\n    }\n\n    const shortIdLength = getShortIdLength(useAlphabet.length); // Padding Params\n\n    const paddingParams = {\n      shortIdLength,\n      consistentLength: selectedOptions.consistentLength,\n      paddingChar: useAlphabet[0]\n    }; // UUIDs are in hex, so we translate to and from.\n\n    const fromHex = anyBase(anyBase.HEX, useAlphabet);\n    const toHex = anyBase(useAlphabet, anyBase.HEX);\n\n    const generate = () => shortenUUID(uuidV4(), fromHex, paddingParams);\n\n    const translator = {\n      new: generate,\n      generate,\n      uuid: uuidV4,\n      fromUUID: uuid => shortenUUID(uuid, fromHex, paddingParams),\n      toUUID: shortUuid => enlargeUUID(shortUuid, toHex),\n      alphabet: useAlphabet,\n      maxLength: shortIdLength\n    };\n    Object.freeze(translator);\n    return translator;\n  }; // Expose the constants for other purposes.\n\n\n  makeConvertor.constants = {\n    flickrBase58,\n    cookieBase90\n  }; // Expose the generic v4 UUID generator for convenience\n\n  makeConvertor.uuid = uuidV4; // Provide a generic generator\n\n  makeConvertor.generate = () => {\n    if (!toFlickr) {\n      // Generate on first use;\n      toFlickr = makeConvertor(flickrBase58).generate;\n    }\n\n    return toFlickr();\n  };\n\n  return makeConvertor;\n})();","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/node_modules/short-uuid/index.js"],"names":["anyBase","require","uuidV4","v4","flickrBase58","cookieBase90","baseOptions","consistentLength","toFlickr","shortenUUID","longId","translator","paddingParams","translated","toLowerCase","replace","padStart","shortIdLength","paddingChar","enlargeUUID","shortId","uu1","m","match","join","getShortIdLength","alphabetLength","Math","ceil","log","module","exports","makeConvertor","toAlphabet","options","useAlphabet","selectedOptions","Set","Array","from","length","Error","fromHex","HEX","toHex","generate","new","uuid","fromUUID","toUUID","shortUuid","alphabet","maxLength","Object","freeze","constants"],"mappings":"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","sourcesContent":["/**\n * Created by Samuel on 6/4/2016.\n * Simple wrapper functions to produce shorter UUIDs for cookies, maybe everything?\n */\n\nconst anyBase = require('any-base');\nconst uuidV4 = require('uuid').v4;\n\nconst flickrBase58 = '123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ';\nconst cookieBase90 = \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!#$%&'()*+-./:<=>?@[]^_`{|}~\";\n\nconst baseOptions = {\n  consistentLength: true,\n};\n\n// A default generator, instantiated only if used.\nlet toFlickr;\n\n/**\n * Takes a UUID, strips the dashes, and translates.\n * @param {string} longId\n * @param {function(string)} translator\n * @param {Object} [paddingParams]\n * @returns {string}\n */\nconst shortenUUID = (longId, translator, paddingParams) => {\n  const translated = translator(longId.toLowerCase().replace(/-/g, ''));\n\n  if (!paddingParams || !paddingParams.consistentLength) return translated;\n\n  return translated.padStart(\n    paddingParams.shortIdLength,\n    paddingParams.paddingChar,\n  );\n};\n\n/**\n * Translate back to hex and turn back into UUID format, with dashes\n * @param {string} shortId\n * @param {function(string)} translator\n * @returns {string}\n */\nconst enlargeUUID = (shortId, translator) => {\n  const uu1 = translator(shortId).padStart(32, '0');\n\n  // Join the zero padding and the UUID and then slice it up with match\n  const m = uu1.match(/(\\w{8})(\\w{4})(\\w{4})(\\w{4})(\\w{12})/);\n\n  // Accumulate the matches and join them.\n  return [m[1], m[2], m[3], m[4], m[5]].join('-');\n};\n\n// Calculate length for the shortened ID\nconst getShortIdLength = (alphabetLength) => (\n  Math.ceil(Math.log(2 ** 128) / Math.log(alphabetLength)));\n\nmodule.exports = (() => {\n  /**\n   * @param {string} toAlphabet - Defaults to flickrBase58 if not provided\n   * @param {Object} [options]\n   *\n   * @returns {{new: (function()),\n   *  uuid: (function()),\n   *  fromUUID: (function(string)),\n   *  toUUID: (function(string)),\n   *  alphabet: (string)}}\n   */\n  const makeConvertor = (toAlphabet, options) => {\n    // Default to Flickr 58\n    const useAlphabet = toAlphabet || flickrBase58;\n\n    // Default to baseOptions\n    const selectedOptions = { ...baseOptions, ...options };\n\n    // Check alphabet for duplicate entries\n    if ([...new Set(Array.from(useAlphabet))].length !== useAlphabet.length) {\n      throw new Error('The provided Alphabet has duplicate characters resulting in unreliable results');\n    }\n\n    const shortIdLength = getShortIdLength(useAlphabet.length);\n\n    // Padding Params\n    const paddingParams = {\n      shortIdLength,\n      consistentLength: selectedOptions.consistentLength,\n      paddingChar: useAlphabet[0],\n    };\n\n    // UUIDs are in hex, so we translate to and from.\n    const fromHex = anyBase(anyBase.HEX, useAlphabet);\n    const toHex = anyBase(useAlphabet, anyBase.HEX);\n    const generate = () => shortenUUID(uuidV4(), fromHex, paddingParams);\n\n    const translator = {\n      new: generate,\n      generate,\n      uuid: uuidV4,\n      fromUUID: (uuid) => shortenUUID(uuid, fromHex, paddingParams),\n      toUUID: (shortUuid) => enlargeUUID(shortUuid, toHex),\n      alphabet: useAlphabet,\n      maxLength: shortIdLength,\n    };\n\n    Object.freeze(translator);\n\n    return translator;\n  };\n\n  // Expose the constants for other purposes.\n  makeConvertor.constants = {\n    flickrBase58,\n    cookieBase90,\n  };\n\n  // Expose the generic v4 UUID generator for convenience\n  makeConvertor.uuid = uuidV4;\n\n  // Provide a generic generator\n  makeConvertor.generate = () => {\n    if (!toFlickr) {\n      // Generate on first use;\n      toFlickr = makeConvertor(flickrBase58).generate;\n    }\n    return toFlickr();\n  };\n\n  return makeConvertor;\n})();\n"]},"metadata":{},"sourceType":"script"}