{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/core/forms/src/providers/FormProvider.js\";\nimport React, { forwardRef, useRef, useImperativeHandle, useCallback, useState, useMemo, useEffect } from 'react';\nimport { useT } from '@meta-react/i18n';\nimport PropTypes from 'prop-types';\nimport debounce from 'lodash/debounce';\nimport first from 'lodash/first';\nimport forEach from 'lodash/forEach';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport isEqual from 'lodash/isEqual';\nimport isFunction from 'lodash/isFunction';\nimport reduce from 'lodash/reduce';\nimport set from 'lodash/set';\nimport { VALIDATION_FAILED } from '@britania-crm/constants/asyncFormValidation';\nimport { FormContext } from '../hooks/useForm';\nimport reloadSchemaUtils from '../utils/reloadSchema';\nimport removeEmptyValues from '../utils/removeEmptyValues';\nimport validateDataBySchema from '../utils/validateDataBySchema';\nconst FormProvider = forwardRef((props, formRef) => {\n  const {\n    UnformComponent,\n    schemaConstructor,\n    schemaProps,\n    resetOnSubmit,\n    onSubmit,\n    defaultValues: initialValues,\n    children,\n    filterEmptyValues,\n    onInvalidForm,\n    ...otherProps\n  } = props;\n  const t = useT();\n  const unformRef = useRef(null);\n  const fields = useRef([]);\n  const fieldsOrderCounter = useRef(0);\n  const fieldsZIndexCounter = useRef(100);\n  const [schema, setSchema] = useState({});\n  const defaultValues = useMemo(() => {\n    try {\n      return JSON.parse(JSON.stringify(initialValues));\n    } catch (e) {\n      console.warn('Cannot convert defaultValues into json', e);\n      return {};\n    }\n  }, [initialValues]);\n  const needSchema = useMemo(() => !!schemaConstructor, [schemaConstructor]); // intercepting unform setFieldValue\n\n  const setFieldValue = useCallback((fieldName, value, ...other) => {\n    const doSetFieldValue = val => {\n      const fieldRef = formRef.current.getFieldRef(fieldName);\n      let changed = false;\n\n      if ((fieldRef === null || fieldRef === void 0 ? void 0 : fieldRef.setValue) && !isEqual(fieldRef === null || fieldRef === void 0 ? void 0 : fieldRef.value, val)) {\n        fieldRef.setValue(val);\n        changed = true;\n      } // force unform field update\n\n\n      const unformRefValue = unformRef.current.getFieldValue(fieldName);\n\n      if (!isEqual(val, unformRefValue)) {\n        unformRef.current.setFieldValue(fieldName, val);\n      }\n\n      if (changed && fieldRef.externalOnChange) {\n        fieldRef.externalOnChange({\n          target: {\n            value: val\n          }\n        }, ...other);\n      }\n\n      if (changed && (fieldRef === null || fieldRef === void 0 ? void 0 : fieldRef.touched) && (fieldRef === null || fieldRef === void 0 ? void 0 : fieldRef.validateField())) {\n        fieldRef.validateField();\n      }\n    };\n\n    const makeSetFieldValue = () => {\n      if (isFunction(value)) {\n        const data = formRef.current.getFieldValue(fieldName);\n        doSetFieldValue(value(data));\n      } else {\n        doSetFieldValue(value);\n      }\n    };\n\n    if (formRef === null || formRef === void 0 ? void 0 : formRef.current) {\n      makeSetFieldValue();\n    } else {\n      setTimeout(makeSetFieldValue, 100);\n    }\n  }, [formRef]); // intercepting and changing unform clearField\n\n  const clearField = useCallback(fieldName => {\n    const fieldRef = formRef.current.getFieldRef(fieldName);\n\n    if (fieldRef && fieldRef.setValue && !isEqual(fieldRef.value, fieldRef.defaultValue)) {\n      fieldRef.setValue(fieldRef.defaultValue);\n    } // force unform field update\n\n\n    const unformRefValue = unformRef.current.getFieldValue(fieldName);\n\n    if (!isEqual(fieldRef.defaultValue, unformRefValue)) {\n      unformRef.current.setFieldValue(fieldName, fieldRef.defaultValue);\n    }\n  }, [formRef]); // intercepting and changing unform reset\n\n  const reset = useCallback(() => {\n    forEach(fields.current, fieldName => {\n      const fieldRef = formRef.current.getFieldRef(fieldName);\n\n      if (fieldRef.resetField) {\n        fieldRef.resetField();\n      }\n    });\n  }, [formRef]);\n  const getFieldOrder = useCallback(() => {\n    fieldsOrderCounter.current += 1;\n    const order = fieldsOrderCounter.current;\n    return order;\n  }, []);\n  const getFieldZIndex = useCallback(() => {\n    const zIndex = fieldsZIndexCounter.current;\n    fieldsZIndexCounter.current -= 1;\n    return zIndex;\n  }, []);\n  const getFieldError = useCallback(fieldName => unformRef.current.getFieldError(fieldName), []);\n  const getErrors = useCallback(() => unformRef.current.getErrors(), []);\n  const setFieldError = useCallback(debounce((fieldName, error) => {\n    const oldError = formRef.current.getFieldError(fieldName);\n\n    if (!isEqual(error, oldError)) {\n      unformRef.current.setFieldError(fieldName, error);\n    }\n  }, 100), [formRef]);\n  const setErrors = useCallback((errors, parse) => {\n    unformRef.current.setErrors(errors, parse);\n  }, []);\n  const normalizeFormErrors = useCallback(errors => {\n    let objErrors = {};\n    forEach(errors, (message, name) => {\n      const fieldRef = formRef.current.getFieldRef(name);\n\n      if (fieldRef) {\n        objErrors = { ...objErrors,\n          [name]: message\n        };\n      } else {\n        set(objErrors, name, message);\n      }\n    });\n    return objErrors;\n  }, [formRef]);\n  const handleSubmit = useCallback(async data => {\n    try {\n      if (!isEmpty(schema)) {\n        await validateDataBySchema({\n          data,\n          schema\n        });\n      }\n\n      const values = (() => {\n        const submittedValues = { ...defaultValues,\n          ...data\n        };\n\n        if (filterEmptyValues) {\n          return removeEmptyValues(submittedValues);\n        }\n\n        return submittedValues;\n      })();\n\n      onSubmit(values);\n\n      if (resetOnSubmit) {\n        reset();\n      }\n    } catch (err) {\n      console.error('submit form error:', err, data);\n\n      if (err.formError) {\n        const objErrors = normalizeFormErrors(err.messages);\n        formRef.current.setErrors(objErrors, false);\n        onInvalidForm(objErrors);\n      } else {\n        onInvalidForm(err);\n      }\n    }\n  }, [defaultValues, filterEmptyValues, formRef, normalizeFormErrors, onInvalidForm, onSubmit, reset, resetOnSubmit, schema]);\n  const getData = useCallback(() => {\n    const data = { ...defaultValues\n    };\n    forEach(fields.current, fieldName => {\n      set(data, fieldName, formRef.current.getFieldValue(fieldName));\n    });\n\n    if (filterEmptyValues) {\n      return removeEmptyValues(data);\n    }\n\n    return data;\n  }, [defaultValues, filterEmptyValues, formRef]); // intercepting and changing unform setData\n\n  const setData = useCallback(values => {\n    const doSetData = vals => {\n      var _formRef$current;\n\n      forEach(fields.current, fieldName => {\n        const newFieldValue = get(vals, fieldName);\n\n        if (newFieldValue !== undefined && newFieldValue !== null) {\n          const fieldRef = formRef.current.getFieldRef(fieldName);\n\n          if (fieldRef.setValue) {\n            fieldRef.setValue(newFieldValue);\n          }\n        }\n      });\n\n      if ((_formRef$current = formRef.current) === null || _formRef$current === void 0 ? void 0 : _formRef$current.setErrors) {\n        formRef.current.setErrors({});\n      }\n    };\n\n    setTimeout(() => {\n      if (isFunction(values)) {\n        const data = formRef.current.getData();\n        doSetData(values(data));\n      } else {\n        doSetData(values);\n      }\n    }, 100);\n  }, [formRef]);\n  const setFieldTouched = useCallback(fieldName => new Promise(resolve => {\n    const fieldRef = formRef.current.getFieldRef(fieldName);\n\n    if (fieldRef.setTouched) {\n      fieldRef.setTouched(true);\n    }\n\n    setTimeout(resolve, 400);\n  }), [formRef]);\n  const submit = useCallback(() => {\n    const data = formRef.current.getData();\n    handleSubmit(data);\n  }, [formRef, handleSubmit]);\n  const registerFieldName = useCallback(fieldName => {\n    fields.current.push(fieldName);\n  }, []);\n  const unregisterFieldName = useCallback(fieldName => {\n    fields.current = fields.current.filter(field => field !== fieldName);\n  }, []);\n  const createSchema = useCallback(() => {\n    var _formRef$current2;\n\n    if (schemaConstructor && (formRef === null || formRef === void 0 ? void 0 : (_formRef$current2 = formRef.current) === null || _formRef$current2 === void 0 ? void 0 : _formRef$current2.getData)) {\n      const data = formRef.current.getData();\n      const newSchema = schemaConstructor({\n        t,\n        data,\n        props: schemaProps\n      });\n      setSchema(newSchema);\n      return newSchema;\n    }\n\n    return {};\n  }, [formRef, schemaConstructor, schemaProps, t]);\n  const validateField = useCallback(fieldName => {\n    const fieldRef = formRef.current.getFieldRef(fieldName);\n\n    if (fieldRef.validateField) {\n      return fieldRef.validateField();\n    }\n  }, [formRef]);\n  const reloadSchema = useCallback(({\n    reset = false,\n    callback\n  } = {}) => setTimeout(() => {\n    if (reset) {\n      formRef.current.setErrors({});\n    }\n\n    reloadSchemaUtils(formRef, callback);\n  }, 100), [formRef]);\n  const setSubmitError = useCallback(debounce((submitError = {}) => {\n    if (submitError.response.data.errorCode === VALIDATION_FAILED) {\n      // it is a form error from backend response\n      let objErrors = reduce(submitError.response.data.details, (acc, error) => ({ ...acc,\n        [error.field]: first(error.messages)\n      }), {});\n      objErrors = normalizeFormErrors(objErrors);\n      formRef.current.setErrors(objErrors, false);\n      onInvalidForm(objErrors);\n    }\n  }, 200), [formRef, normalizeFormErrors]);\n  const imperativeHandles = useMemo(() => ({\n    createSchema,\n    reloadSchema,\n    setFieldValue,\n    submit,\n    registerFieldName,\n    unregisterFieldName,\n    getData,\n    setData,\n    clearField,\n    reset,\n    validateField,\n    setFieldTouched,\n    setFieldError,\n    getFieldError,\n    setErrors,\n    getErrors,\n    setSubmitError\n  }), [clearField, createSchema, getData, getErrors, getFieldError, registerFieldName, reloadSchema, reset, setData, setErrors, setFieldError, setFieldTouched, setFieldValue, setSubmitError, submit, unregisterFieldName, validateField]);\n  useEffect(() => {\n    createSchema();\n  }, [createSchema]);\n  useImperativeHandle(formRef, () => ({ ...unformRef.current,\n    ...imperativeHandles\n  }));\n  const state = useMemo(() => ({\n    formRef,\n    schema,\n    needSchema,\n    registerFieldName,\n    unregisterFieldName,\n    getFieldZIndex,\n    getFieldOrder,\n    defaultValues\n  }), [defaultValues, formRef, getFieldOrder, getFieldZIndex, needSchema, registerFieldName, schema, unregisterFieldName]);\n  return /*#__PURE__*/React.createElement(UnformComponent, Object.assign({\n    ref: unformRef,\n    onSubmit: handleSubmit\n  }, otherProps, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 435,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(FormContext.Provider, {\n    value: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 440,\n      columnNumber: 7\n    }\n  }, (!isEmpty(schema) || !schemaConstructor) && children));\n});\nFormProvider.propTypes = {\n  /** function that return the schema to control the form validations */\n  schemaConstructor: PropTypes.func,\n\n  /** bind dynamically options to schema constructor */\n  schemaProps: PropTypes.object,\n\n  /** function called when form pass the validations and it is submitted */\n  onSubmit: PropTypes.func.isRequired,\n\n  /** specific Form component from @unform/mobile or @unform/web */\n  UnformComponent: PropTypes.oneOfType([PropTypes.func, PropTypes.object]).isRequired,\n  children: PropTypes.any,\n  resetOnSubmit: PropTypes.bool,\n  defaultValues: PropTypes.object,\n  filterEmptyValues: PropTypes.bool,\n  onInvalidForm: PropTypes.func\n};\nFormProvider.defaultProps = {\n  children: null,\n  schemaConstructor: undefined,\n  schemaProps: {},\n  resetOnSubmit: false,\n  defaultValues: {},\n  filterEmptyValues: false,\n\n  onInvalidForm() {}\n\n};\nexport default FormProvider;","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/core/forms/src/providers/FormProvider.js"],"names":["React","forwardRef","useRef","useImperativeHandle","useCallback","useState","useMemo","useEffect","useT","PropTypes","debounce","first","forEach","get","isEmpty","isEqual","isFunction","reduce","set","VALIDATION_FAILED","FormContext","reloadSchemaUtils","removeEmptyValues","validateDataBySchema","FormProvider","props","formRef","UnformComponent","schemaConstructor","schemaProps","resetOnSubmit","onSubmit","defaultValues","initialValues","children","filterEmptyValues","onInvalidForm","otherProps","t","unformRef","fields","fieldsOrderCounter","fieldsZIndexCounter","schema","setSchema","JSON","parse","stringify","e","console","warn","needSchema","setFieldValue","fieldName","value","other","doSetFieldValue","val","fieldRef","current","getFieldRef","changed","setValue","unformRefValue","getFieldValue","externalOnChange","target","touched","validateField","makeSetFieldValue","data","setTimeout","clearField","defaultValue","reset","resetField","getFieldOrder","order","getFieldZIndex","zIndex","getFieldError","getErrors","setFieldError","error","oldError","setErrors","errors","normalizeFormErrors","objErrors","message","name","handleSubmit","values","submittedValues","err","formError","messages","getData","setData","doSetData","vals","newFieldValue","undefined","setFieldTouched","Promise","resolve","setTouched","submit","registerFieldName","push","unregisterFieldName","filter","field","createSchema","newSchema","reloadSchema","callback","setSubmitError","submitError","response","errorCode","details","acc","imperativeHandles","state","propTypes","func","object","isRequired","oneOfType","any","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, {\n  forwardRef,\n  useRef,\n  useImperativeHandle,\n  useCallback,\n  useState,\n  useMemo,\n  useEffect\n} from 'react'\n\nimport { useT } from '@meta-react/i18n'\nimport PropTypes from 'prop-types'\n\nimport debounce from 'lodash/debounce'\nimport first from 'lodash/first'\nimport forEach from 'lodash/forEach'\nimport get from 'lodash/get'\nimport isEmpty from 'lodash/isEmpty'\nimport isEqual from 'lodash/isEqual'\nimport isFunction from 'lodash/isFunction'\nimport reduce from 'lodash/reduce'\nimport set from 'lodash/set'\n\nimport { VALIDATION_FAILED } from '@britania-crm/constants/asyncFormValidation'\n\nimport { FormContext } from '../hooks/useForm'\nimport reloadSchemaUtils from '../utils/reloadSchema'\nimport removeEmptyValues from '../utils/removeEmptyValues'\nimport validateDataBySchema from '../utils/validateDataBySchema'\n\nconst FormProvider = forwardRef((props, formRef) => {\n  const {\n    UnformComponent,\n    schemaConstructor,\n    schemaProps,\n    resetOnSubmit,\n    onSubmit,\n    defaultValues: initialValues,\n    children,\n    filterEmptyValues,\n    onInvalidForm,\n    ...otherProps\n  } = props\n\n  const t = useT()\n\n  const unformRef = useRef(null)\n  const fields = useRef([])\n  const fieldsOrderCounter = useRef(0)\n  const fieldsZIndexCounter = useRef(100)\n\n  const [schema, setSchema] = useState({})\n\n  const defaultValues = useMemo(\n    () => {\n      try {\n        return JSON.parse(JSON.stringify(initialValues))\n      } catch (e) {\n        console.warn('Cannot convert defaultValues into json', e)\n        return {}\n      }\n    },\n    [initialValues]\n  )\n\n  const needSchema = useMemo(\n    () => !!schemaConstructor,\n    [schemaConstructor]\n  )\n\n  // intercepting unform setFieldValue\n  const setFieldValue = useCallback(\n    (fieldName, value, ...other) => {\n      const doSetFieldValue = (val) => {\n        const fieldRef = formRef.current.getFieldRef(fieldName)\n        let changed = false\n\n        if (fieldRef?.setValue && !isEqual(fieldRef?.value, val)) {\n          fieldRef.setValue(val)\n          changed = true\n        }\n        // force unform field update\n        const unformRefValue = unformRef.current.getFieldValue(fieldName)\n        if (!isEqual(val, unformRefValue)) {\n          unformRef.current.setFieldValue(fieldName, val)\n        }\n        if (changed && fieldRef.externalOnChange) {\n          fieldRef.externalOnChange({ target: { value: val } }, ...other)\n        }\n        if (changed && fieldRef?.touched && fieldRef?.validateField()) {\n          fieldRef.validateField()\n        }\n      }\n\n      const makeSetFieldValue = () => {\n        if (isFunction(value)) {\n          const data = formRef.current.getFieldValue(fieldName)\n          doSetFieldValue(value(data))\n        } else {\n          doSetFieldValue(value)\n        }\n      }\n\n      if (formRef?.current) {\n        makeSetFieldValue()\n      } else {\n        setTimeout(makeSetFieldValue, 100)\n      }\n    },\n    [formRef]\n  )\n\n  // intercepting and changing unform clearField\n  const clearField = useCallback(\n    (fieldName) => {\n      const fieldRef = formRef.current.getFieldRef(fieldName)\n      if (\n        fieldRef &&\n        fieldRef.setValue &&\n        !isEqual(fieldRef.value, fieldRef.defaultValue)\n      ) {\n        fieldRef.setValue(fieldRef.defaultValue)\n      }\n      // force unform field update\n      const unformRefValue = unformRef.current.getFieldValue(fieldName)\n      if (!isEqual(fieldRef.defaultValue, unformRefValue)) {\n        unformRef.current.setFieldValue(fieldName, fieldRef.defaultValue)\n      }\n    },\n    [formRef]\n  )\n\n  // intercepting and changing unform reset\n  const reset = useCallback(\n    () => {\n      forEach(fields.current, (fieldName) => {\n        const fieldRef = formRef.current.getFieldRef(fieldName)\n        if (fieldRef.resetField) {\n          fieldRef.resetField()\n        }\n      })\n    },\n    [formRef]\n  )\n\n  const getFieldOrder = useCallback(\n    () => {\n      fieldsOrderCounter.current += 1\n      const order = fieldsOrderCounter.current\n      return order\n    },\n    []\n  )\n\n  const getFieldZIndex = useCallback(\n    () => {\n      const zIndex = fieldsZIndexCounter.current\n      fieldsZIndexCounter.current -= 1\n      return zIndex\n    },\n    []\n  )\n\n  const getFieldError = useCallback(\n    (fieldName) => unformRef.current.getFieldError(fieldName),\n    []\n  )\n\n  const getErrors = useCallback(\n    () => unformRef.current.getErrors(),\n    []\n  )\n\n  const setFieldError = useCallback(\n    debounce(\n      (fieldName, error) => {\n        const oldError = formRef.current.getFieldError(fieldName)\n        if (!isEqual(error, oldError)) {\n          unformRef.current.setFieldError(fieldName, error)\n        }\n      },\n      100\n    ),\n    [formRef]\n  )\n\n  const setErrors = useCallback(\n    (errors, parse) => {\n      unformRef.current.setErrors(errors, parse)\n    },\n    []\n  )\n\n  const normalizeFormErrors = useCallback(\n    (errors) => {\n      let objErrors = {}\n      forEach(errors, (message, name) => {\n        const fieldRef = formRef.current.getFieldRef(name)\n        if (fieldRef) {\n          objErrors = {\n            ...objErrors,\n            [name]: message\n          }\n        } else {\n          set(objErrors, name, message)\n        }\n      })\n      return objErrors\n    },\n    [formRef]\n  )\n\n  const handleSubmit = useCallback(\n    async (data) => {\n      try {\n        if (!isEmpty(schema)) {\n          await validateDataBySchema({ data, schema })\n        }\n\n        const values = (() => {\n          const submittedValues = {\n            ...defaultValues,\n            ...data\n          }\n          if (filterEmptyValues) {\n            return removeEmptyValues(submittedValues)\n          }\n          return submittedValues\n        })()\n\n        onSubmit(values)\n        if (resetOnSubmit) {\n          reset()\n        }\n      } catch (err) {\n        console.error('submit form error:', err, data)\n        if (err.formError) {\n          const objErrors = normalizeFormErrors(err.messages)\n          formRef.current.setErrors(objErrors, false)\n          onInvalidForm(objErrors)\n        } else {\n          onInvalidForm(err)\n        }\n      }\n    },\n    [defaultValues, filterEmptyValues, formRef, normalizeFormErrors, onInvalidForm, onSubmit, reset, resetOnSubmit, schema]\n  )\n\n  const getData = useCallback(\n    () => {\n      const data = { ...defaultValues }\n      forEach(fields.current, (fieldName) => {\n        set(data, fieldName, formRef.current.getFieldValue(fieldName))\n      })\n      if (filterEmptyValues) {\n        return removeEmptyValues(data)\n      }\n      return data\n    },\n    [defaultValues, filterEmptyValues, formRef]\n  )\n\n  // intercepting and changing unform setData\n  const setData = useCallback(\n    (values) => {\n      const doSetData = (vals) => {\n        forEach(fields.current, (fieldName) => {\n          const newFieldValue = get(vals, fieldName)\n          if (newFieldValue !== undefined && newFieldValue !== null) {\n            const fieldRef = formRef.current.getFieldRef(fieldName)\n            if (fieldRef.setValue) {\n              fieldRef.setValue(newFieldValue)\n            }\n          }\n        })\n        if (formRef.current?.setErrors) {\n          formRef.current.setErrors({})\n        }\n      }\n\n      setTimeout(() => {\n        if (isFunction(values)) {\n          const data = formRef.current.getData()\n          doSetData(values(data))\n        } else {\n          doSetData(values)\n        }\n      }, 100)\n    },\n    [formRef]\n  )\n\n  const setFieldTouched = useCallback(\n    (fieldName) => new Promise((resolve) => {\n      const fieldRef = formRef.current.getFieldRef(fieldName)\n      if (fieldRef.setTouched) {\n        fieldRef.setTouched(true)\n      }\n\n      setTimeout(resolve, 400)\n    }),\n    [formRef]\n  )\n\n  const submit = useCallback(\n    () => {\n      const data = formRef.current.getData()\n      handleSubmit(data)\n    },\n    [formRef, handleSubmit]\n  )\n\n  const registerFieldName = useCallback(\n    (fieldName) => {\n      fields.current.push(fieldName)\n    },\n    []\n  )\n\n  const unregisterFieldName = useCallback(\n    (fieldName) => {\n      fields.current = fields.current.filter((field) => field !== fieldName)\n    },\n    []\n  )\n\n  const createSchema = useCallback(\n    () => {\n      if (schemaConstructor && formRef?.current?.getData) {\n        const data = formRef.current.getData()\n        const newSchema = schemaConstructor({\n          t, data, props: schemaProps\n        })\n        setSchema(newSchema)\n        return newSchema\n      }\n      return {}\n    },\n    [formRef, schemaConstructor, schemaProps, t]\n  )\n\n  const validateField = useCallback(\n    (fieldName) => {\n      const fieldRef = formRef.current.getFieldRef(fieldName)\n      if (fieldRef.validateField) {\n        return fieldRef.validateField()\n      }\n    },\n    [formRef]\n  )\n\n  const reloadSchema = useCallback(\n    ({ reset = false, callback } = {}) => setTimeout(\n      () => {\n        if (reset) {\n          formRef.current.setErrors({})\n        }\n        reloadSchemaUtils(formRef, callback)\n      },\n      100\n    ),\n    [formRef]\n  )\n\n  const setSubmitError = useCallback(\n    debounce(\n      (submitError = {}) => {\n        if (submitError.response.data.errorCode === VALIDATION_FAILED) {\n          // it is a form error from backend response\n          let objErrors = reduce(\n            submitError.response.data.details,\n            (acc, error) => ({\n              ...acc,\n              [error.field]: first(error.messages)\n            }),\n            {}\n          )\n          objErrors = normalizeFormErrors(objErrors)\n          formRef.current.setErrors(objErrors, false)\n          onInvalidForm(objErrors)\n        }\n      },\n      200\n    ),\n    [formRef, normalizeFormErrors]\n  )\n\n  const imperativeHandles = useMemo(\n    () => ({\n      createSchema,\n      reloadSchema,\n      setFieldValue,\n      submit,\n      registerFieldName,\n      unregisterFieldName,\n      getData,\n      setData,\n      clearField,\n      reset,\n      validateField,\n      setFieldTouched,\n      setFieldError,\n      getFieldError,\n      setErrors,\n      getErrors,\n      setSubmitError\n    }),\n    [clearField, createSchema, getData, getErrors, getFieldError, registerFieldName, reloadSchema, reset, setData, setErrors, setFieldError, setFieldTouched, setFieldValue, setSubmitError, submit, unregisterFieldName, validateField]\n  )\n\n  useEffect(() => {\n    createSchema()\n  }, [createSchema])\n\n  useImperativeHandle(formRef, () => ({\n    ...unformRef.current,\n    ...imperativeHandles\n  }))\n\n  const state = useMemo(\n    () => ({\n      formRef,\n      schema,\n      needSchema,\n      registerFieldName,\n      unregisterFieldName,\n      getFieldZIndex,\n      getFieldOrder,\n      defaultValues\n    }),\n    [defaultValues, formRef, getFieldOrder, getFieldZIndex, needSchema, registerFieldName, schema, unregisterFieldName]\n  )\n\n  return (\n    <UnformComponent\n      ref={ unformRef }\n      onSubmit={ handleSubmit }\n      { ...otherProps }\n    >\n      <FormContext.Provider value={ state }>\n        {(!isEmpty(schema) || !schemaConstructor) && children}\n      </FormContext.Provider>\n    </UnformComponent>\n  )\n})\n\nFormProvider.propTypes = {\n  /** function that return the schema to control the form validations */\n  schemaConstructor: PropTypes.func,\n  /** bind dynamically options to schema constructor */\n  schemaProps: PropTypes.object,\n  /** function called when form pass the validations and it is submitted */\n  onSubmit: PropTypes.func.isRequired,\n  /** specific Form component from @unform/mobile or @unform/web */\n  UnformComponent: PropTypes.oneOfType([\n    PropTypes.func,\n    PropTypes.object\n  ]).isRequired,\n  children: PropTypes.any,\n  resetOnSubmit: PropTypes.bool,\n  defaultValues: PropTypes.object,\n  filterEmptyValues: PropTypes.bool,\n  onInvalidForm: PropTypes.func\n}\n\nFormProvider.defaultProps = {\n  children: null,\n  schemaConstructor: undefined,\n  schemaProps: {},\n  resetOnSubmit: false,\n  defaultValues: {},\n  filterEmptyValues: false,\n  onInvalidForm () {}\n}\nexport default FormProvider\n"]},"metadata":{},"sourceType":"module"}