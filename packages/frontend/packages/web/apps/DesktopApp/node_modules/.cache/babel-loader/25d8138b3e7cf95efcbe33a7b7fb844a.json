{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/src/layouts/MainLayout/components/TabsNavigation/Reminder.js\";\nimport React, { memo, useRef, useState, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Rnd as ReminderContainerDraggable } from 'react-rnd';\nimport PropTypes from 'prop-types';\nimport debounce from 'lodash/debounce';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport MinimizeIcon from '@material-ui/icons/Minimize';\nimport { AppActions } from '@britania-crm/stores/app';\nimport { selectRemindersCount, selectDisableDrag } from '@britania-crm/stores/app/app.selectors';\nimport { HeaderContainer, InputContainer } from './styled';\n\nconst Reminder = ({\n  show,\n  reminder,\n  handleMinimize,\n  handleClose\n}) => {\n  const dispatch = useDispatch();\n  const textAreaRef = useRef(null);\n  const [positions, setPositions] = useState({\n    x: 40,\n    y: 60\n  });\n  const quantityReminders = useSelector(selectRemindersCount);\n  const disableDrag = useSelector(selectDisableDrag);\n  const MIN_Z_INDEX_VALUE = 1700;\n  const WIDTH_DEFAULT = 360;\n  const HEIGHT_DEFAULT = 280;\n  const saveReminderText = useCallback(debounce(({\n    content,\n    reminderId\n  }) => {\n    dispatch(AppActions.saveReminder(content, reminderId));\n  }, 500), []);\n  return /*#__PURE__*/React.createElement(ReminderContainerDraggable, {\n    style: {\n      position: 'absolute',\n      zIndex: reminder.topLayer ? quantityReminders + MIN_Z_INDEX_VALUE : MIN_Z_INDEX_VALUE,\n      borderRadius: '25px',\n      visibility: show ? 'visible' : 'hidden',\n      boxShadow: '16px 36px 16px 16px rgba(0, 0, 0, 0.1)'\n    },\n    onDragStop: (event, d) => setPositions({\n      x: d.x,\n      y: d.y < -80 ? -60 : d.y\n    }),\n    enableResizing: false,\n    disableDragging: disableDrag,\n    position: {\n      x: positions.x,\n      y: positions.y\n    },\n    size: {\n      width: WIDTH_DEFAULT,\n      height: HEIGHT_DEFAULT\n    },\n    onMouseDown: event => {\n      event.stopPropagation();\n      /**\n       * Faz com que esse lembrate fique por cima de todos os outros.\n       */\n\n      dispatch(AppActions.selectReminderToTopLayer(reminder.id));\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(HeaderContainer, {\n    onMouseOver: () => dispatch(AppActions.changeDragStatusRememberContainer(false)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }\n  }, \"Lembrete #\", reminder.id), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: () => handleMinimize({\n      reminderId: reminder.id,\n      minimize: true\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(MinimizeIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"button\",\n    onClick: event => handleClose(event, reminder.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ClearIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(InputContainer, {\n    onMouseOver: () => dispatch(AppActions.changeDragStatusRememberContainer(false)),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"textarea\", {\n    onMouseOver: event => {\n      event.stopPropagation();\n      dispatch(AppActions.changeDragStatusRememberContainer(true));\n    },\n    ref: textAreaRef,\n    name: \"reminderText\",\n    rows: \"12\",\n    maxLength: \"4000\",\n    defaultValue: reminder.content,\n    onKeyUp: () => saveReminderText({\n      content: textAreaRef.current.value,\n      reminderId: reminder.id\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 9\n    }\n  })));\n};\n\nReminder.propTypes = {\n  handleClose: PropTypes.func.isRequired,\n  handleMinimize: PropTypes.func.isRequired,\n  reminder: PropTypes.object.isRequired,\n  show: PropTypes.bool.isRequired\n};\nexport default memo(Reminder);","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/src/layouts/MainLayout/components/TabsNavigation/Reminder.js"],"names":["React","memo","useRef","useState","useCallback","useDispatch","useSelector","Rnd","ReminderContainerDraggable","PropTypes","debounce","ClearIcon","MinimizeIcon","AppActions","selectRemindersCount","selectDisableDrag","HeaderContainer","InputContainer","Reminder","show","reminder","handleMinimize","handleClose","dispatch","textAreaRef","positions","setPositions","x","y","quantityReminders","disableDrag","MIN_Z_INDEX_VALUE","WIDTH_DEFAULT","HEIGHT_DEFAULT","saveReminderText","content","reminderId","saveReminder","position","zIndex","topLayer","borderRadius","visibility","boxShadow","event","d","width","height","stopPropagation","selectReminderToTopLayer","id","changeDragStatusRememberContainer","minimize","current","value","propTypes","func","isRequired","object","bool"],"mappings":"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","sourcesContent":["import React, {\n  memo,\n  useRef,\n  useState,\n  useCallback\n} from 'react'\nimport {\n  useDispatch,\n  useSelector\n} from 'react-redux'\nimport { Rnd as ReminderContainerDraggable } from 'react-rnd'\n\nimport PropTypes from 'prop-types'\n\nimport debounce from 'lodash/debounce'\n\nimport ClearIcon from '@material-ui/icons/Clear'\nimport MinimizeIcon from '@material-ui/icons/Minimize'\n\nimport { AppActions } from '@britania-crm/stores/app'\nimport {\n  selectRemindersCount,\n  selectDisableDrag\n} from '@britania-crm/stores/app/app.selectors'\n\nimport {\n  HeaderContainer,\n  InputContainer\n} from './styled'\n\nconst Reminder = ({\n  show, reminder, handleMinimize, handleClose\n}) => {\n  const dispatch = useDispatch()\n\n  const textAreaRef = useRef(null)\n\n  const [positions, setPositions] = useState({ x: 40, y: 60 })\n\n  const quantityReminders = useSelector(selectRemindersCount)\n  const disableDrag = useSelector(selectDisableDrag)\n\n  const MIN_Z_INDEX_VALUE = 1700\n  const WIDTH_DEFAULT = 360\n  const HEIGHT_DEFAULT = 280\n\n  const saveReminderText = useCallback(\n    debounce(\n      ({ content, reminderId }) => {\n        dispatch(AppActions.saveReminder(content, reminderId))\n      },\n      500\n    ),\n    []\n  )\n\n  return (\n    <ReminderContainerDraggable\n      style={ {\n        position: 'absolute',\n        zIndex: reminder.topLayer\n          ? (quantityReminders + MIN_Z_INDEX_VALUE)\n          : MIN_Z_INDEX_VALUE,\n        borderRadius: '25px',\n        visibility: show ? 'visible' : 'hidden',\n        boxShadow: '16px 36px 16px 16px rgba(0, 0, 0, 0.1)'\n      } }\n      onDragStop={ (event, d) => setPositions({ x: d.x, y: d.y < -80 ? -60 : d.y }) }\n      enableResizing={ false }\n      disableDragging={ disableDrag }\n      position={ { x: positions.x, y: positions.y } }\n      size={ { width: WIDTH_DEFAULT, height: HEIGHT_DEFAULT } }\n      onMouseDown={ (event) => {\n        event.stopPropagation()\n        /**\n         * Faz com que esse lembrate fique por cima de todos os outros.\n         */\n        dispatch(AppActions.selectReminderToTopLayer(reminder.id))\n      } }\n    >\n      <HeaderContainer onMouseOver={ () => dispatch(AppActions.changeDragStatusRememberContainer(false)) }>\n        <span>Lembrete #{reminder.id}</span>\n\n        <div>\n          <button type=\"button\" onClick={ () => handleMinimize({ reminderId: reminder.id, minimize: true }) }>\n            <MinimizeIcon />\n          </button>\n          <button type=\"button\" onClick={ (event) => handleClose(event, reminder.id) }>\n            <ClearIcon />\n          </button>\n        </div>\n      </HeaderContainer>\n\n      <InputContainer onMouseOver={ () => dispatch(AppActions.changeDragStatusRememberContainer(false)) }>\n        <textarea\n          onMouseOver={ (event) => {\n            event.stopPropagation()\n            dispatch(AppActions.changeDragStatusRememberContainer(true))\n          } }\n          ref={ textAreaRef }\n          name=\"reminderText\"\n          rows=\"12\"\n          maxLength=\"4000\"\n          defaultValue={ reminder.content }\n          onKeyUp={ () =>\n            saveReminderText({\n              content: textAreaRef.current.value,\n              reminderId: reminder.id\n            }) }\n        />\n      </InputContainer>\n    </ReminderContainerDraggable>\n  )\n}\n\nReminder.propTypes = {\n  handleClose: PropTypes.func.isRequired,\n  handleMinimize: PropTypes.func.isRequired,\n  reminder: PropTypes.object.isRequired,\n  show: PropTypes.bool.isRequired\n}\n\nexport default memo(Reminder)\n"]},"metadata":{},"sourceType":"module"}