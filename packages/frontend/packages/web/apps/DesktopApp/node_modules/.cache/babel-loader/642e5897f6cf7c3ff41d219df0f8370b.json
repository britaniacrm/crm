{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/profiles/tables/MicroViewingTable/MicroViewingTable.js\";\nimport React, { useMemo, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport map from 'lodash/map';\nimport { useDialog } from '@britania-crm/dialog';\nimport { useT } from '@britania-crm/i18n';\nimport { colors } from '@britania-crm/styles';\nimport fonts from '@britania-crm/styles/fonts';\nimport DataTable from '@britania-crm/web-components/DataTable';\nimport ConfirmModal from '@britania-crm/web-components/Modal/ConfirmModal';\nimport MicroViewingModal from '../../modals/MicroViewingModal/MicroViewingModal';\n\nconst MicroViewingTable = ({\n  microViewList,\n  onDelete,\n  onEdit\n}) => {\n  const {\n    createDialog\n  } = useDialog();\n  const t = useT();\n  const columns = useMemo(() => [{\n    title: 'Menu',\n    field: 'menu',\n    defaultSort: 'asc'\n  }, {\n    title: 'Campos Ocultos',\n    field: 'field'\n  }], []);\n  const tableData = useMemo(() => map(microViewList, ({\n    access,\n    hiddenFields\n  }) => ({\n    actions: '',\n    menu: access === null || access === void 0 ? void 0 : access.name,\n    field: [map(hiddenFields, field => field.name).join(' - ')],\n    access,\n    hiddenFields\n  })), [microViewList]);\n  const onDeleteClick = useCallback((event, row) => createDialog({\n    id: 'delete-micro-modal',\n    Component: ConfirmModal,\n    props: {\n      onConfirm() {\n        onDelete(row);\n      }\n\n    }\n  }), [createDialog, onDelete]);\n  const microViewingModal = useCallback((event, row) => createDialog({\n    id: 'microview-modal',\n    Component: MicroViewingModal,\n    props: {\n      selectedAccesses: [row.access],\n      fieldSelected: row.hiddenFields,\n      onSave: onEdit,\n      isEdit: true\n    }\n  }), [createDialog, onEdit]);\n  return /*#__PURE__*/React.createElement(DataTable, {\n    title: `${t('micro viewing')}:`,\n    titleProps: {\n      variant: 'subtitle1',\n      style: {\n        color: colors.grey3,\n        fontWeight: fonts.fontWeight.regular\n      }\n    },\n    options: {\n      search: false\n    },\n    columns: columns,\n    data: tableData,\n    onEditClick: microViewingModal,\n    onDeleteClick: onDeleteClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 5\n    }\n  });\n};\n\nMicroViewingTable.propTypes = {\n  microViewList: PropTypes.array.isRequired,\n  onDelete: PropTypes.func,\n  onEdit: PropTypes.func\n};\nMicroViewingTable.defaultProps = {\n  onDelete() {},\n\n  onEdit() {}\n\n};\nexport default MicroViewingTable;","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/profiles/tables/MicroViewingTable/MicroViewingTable.js"],"names":["React","useMemo","useCallback","PropTypes","map","useDialog","useT","colors","fonts","DataTable","ConfirmModal","MicroViewingModal","MicroViewingTable","microViewList","onDelete","onEdit","createDialog","t","columns","title","field","defaultSort","tableData","access","hiddenFields","actions","menu","name","join","onDeleteClick","event","row","id","Component","props","onConfirm","microViewingModal","selectedAccesses","fieldSelected","onSave","isEdit","variant","style","color","grey3","fontWeight","regular","search","propTypes","array","isRequired","func","defaultProps"],"mappings":"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","sourcesContent":["import React, {\n  useMemo,\n  useCallback\n} from 'react'\n\nimport PropTypes from 'prop-types'\n\nimport map from 'lodash/map'\n\nimport { useDialog } from '@britania-crm/dialog'\nimport { useT } from '@britania-crm/i18n'\nimport { colors } from '@britania-crm/styles'\nimport fonts from '@britania-crm/styles/fonts'\nimport DataTable from '@britania-crm/web-components/DataTable'\nimport ConfirmModal from '@britania-crm/web-components/Modal/ConfirmModal'\n\nimport MicroViewingModal from '../../modals/MicroViewingModal/MicroViewingModal'\n\nconst MicroViewingTable = ({\n  microViewList,\n  onDelete,\n  onEdit\n}) => {\n  const { createDialog } = useDialog()\n  const t = useT()\n\n  const columns = useMemo(() => [\n    {\n      title: 'Menu',\n      field: 'menu',\n      defaultSort: 'asc'\n    },\n    {\n      title: 'Campos Ocultos',\n      field: 'field'\n    }\n  ], [])\n\n  const tableData = useMemo(() => map(microViewList,\n    ({ access, hiddenFields }) => ({\n      actions: '',\n      menu: access?.name,\n      field: [map(hiddenFields, (field) => field.name).join(' - ')],\n      access,\n      hiddenFields\n    })), [microViewList])\n\n  const onDeleteClick = useCallback((event, row) => createDialog({\n    id: 'delete-micro-modal',\n    Component: ConfirmModal,\n    props: {\n      onConfirm () {\n        onDelete(row)\n      }\n    }\n  }), [createDialog, onDelete])\n\n  const microViewingModal = useCallback(\n    (event, row) =>\n      createDialog({\n        id: 'microview-modal',\n        Component: MicroViewingModal,\n        props: {\n          selectedAccesses: [row.access],\n          fieldSelected: row.hiddenFields,\n          onSave: onEdit,\n          isEdit: true\n        }\n      }),\n    [createDialog, onEdit]\n  )\n\n  return (\n    <DataTable\n      title={ `${ t('micro viewing') }:` }\n      titleProps={ {\n        variant: 'subtitle1',\n        style: { color: colors.grey3, fontWeight: fonts.fontWeight.regular }\n      } }\n      options={ { search: false } }\n      columns={ columns }\n      data={ tableData }\n      onEditClick={ microViewingModal }\n      onDeleteClick={ onDeleteClick }\n    />\n  )\n}\n\nMicroViewingTable.propTypes = {\n  microViewList: PropTypes.array.isRequired,\n  onDelete: PropTypes.func,\n  onEdit: PropTypes.func\n}\n\nMicroViewingTable.defaultProps = {\n  onDelete () {},\n  onEdit () {}\n}\n\nexport default MicroViewingTable\n"]},"metadata":{},"sourceType":"module"}