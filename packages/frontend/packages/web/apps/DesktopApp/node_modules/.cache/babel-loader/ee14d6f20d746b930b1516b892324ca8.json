{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/customers/utils/index.js\";\nimport React from 'react';\nimport endsWith from 'lodash/endsWith';\nimport mapValues from 'lodash/mapValues';\nimport reduce from 'lodash/reduce';\nimport { INITIAL_VALUES as CFOP_AGSC_INITIAL_VALUES } from '@britania-crm/forms/schemas/customer/customerPreRegistration.cfops/customerPreRegistration.cfopAgsc.schema';\nimport { INITIAL_VALUES as CFOP_AGSP_INITIAL_VALUES } from '@britania-crm/forms/schemas/customer/customerPreRegistration.cfops/customerPreRegistration.cfopAgsp.schema';\nimport { INITIAL_VALUES as CFOP_MANAUS_INITIAL_VALUES } from '@britania-crm/forms/schemas/customer/customerPreRegistration.cfops/customerPreRegistration.cfopManaus.schema';\nimport { INITIAL_VALUES as CFOP_ST_INITIAL_VALUES } from '@britania-crm/forms/schemas/customer/customerPreRegistration.cfops/customerPreRegistration.cfopSt.schema';\nimport colors from '@britania-crm/styles/colors';\nimport fonts from '@britania-crm/styles/fonts';\nimport CheckboxStatus from '@britania-crm/web-components/CheckboxStatus';\nimport RankingBadge from '@britania-crm/web-components/RankingBadge';\nexport const getConfigClientsColumns = t => [{\n  title: t('matrix'),\n  field: 'parentCompany',\n  cellStyle: {\n    color: colors.secondary.main,\n    fontWeight: fonts.fontWeight.regular\n  }\n}, {\n  title: t('matrix code', {\n    abbreviation: true\n  }),\n  field: 'parentCompanyCode'\n}, {\n  title: t('logistical information', {\n    abbreviation: true\n  }),\n  field: 'logisticInformation'\n}, {\n  title: t('credit status', {\n    abbreviation: true\n  }),\n  field: 'creditSituation'\n}, {\n  title: t('letter of regime', {\n    abbreviation: true\n  }),\n  field: 'regimeLetter'\n}, {\n  title: t('days without billing', {\n    abbreviation: true\n  }),\n  field: 'daysWithoutBilling',\n  width: 110,\n  cellStyle: {\n    minWidth: 110\n  },\n  render: row => row.daysWithoutBilling !== null ? `${row.daysWithoutBilling} ${t('day', {\n    howMany: row.daysWithoutBilling || 0\n  })}` : '-'\n}, {\n  sorting: false,\n  title: t('ranking'),\n  field: 'ranking',\n\n  render(row) {\n    var _row$ranking;\n\n    return /*#__PURE__*/React.createElement(RankingBadge, {\n      type: row === null || row === void 0 ? void 0 : (_row$ranking = row.ranking) === null || _row$ranking === void 0 ? void 0 : _row$ranking.alias,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 15\n      }\n    });\n  }\n\n}, {\n  sorting: true,\n  title: t('status'),\n  field: 'active',\n\n  render(row) {\n    let status, color;\n\n    if (row.status === 'ACTIVE') {\n      status = t('active');\n    } else if (row.status === 'INACTIVE') {\n      status = t('inactive');\n      color = colors.error.main;\n    } else {\n      status = t('registration in process of change');\n      color = colors.warning.main;\n    }\n\n    return /*#__PURE__*/React.createElement(CheckboxStatus, {\n      detached: true,\n      readOnly: true,\n      value: row.status !== 'INACTIVE',\n      style: {\n        color: colors.black2\n      },\n      activeStatus: status,\n      activeColor: color,\n      notFistLabel: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }\n    });\n  }\n\n}];\nexport const getConfigsCompanysBranchColumns = t => [{\n  title: t('companys branch'),\n  field: 'branchName',\n  cellStyle: {\n    cellStyle: {\n      color: colors.secondary.main,\n      fontWeight: fonts.fontWeight.regular\n    }\n  }\n}, {\n  title: t('companys branch code'),\n  field: 'branchCode'\n}, {\n  title: 'UF',\n  field: 'state'\n}, {\n  title: t('city', {\n    howMany: 1\n  }),\n  field: 'city'\n}, {\n  title: t('cd code', {\n    abbreviation: true\n  }),\n  field: 'cdCode'\n}, {\n  title: t('situation'),\n  field: 'creditSituation'\n}, {\n  title: t('status'),\n  field: 'active',\n\n  render(row) {\n    let status, color;\n\n    if (row.status === 'ACTIVE') {\n      status = t('active');\n    } else if (row.status === 'INACTIVE') {\n      status = t('inactive');\n      color = colors.error.main;\n    } else {\n      status = t('registration in process of change');\n      color = colors.warning.main;\n    }\n\n    return /*#__PURE__*/React.createElement(CheckboxStatus, {\n      detached: true,\n      readOnly: true,\n      value: row.status !== 'INACTIVE',\n      style: {\n        color: colors.black2\n      },\n      activeStatus: status,\n      activeColor: color,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 9\n      }\n    });\n  }\n\n}];\nexport const getPayloadFiscalParametrizationCfop = ({\n  fiscalParametrizationCfop\n} = {}) => reduce(fiscalParametrizationCfop, (acc, cfopItems) => ({ ...acc,\n  ...mapValues(cfopItems, (fieldValue, fieldName) => {\n    if (endsWith(fieldName, 'Code')) {\n      return (fieldValue === null || fieldValue === void 0 ? void 0 : fieldValue.code) || null;\n    }\n\n    return (fieldValue === null || fieldValue === void 0 ? void 0 : fieldValue.description) || null;\n  })\n}), {});\n\nconst transformCodeNameToDescriptionName = fieldName => `${fieldName.substr(0, fieldName.length - 4)}Description`;\n\nexport const getFormFiscalParametrizationCfop = ({\n  cfop\n} = {}) => {\n  const result = reduce(cfop, (acc, itemValue, fieldName) => {\n    if (endsWith(fieldName, 'Code') && itemValue) {\n      const descriptionFieldName = transformCodeNameToDescriptionName(fieldName);\n\n      const mergeCfops = path => ({ ...acc,\n        [path]: { ...((acc === null || acc === void 0 ? void 0 : acc[path]) || {}),\n          [fieldName]: {\n            code: itemValue || ''\n          },\n          [descriptionFieldName]: {\n            description: cfop[descriptionFieldName] || ''\n          }\n        }\n      });\n\n      if (CFOP_AGSC_INITIAL_VALUES[fieldName] !== undefined) {\n        return mergeCfops('agSc');\n      }\n\n      if (CFOP_AGSP_INITIAL_VALUES[fieldName] !== undefined) {\n        return mergeCfops('agSp');\n      }\n\n      if (CFOP_ST_INITIAL_VALUES[fieldName] !== undefined) {\n        return mergeCfops('st');\n      }\n\n      if (CFOP_MANAUS_INITIAL_VALUES[fieldName] !== undefined) {\n        return mergeCfops('manaus');\n      }\n\n      return mergeCfops('cfop');\n    }\n\n    return acc;\n  }, {});\n  console.log('result', result);\n  return result;\n};","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/customers/utils/index.js"],"names":["React","endsWith","mapValues","reduce","INITIAL_VALUES","CFOP_AGSC_INITIAL_VALUES","CFOP_AGSP_INITIAL_VALUES","CFOP_MANAUS_INITIAL_VALUES","CFOP_ST_INITIAL_VALUES","colors","fonts","CheckboxStatus","RankingBadge","getConfigClientsColumns","t","title","field","cellStyle","color","secondary","main","fontWeight","regular","abbreviation","width","minWidth","render","row","daysWithoutBilling","howMany","sorting","ranking","alias","status","error","warning","black2","getConfigsCompanysBranchColumns","getPayloadFiscalParametrizationCfop","fiscalParametrizationCfop","acc","cfopItems","fieldValue","fieldName","code","description","transformCodeNameToDescriptionName","substr","length","getFormFiscalParametrizationCfop","cfop","result","itemValue","descriptionFieldName","mergeCfops","path","undefined","console","log"],"mappings":"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","sourcesContent":["\nimport React from 'react'\n\nimport endsWith from 'lodash/endsWith'\nimport mapValues from 'lodash/mapValues'\nimport reduce from 'lodash/reduce'\n\nimport { INITIAL_VALUES as CFOP_AGSC_INITIAL_VALUES } from '@britania-crm/forms/schemas/customer/customerPreRegistration.cfops/customerPreRegistration.cfopAgsc.schema'\nimport { INITIAL_VALUES as CFOP_AGSP_INITIAL_VALUES } from '@britania-crm/forms/schemas/customer/customerPreRegistration.cfops/customerPreRegistration.cfopAgsp.schema'\nimport { INITIAL_VALUES as CFOP_MANAUS_INITIAL_VALUES } from '@britania-crm/forms/schemas/customer/customerPreRegistration.cfops/customerPreRegistration.cfopManaus.schema'\nimport { INITIAL_VALUES as CFOP_ST_INITIAL_VALUES } from '@britania-crm/forms/schemas/customer/customerPreRegistration.cfops/customerPreRegistration.cfopSt.schema'\nimport colors from '@britania-crm/styles/colors'\nimport fonts from '@britania-crm/styles/fonts'\nimport CheckboxStatus from '@britania-crm/web-components/CheckboxStatus'\nimport RankingBadge from '@britania-crm/web-components/RankingBadge'\n\nexport const getConfigClientsColumns = (t) => [\n  {\n    title: t('matrix'),\n    field: 'parentCompany',\n    cellStyle: {\n      color: colors.secondary.main,\n      fontWeight: fonts.fontWeight.regular\n    }\n  },\n  {\n    title: t('matrix code', { abbreviation: true }),\n    field: 'parentCompanyCode'\n  },\n  {\n    title: t('logistical information', { abbreviation: true }),\n    field: 'logisticInformation'\n  },\n  {\n    title: t('credit status', { abbreviation: true }),\n    field: 'creditSituation'\n  },\n  {\n    title: t('letter of regime', { abbreviation: true }),\n    field: 'regimeLetter'\n  },\n  {\n    title: t('days without billing', { abbreviation: true }),\n    field: 'daysWithoutBilling',\n    width: 110,\n    cellStyle: { minWidth: 110 },\n    render: (row) => row.daysWithoutBilling !== null ? `${ row.daysWithoutBilling } ${ t('day', { howMany: row.daysWithoutBilling || 0 }) }` : '-'\n  },\n  {\n    sorting: false,\n    title: t('ranking'),\n    field: 'ranking',\n    render (row) {\n      return (<RankingBadge type={ row?.ranking?.alias } />)\n    }\n  },\n  {\n    sorting: true,\n    title: t('status'),\n    field: 'active',\n    render (row) {\n      let status, color\n\n      if (row.status === 'ACTIVE') {\n        status = t('active')\n      } else if (row.status === 'INACTIVE') {\n        status = t('inactive')\n        color = colors.error.main\n      } else {\n        status = t('registration in process of change')\n        color = colors.warning.main\n      }\n\n      return (\n        <CheckboxStatus\n          detached\n          readOnly\n          value={ row.status !== 'INACTIVE' }\n          style={ { color: colors.black2 } }\n          activeStatus={ status }\n          activeColor={ color }\n          notFistLabel\n        />\n      )\n    }\n  }\n]\n\nexport const getConfigsCompanysBranchColumns = (t) => [\n  {\n    title: t('companys branch'),\n    field: 'branchName',\n    cellStyle: {\n      cellStyle: {\n        color: colors.secondary.main,\n        fontWeight: fonts.fontWeight.regular\n      }\n    }\n  },\n  {\n    title: t('companys branch code'),\n    field: 'branchCode'\n  },\n  {\n    title: 'UF',\n    field: 'state'\n  },\n  {\n    title: t('city', { howMany: 1 }),\n    field: 'city'\n  },\n  {\n    title: t('cd code', { abbreviation: true }),\n    field: 'cdCode'\n  },\n  {\n    title: t('situation'),\n    field: 'creditSituation'\n  },\n  {\n    title: t('status'),\n    field: 'active',\n    render (row) {\n      let status, color\n\n      if (row.status === 'ACTIVE') {\n        status = t('active')\n      } else if (row.status === 'INACTIVE') {\n        status = t('inactive')\n        color = colors.error.main\n      } else {\n        status = t('registration in process of change')\n        color = colors.warning.main\n      }\n\n      return (\n        <CheckboxStatus\n          detached\n          readOnly\n          value={ row.status !== 'INACTIVE' }\n          style={ { color: colors.black2 } }\n          activeStatus={ status }\n          activeColor={ color }\n        />\n      )\n    }\n  }\n]\n\nexport const getPayloadFiscalParametrizationCfop = ({ fiscalParametrizationCfop } = {}) => reduce(\n  fiscalParametrizationCfop,\n  (acc, cfopItems) => ({\n    ...acc,\n    ...mapValues(cfopItems, (fieldValue, fieldName) => {\n      if (endsWith(fieldName, 'Code')) {\n        return fieldValue?.code || null\n      }\n      return fieldValue?.description || null\n    })\n  }),\n  {}\n)\n\nconst transformCodeNameToDescriptionName = (fieldName) => `${ fieldName.substr(0, fieldName.length - 4) }Description`\n\nexport const getFormFiscalParametrizationCfop = ({ cfop } = {}) => {\n  const result = reduce(\n    cfop,\n    (acc, itemValue, fieldName) => {\n      if (endsWith(fieldName, 'Code') && itemValue) {\n        const descriptionFieldName = transformCodeNameToDescriptionName(fieldName)\n\n        const mergeCfops = (path) => ({\n          ...acc,\n          [path]: {\n            ...(acc?.[path] || {}),\n            [fieldName]: { code: itemValue || '' },\n            [descriptionFieldName]: { description: cfop[descriptionFieldName] || '' }\n          }\n        })\n\n        if (CFOP_AGSC_INITIAL_VALUES[fieldName] !== undefined) {\n          return mergeCfops('agSc')\n        }\n        if (CFOP_AGSP_INITIAL_VALUES[fieldName] !== undefined) {\n          return mergeCfops('agSp')\n        }\n        if (CFOP_ST_INITIAL_VALUES[fieldName] !== undefined) {\n          return mergeCfops('st')\n        }\n        if (CFOP_MANAUS_INITIAL_VALUES[fieldName] !== undefined) {\n          return mergeCfops('manaus')\n        }\n\n        return mergeCfops('cfop')\n      }\n      return acc\n    },\n    {}\n  )\n\n  console.log('result', result)\n\n  return result\n}\n"]},"metadata":{},"sourceType":"module"}