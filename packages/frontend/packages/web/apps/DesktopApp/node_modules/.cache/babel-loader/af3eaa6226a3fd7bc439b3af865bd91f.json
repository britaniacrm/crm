{"ast":null,"code":"import moment from 'moment';\nimport { v4 as uuidv4 } from 'uuid';\nimport filter from 'lodash/filter';\nimport findIndex from 'lodash/findIndex';\nimport isString from 'lodash/isString';\nimport map from 'lodash/map';\nimport orderBy from 'lodash/orderBy';\nimport pick from 'lodash/pick';\nimport { treeTypes } from '@britania-crm/constants/workflow.constants';\nexport const formatTasks = itemsToFormat => map(itemsToFormat, task => {\n  const orderedConditions = orderBy(task.conditions, 'order', 'asc');\n  const formattedConditions = map(orderedConditions, condition => {\n    var _condition$field, _condition$field2, _condition$field2$acc;\n\n    return { ...condition,\n      id: uuidv4(),\n      fieldId: condition === null || condition === void 0 ? void 0 : (_condition$field = condition.field) === null || _condition$field === void 0 ? void 0 : _condition$field.id,\n      accessId: condition === null || condition === void 0 ? void 0 : (_condition$field2 = condition.field) === null || _condition$field2 === void 0 ? void 0 : (_condition$field2$acc = _condition$field2.access) === null || _condition$field2$acc === void 0 ? void 0 : _condition$field2$acc.id,\n      type: treeTypes.CONDITION\n    };\n  });\n  const orderedResponses = orderBy(task.responses, 'order', 'asc');\n  const formattedResponses = map(orderedResponses, response => ({ ...response,\n    id: uuidv4(),\n    type: treeTypes.RESPONSE\n  }));\n  const children = [...formattedConditions, ...formattedResponses];\n  return { ...task,\n    id: uuidv4(),\n    children,\n    type: treeTypes.TASK\n  };\n});\nexport const formatRequest = (form, tasks) => ({ ...pick(form, ['title', 'description']),\n  dateStart: moment(form.period.from).toISOString(),\n  dateEnd: moment(form.period.to).toISOString(),\n  typeId: Number(form.typeId),\n  tasks: map(tasks, (item, index) => {\n    var _item$profile;\n\n    const conditions = filter(item.children, children => {\n      var _children$type;\n\n      return ((_children$type = children.type) === null || _children$type === void 0 ? void 0 : _children$type.type) === treeTypes.CONDITION.type;\n    });\n    const responses = filter(item.children, children => {\n      var _children$type2;\n\n      return ((_children$type2 = children.type) === null || _children$type2 === void 0 ? void 0 : _children$type2.type) === treeTypes.RESPONSE.type;\n    });\n    return { ...pick(item, ['deadline', 'userId', 'userAlternateId', 'title']),\n      order: index + 1,\n      profileId: (_item$profile = item.profile) === null || _item$profile === void 0 ? void 0 : _item$profile.id,\n      userId: item.userId ? Number(item.userId) : null,\n      userAlternateId: item.userAlternateId ? Number(item.userAlternateId) : null,\n      conditions: map(conditions, (condition, index) => ({ ...pick(condition, ['fieldId', 'title', 'comparisonSymbol', 'comparisonValue']),\n        order: index + 1\n      })),\n      responses: map(responses, (response, index) => ({ ...pick(response, ['title', 'requiresJustification', 'finishWorkflowWithError', 'finishWorkflowSuccessfully']),\n        order: index + 1,\n        nextTaskOrder: isString(response.nextTaskOrder) ? findIndex(tasks, task => task.id === response.nextTaskOrder) + 1 : response.nextTaskOrder\n      }))\n    };\n  })\n});","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/workflowPanel/screens/WorkflowPanelCreateScreen/utils.js"],"names":["moment","v4","uuidv4","filter","findIndex","isString","map","orderBy","pick","treeTypes","formatTasks","itemsToFormat","task","orderedConditions","conditions","formattedConditions","condition","id","fieldId","field","accessId","access","type","CONDITION","orderedResponses","responses","formattedResponses","response","RESPONSE","children","TASK","formatRequest","form","tasks","dateStart","period","from","toISOString","dateEnd","to","typeId","Number","item","index","order","profileId","profile","userId","userAlternateId","nextTaskOrder"],"mappings":"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","sourcesContent":["\nimport moment from 'moment'\nimport { v4 as uuidv4 } from 'uuid'\n\nimport filter from 'lodash/filter'\nimport findIndex from 'lodash/findIndex'\nimport isString from 'lodash/isString'\nimport map from 'lodash/map'\nimport orderBy from 'lodash/orderBy'\nimport pick from 'lodash/pick'\n\nimport { treeTypes } from '@britania-crm/constants/workflow.constants'\n\nexport const formatTasks = (itemsToFormat) => map(itemsToFormat, (task) => {\n  const orderedConditions = orderBy(task.conditions, 'order', 'asc')\n\n  const formattedConditions = map(orderedConditions, (condition) => ({\n    ...condition,\n    id: uuidv4(),\n    fieldId: condition?.field?.id,\n    accessId: condition?.field?.access?.id,\n    type: treeTypes.CONDITION\n  }))\n\n  const orderedResponses = orderBy(task.responses, 'order', 'asc')\n\n  const formattedResponses = map(orderedResponses, (response) => ({\n    ...response,\n    id: uuidv4(),\n    type: treeTypes.RESPONSE\n  }))\n\n  const children = [\n    ...formattedConditions,\n    ...formattedResponses\n  ]\n\n  return {\n    ...task,\n    id: uuidv4(),\n    children,\n    type: treeTypes.TASK\n  }\n})\n\nexport const formatRequest = (form, tasks) => ({\n  ...pick(form, ['title', 'description']),\n  dateStart: moment(form.period.from).toISOString(),\n  dateEnd: moment(form.period.to).toISOString(),\n  typeId: Number(form.typeId),\n  tasks: map(tasks, (item, index) => {\n    const conditions = filter(item.children, (children) =>\n      children.type?.type === treeTypes.CONDITION.type\n    )\n\n    const responses = filter(item.children, (children) =>\n      children.type?.type === treeTypes.RESPONSE.type\n    )\n\n    return {\n      ...pick(item, ['deadline', 'userId', 'userAlternateId', 'title']),\n      order: index + 1,\n      profileId: item.profile?.id,\n      userId: item.userId ? Number(item.userId) : null,\n      userAlternateId: item.userAlternateId ? Number(item.userAlternateId) : null,\n      conditions: map(conditions, (condition, index) => ({\n        ...pick(condition, ['fieldId', 'title', 'comparisonSymbol', 'comparisonValue']),\n        order: index + 1\n      })),\n      responses: map(responses, (response, index) => ({\n        ...pick(response, ['title', 'requiresJustification', 'finishWorkflowWithError', 'finishWorkflowSuccessfully']),\n        order: index + 1,\n        nextTaskOrder: isString(response.nextTaskOrder) ? (findIndex(tasks, (task) => task.id === response.nextTaskOrder) + 1) : response.nextTaskOrder\n      }))\n    }\n  })\n})\n"]},"metadata":{},"sourceType":"module"}