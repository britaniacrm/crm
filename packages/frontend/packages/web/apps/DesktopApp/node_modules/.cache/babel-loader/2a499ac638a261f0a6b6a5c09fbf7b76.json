{"ast":null,"code":"/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n/* jslint esnext: true */\n\"use strict\";\n\nvar src$utils$$ = require(\"./utils\"),\n    src$es5$$ = require(\"./es5\"),\n    src$compiler$$ = require(\"./compiler\"),\n    intl$messageformat$parser$$ = require(\"intl-messageformat-parser\");\n\nexports[\"default\"] = MessageFormat; // -- MessageFormat --------------------------------------------------------\n\nfunction MessageFormat(message, locales, formats) {\n  // Parse string messages into an AST.\n  var ast = typeof message === 'string' ? MessageFormat.__parse(message) : message;\n\n  if (!(ast && ast.type === 'messageFormatPattern')) {\n    throw new TypeError('A message must be provided as a String or AST.');\n  } // Creates a new object with the specified `formats` merged with the default\n  // formats.\n\n\n  formats = this._mergeFormats(MessageFormat.formats, formats); // Defined first because it's used to build the format pattern.\n\n  src$es5$$.defineProperty(this, '_locale', {\n    value: this._resolveLocale(locales)\n  }); // Compile the `ast` to a pattern that is highly optimized for repeated\n  // `format()` invocations. **Note:** This passes the `locales` set provided\n  // to the constructor instead of just the resolved locale.\n\n  var pluralFn = this._findPluralRuleFunction(this._locale);\n\n  var pattern = this._compilePattern(ast, locales, formats, pluralFn); // \"Bind\" `format()` method to `this` so it can be passed by reference like\n  // the other `Intl` APIs.\n\n\n  var messageFormat = this;\n\n  this.format = function (values) {\n    try {\n      return messageFormat._format(pattern, values);\n    } catch (e) {\n      if (e.variableId) {\n        throw new Error('The intl string context variable \\'' + e.variableId + '\\'' + ' was not provided to the string \\'' + message + '\\'');\n      } else {\n        throw e;\n      }\n    }\n  };\n} // Default format options used as the prototype of the `formats` provided to the\n// constructor. These are used when constructing the internal Intl.NumberFormat\n// and Intl.DateTimeFormat instances.\n\n\nsrc$es5$$.defineProperty(MessageFormat, 'formats', {\n  enumerable: true,\n  value: {\n    number: {\n      'currency': {\n        style: 'currency'\n      },\n      'percent': {\n        style: 'percent'\n      }\n    },\n    date: {\n      'short': {\n        month: 'numeric',\n        day: 'numeric',\n        year: '2-digit'\n      },\n      'medium': {\n        month: 'short',\n        day: 'numeric',\n        year: 'numeric'\n      },\n      'long': {\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric'\n      },\n      'full': {\n        weekday: 'long',\n        month: 'long',\n        day: 'numeric',\n        year: 'numeric'\n      }\n    },\n    time: {\n      'short': {\n        hour: 'numeric',\n        minute: 'numeric'\n      },\n      'medium': {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric'\n      },\n      'long': {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric',\n        timeZoneName: 'short'\n      },\n      'full': {\n        hour: 'numeric',\n        minute: 'numeric',\n        second: 'numeric',\n        timeZoneName: 'short'\n      }\n    }\n  }\n}); // Define internal private properties for dealing with locale data.\n\nsrc$es5$$.defineProperty(MessageFormat, '__localeData__', {\n  value: src$es5$$.objCreate(null)\n});\nsrc$es5$$.defineProperty(MessageFormat, '__addLocaleData', {\n  value: function (data) {\n    if (!(data && data.locale)) {\n      throw new Error('Locale data provided to IntlMessageFormat is missing a ' + '`locale` property');\n    }\n\n    MessageFormat.__localeData__[data.locale.toLowerCase()] = data;\n  }\n}); // Defines `__parse()` static method as an exposed private.\n\nsrc$es5$$.defineProperty(MessageFormat, '__parse', {\n  value: intl$messageformat$parser$$[\"default\"].parse\n}); // Define public `defaultLocale` property which defaults to English, but can be\n// set by the developer.\n\nsrc$es5$$.defineProperty(MessageFormat, 'defaultLocale', {\n  enumerable: true,\n  writable: true,\n  value: undefined\n});\n\nMessageFormat.prototype.resolvedOptions = function () {\n  // TODO: Provide anything else?\n  return {\n    locale: this._locale\n  };\n};\n\nMessageFormat.prototype._compilePattern = function (ast, locales, formats, pluralFn) {\n  var compiler = new src$compiler$$[\"default\"](locales, formats, pluralFn);\n  return compiler.compile(ast);\n};\n\nMessageFormat.prototype._findPluralRuleFunction = function (locale) {\n  var localeData = MessageFormat.__localeData__;\n  var data = localeData[locale.toLowerCase()]; // The locale data is de-duplicated, so we have to traverse the locale's\n  // hierarchy until we find a `pluralRuleFunction` to return.\n\n  while (data) {\n    if (data.pluralRuleFunction) {\n      return data.pluralRuleFunction;\n    }\n\n    data = data.parentLocale && localeData[data.parentLocale.toLowerCase()];\n  }\n\n  throw new Error('Locale data added to IntlMessageFormat is missing a ' + '`pluralRuleFunction` for :' + locale);\n};\n\nMessageFormat.prototype._format = function (pattern, values) {\n  var result = '',\n      i,\n      len,\n      part,\n      id,\n      value,\n      err;\n\n  for (i = 0, len = pattern.length; i < len; i += 1) {\n    part = pattern[i]; // Exist early for string parts.\n\n    if (typeof part === 'string') {\n      result += part;\n      continue;\n    }\n\n    id = part.id; // Enforce that all required values are provided by the caller.\n\n    if (!(values && src$utils$$.hop.call(values, id))) {\n      err = new Error('A value must be provided for: ' + id);\n      err.variableId = id;\n      throw err;\n    }\n\n    value = values[id]; // Recursively format plural and select parts' option â€” which can be a\n    // nested pattern structure. The choosing of the option to use is\n    // abstracted-by and delegated-to the part helper object.\n\n    if (part.options) {\n      result += this._format(part.getOption(value), values);\n    } else {\n      result += part.format(value);\n    }\n  }\n\n  return result;\n};\n\nMessageFormat.prototype._mergeFormats = function (defaults, formats) {\n  var mergedFormats = {},\n      type,\n      mergedType;\n\n  for (type in defaults) {\n    if (!src$utils$$.hop.call(defaults, type)) {\n      continue;\n    }\n\n    mergedFormats[type] = mergedType = src$es5$$.objCreate(defaults[type]);\n\n    if (formats && src$utils$$.hop.call(formats, type)) {\n      src$utils$$.extend(mergedType, formats[type]);\n    }\n  }\n\n  return mergedFormats;\n};\n\nMessageFormat.prototype._resolveLocale = function (locales) {\n  if (typeof locales === 'string') {\n    locales = [locales];\n  } // Create a copy of the array so we can push on the default locale.\n\n\n  locales = (locales || []).concat(MessageFormat.defaultLocale);\n  var localeData = MessageFormat.__localeData__;\n  var i, len, localeParts, data; // Using the set of locales + the default locale, we look for the first one\n  // which that has been registered. When data does not exist for a locale, we\n  // traverse its ancestors to find something that's been registered within\n  // its hierarchy of locales. Since we lack the proper `parentLocale` data\n  // here, we must take a naive approach to traversal.\n\n  for (i = 0, len = locales.length; i < len; i += 1) {\n    localeParts = locales[i].toLowerCase().split('-');\n\n    while (localeParts.length) {\n      data = localeData[localeParts.join('-')];\n\n      if (data) {\n        // Return the normalized locale string; e.g., we return \"en-US\",\n        // instead of \"en-us\".\n        return data.locale;\n      }\n\n      localeParts.pop();\n    }\n  }\n\n  var defaultLocale = locales.pop();\n  throw new Error('No locale data has been added to IntlMessageFormat for: ' + locales.join(', ') + ', or the default locale: ' + defaultLocale);\n};","map":{"version":3,"sources":["src/core.js"],"names":[],"mappings":";;;;;;;;;;;;;;qBAae,a;;AAIf,SAAS,aAAT,CAAuB,OAAvB,EAAgC,OAAhC,EAAyC,OAAzC,EAAkD;AAC9C;AACA,MAAI,GAAE,GAAI,OAAO,OAAP,KAAmB,QAAnB,GACF,aAAa,CAAC,OAAd,CAAsB,OAAtB,CADE,GAC+B,OADzC;;AAGA,MAAI,EAAE,GAAE,IAAK,GAAG,CAAC,IAAJ,KAAa,sBAAtB,CAAJ,EAAmD;AAC/C,UAAM,IAAI,SAAJ,CAAc,gDAAd,CAAN;AACJ,GAP8C,CAS9C;AACA;;;AACA,EAAA,OAAM,GAAI,KAAK,aAAL,CAAmB,aAAa,CAAC,OAAjC,EAA0C,OAA1C,CAAV,CAX8C,CAa9C;;YACc,c,CAAC,I,EAAM,S,EAAY;AAAC,IAAA,KAAK,EAAE,KAAK,cAAL,CAAoB,OAApB;AAAR,G,EAda,CAgB9C;AACA;AACA;;AACA,MAAI,QAAO,GAAI,KAAK,uBAAL,CAA6B,KAAK,OAAlC,CAAf;;AACA,MAAI,OAAM,GAAK,KAAK,eAAL,CAAqB,GAArB,EAA0B,OAA1B,EAAmC,OAAnC,EAA4C,QAA5C,CAAf,CApB8C,CAsB9C;AACA;;;AACA,MAAI,aAAY,GAAI,IAApB;;AACA,OAAK,MAAL,GAAc,UAAU,MAAV,EAAkB;AAC9B,QAAI;AACF,aAAO,aAAa,CAAC,OAAd,CAAsB,OAAtB,EAA+B,MAA/B,CAAP;AACF,KAFA,CAEE,OAAO,CAAP,EAAU;AACV,UAAI,CAAC,CAAC,UAAN,EAAkB;AAChB,cAAM,IAAI,KAAJ,CACJ,wCAAwC,CAAC,CAAC,UAA1C,GAAuD,IAAvD,GACA,oCADA,GACuC,OADvC,GACiD,IAF7C,CAAN;AAIF,OALA,MAKO;AACL,cAAM,CAAN;AACF;AACF;AACD,GAbD;AAcJ,C;;;;;UAKc,c,CAAC,a,EAAe,S,EAAW;AACrC,EAAA,UAAU,EAAE,IADyB;AAGrC,EAAA,KAAK,EAAE;AACH,IAAA,MAAM,EAAE;AACJ,kBAAY;AACR,QAAA,KAAK,EAAE;AADC,OADR;AAKJ,iBAAW;AACP,QAAA,KAAK,EAAE;AADA;AALP,KADL;AAWH,IAAA,IAAI,EAAE;AACF,eAAS;AACL,QAAA,KAAK,EAAE,SADF;AAEL,QAAA,GAAE,EAAK,SAFF;AAGL,QAAA,IAAG,EAAI;AAHF,OADP;AAOF,gBAAU;AACN,QAAA,KAAK,EAAE,OADD;AAEN,QAAA,GAAE,EAAK,SAFD;AAGN,QAAA,IAAG,EAAI;AAHD,OAPR;AAaF,cAAQ;AACJ,QAAA,KAAK,EAAE,MADH;AAEJ,QAAA,GAAE,EAAK,SAFH;AAGJ,QAAA,IAAG,EAAI;AAHH,OAbN;AAmBF,cAAQ;AACJ,QAAA,OAAO,EAAE,MADL;AAEJ,QAAA,KAAI,EAAK,MAFL;AAGJ,QAAA,GAAE,EAAO,SAHL;AAIJ,QAAA,IAAG,EAAM;AAJL;AAnBN,KAXH;AAsCH,IAAA,IAAI,EAAE;AACF,eAAS;AACL,QAAA,IAAG,EAAK,SADH;AAEL,QAAA,MAAM,EAAE;AAFH,OADP;AAMF,gBAAW;AACP,QAAA,IAAG,EAAK,SADD;AAEP,QAAA,MAAM,EAAE,SAFD;AAGP,QAAA,MAAM,EAAE;AAHD,OANT;AAYF,cAAQ;AACJ,QAAA,IAAG,EAAW,SADV;AAEJ,QAAA,MAAK,EAAS,SAFV;AAGJ,QAAA,MAAK,EAAS,SAHV;AAIJ,QAAA,YAAY,EAAE;AAJV,OAZN;AAmBF,cAAQ;AACJ,QAAA,IAAG,EAAW,SADV;AAEJ,QAAA,MAAK,EAAS,SAFV;AAGJ,QAAA,MAAK,EAAS,SAHV;AAIJ,QAAA,YAAY,EAAE;AAJV;AAnBN;AAtCH;AAH8B,C;;UAuE3B,c,CAAC,a,EAAe,gB,EAAkB;AAAC,EAAA,KAAK,EAAA,SAAA,CAAA,SAAA,CAAY,IAAZ;AAAN,C;UAClC,c,CAAC,a,EAAe,iB,EAAmB;AAAC,EAAA,KAAK,EAAE,UAAU,IAAV,EAAgB;AACrE,QAAI,EAAE,IAAG,IAAK,IAAI,CAAC,MAAf,CAAJ,EAA4B;AACxB,YAAM,IAAI,KAAJ,CACF,4DACA,mBAFE,CAAN;AAIJ;;AAEA,IAAA,aAAa,CAAC,cAAd,CAA6B,IAAI,CAAC,MAAL,CAAY,WAAZ,EAA7B,IAA0D,IAA1D;AACH;AATgD,C;;UAYnC,c,CAAC,a,EAAe,S,EAAW;AAAC,EAAA,KAAK,EAAA,2BAAA,CAAA,SAAA,CAAA,CAAS;AAAf,C;;;UAI3B,c,CAAC,a,EAAe,e,EAAiB;AAC3C,EAAA,UAAU,EAAE,IAD+B;AAE3C,EAAA,QAAO,EAAK,IAF+B;AAG3C,EAAA,KAAI,EAAQ;AAH+B,C;;AAM/C,aAAa,CAAC,SAAd,CAAwB,eAAxB,GAA0C,YAAY;AAClD;AACA,SAAO;AACH,IAAA,MAAM,EAAE,KAAK;AADV,GAAP;AAGH,CALD;;AAOA,aAAa,CAAC,SAAd,CAAwB,eAAxB,GAA0C,UAAU,GAAV,EAAe,OAAf,EAAwB,OAAxB,EAAiC,QAAjC,EAA2C;AACjF,MAAI,QAAO,GAAI,IAAE,cAAA,CAAA,SAAA,CAAF,CAAa,OAAb,EAAsB,OAAtB,EAA+B,QAA/B,CAAf;AACA,SAAO,QAAQ,CAAC,OAAT,CAAiB,GAAjB,CAAP;AACH,CAHD;;AAKA,aAAa,CAAC,SAAd,CAAwB,uBAAxB,GAAkD,UAAU,MAAV,EAAkB;AAChE,MAAI,UAAS,GAAI,aAAa,CAAC,cAA/B;AACA,MAAI,IAAG,GAAU,UAAU,CAAC,MAAM,CAAC,WAAP,EAAD,CAA3B,CAFgE,CAIhE;AACA;;AACA,SAAO,IAAP,EAAa;AACT,QAAI,IAAI,CAAC,kBAAT,EAA6B;AACzB,aAAO,IAAI,CAAC,kBAAZ;AACJ;;AAEA,IAAA,IAAG,GAAI,IAAI,CAAC,YAAL,IAAqB,UAAU,CAAC,IAAI,CAAC,YAAL,CAAkB,WAAlB,EAAD,CAAtC;AACJ;;AAEA,QAAM,IAAI,KAAJ,CACF,yDACA,4BADA,GAC+B,MAF7B,CAAN;AAIH,CAlBD;;AAoBA,aAAa,CAAC,SAAd,CAAwB,OAAxB,GAAkC,UAAU,OAAV,EAAmB,MAAnB,EAA2B;AACzD,MAAI,MAAK,GAAI,EAAb;AAAA,MACI,CADJ;AAAA,MACO,GADP;AAAA,MACY,IADZ;AAAA,MACkB,EADlB;AAAA,MACsB,KADtB;AAAA,MAC6B,GAD7B;;AAGA,OAAK,CAAA,GAAI,CAAJ,EAAO,GAAE,GAAI,OAAO,CAAC,MAA1B,EAAkC,CAAA,GAAI,GAAtC,EAA2C,CAAA,IAAK,CAAhD,EAAmD;AAC/C,IAAA,IAAG,GAAI,OAAO,CAAC,CAAD,CAAd,CAD+C,CAG/C;;AACA,QAAI,OAAO,IAAP,KAAgB,QAApB,EAA8B;AAC1B,MAAA,MAAK,IAAK,IAAV;AACA;AACJ;;AAEA,IAAA,EAAC,GAAI,IAAI,CAAC,EAAV,CAT+C,CAW/C;;AACA,QAAI,EAAE,MAAK,IAAG,WAAA,CAAA,GAAA,CAAM,IAAN,CAAW,MAAX,EAAmB,EAAnB,CAAV,CAAJ,EAAuC;AACrC,MAAA,GAAE,GAAI,IAAI,KAAJ,CAAU,mCAAmC,EAA7C,CAAN;AACA,MAAA,GAAG,CAAC,UAAJ,GAAiB,EAAjB;AACA,YAAM,GAAN;AACF;;AAEA,IAAA,KAAI,GAAI,MAAM,CAAC,EAAD,CAAd,CAlB+C,CAoB/C;AACA;AACA;;AACA,QAAI,IAAI,CAAC,OAAT,EAAkB;AACd,MAAA,MAAK,IAAK,KAAK,OAAL,CAAa,IAAI,CAAC,SAAL,CAAe,KAAf,CAAb,EAAoC,MAApC,CAAV;AACJ,KAFA,MAEO;AACH,MAAA,MAAK,IAAK,IAAI,CAAC,MAAL,CAAY,KAAZ,CAAV;AACJ;AACJ;;AAEA,SAAO,MAAP;AACH,CAnCD;;AAqCA,aAAa,CAAC,SAAd,CAAwB,aAAxB,GAAwC,UAAU,QAAV,EAAoB,OAApB,EAA6B;AACjE,MAAI,aAAY,GAAI,EAApB;AAAA,MACI,IADJ;AAAA,MACU,UADV;;AAGA,OAAK,IAAL,IAAa,QAAb,EAAuB;AACnB,QAAI,CAAA,WAAA,CAAA,GAAA,CAAK,IAAL,CAAU,QAAV,EAAoB,IAApB,CAAJ,EAA+B;AAAE;AAAU;;AAE3C,IAAA,aAAa,CAAC,IAAD,CAAb,GAAsB,UAAS,GAAE,SAAA,CAAA,SAAA,CAAY,QAAQ,CAAC,IAAD,CAApB,CAAjC;;AAEA,QAAI,OAAM,IAAG,WAAA,CAAA,GAAA,CAAM,IAAN,CAAW,OAAX,EAAoB,IAApB,CAAb,EAAwC;kBAC9B,M,CAAC,U,EAAY,OAAO,CAAC,IAAD,C;AAC9B;AACJ;;AAEA,SAAO,aAAP;AACH,CAfD;;AAiBA,aAAa,CAAC,SAAd,CAAwB,cAAxB,GAAyC,UAAU,OAAV,EAAmB;AACxD,MAAI,OAAO,OAAP,KAAmB,QAAvB,EAAiC;AAC7B,IAAA,OAAM,GAAI,CAAC,OAAD,CAAV;AACJ,GAHwD,CAKxD;;;AACA,EAAA,OAAM,GAAI,CAAC,OAAM,IAAK,EAAZ,EAAgB,MAAhB,CAAuB,aAAa,CAAC,aAArC,CAAV;AAEA,MAAI,UAAS,GAAI,aAAa,CAAC,cAA/B;AACA,MAAI,CAAJ,EAAO,GAAP,EAAY,WAAZ,EAAyB,IAAzB,CATwD,CAWxD;AACA;AACA;AACA;AACA;;AACA,OAAK,CAAA,GAAI,CAAJ,EAAO,GAAE,GAAI,OAAO,CAAC,MAA1B,EAAkC,CAAA,GAAI,GAAtC,EAA2C,CAAA,IAAK,CAAhD,EAAmD;AAC/C,IAAA,WAAU,GAAI,OAAO,CAAC,CAAD,CAAP,CAAW,WAAX,GAAyB,KAAzB,CAA+B,GAA/B,CAAd;;AAEA,WAAO,WAAW,CAAC,MAAnB,EAA2B;AACvB,MAAA,IAAG,GAAI,UAAU,CAAC,WAAW,CAAC,IAAZ,CAAiB,GAAjB,CAAD,CAAjB;;AACA,UAAI,IAAJ,EAAU;AACN;AACA;AACA,eAAO,IAAI,CAAC,MAAZ;AACJ;;AAEA,MAAA,WAAW,CAAC,GAAZ;AACJ;AACJ;;AAEA,MAAI,aAAY,GAAI,OAAO,CAAC,GAAR,EAApB;AACA,QAAM,IAAI,KAAJ,CACF,6DACA,OAAO,CAAC,IAAR,CAAa,IAAb,CADA,GACqB,2BADrB,GACmD,aAFjD,CAAN;AAIH,CApCD","sourcesContent":["/*\nCopyright (c) 2014, Yahoo! Inc. All rights reserved.\nCopyrights licensed under the New BSD License.\nSee the accompanying LICENSE file for terms.\n*/\n\n/* jslint esnext: true */\n\nimport {extend, hop} from './utils';\nimport {defineProperty, objCreate} from './es5';\nimport Compiler from './compiler';\nimport parser from 'intl-messageformat-parser';\n\nexport default MessageFormat;\n\n// -- MessageFormat --------------------------------------------------------\n\nfunction MessageFormat(message, locales, formats) {\n    // Parse string messages into an AST.\n    var ast = typeof message === 'string' ?\n            MessageFormat.__parse(message) : message;\n\n    if (!(ast && ast.type === 'messageFormatPattern')) {\n        throw new TypeError('A message must be provided as a String or AST.');\n    }\n\n    // Creates a new object with the specified `formats` merged with the default\n    // formats.\n    formats = this._mergeFormats(MessageFormat.formats, formats);\n\n    // Defined first because it's used to build the format pattern.\n    defineProperty(this, '_locale',  {value: this._resolveLocale(locales)});\n\n    // Compile the `ast` to a pattern that is highly optimized for repeated\n    // `format()` invocations. **Note:** This passes the `locales` set provided\n    // to the constructor instead of just the resolved locale.\n    var pluralFn = this._findPluralRuleFunction(this._locale);\n    var pattern  = this._compilePattern(ast, locales, formats, pluralFn);\n\n    // \"Bind\" `format()` method to `this` so it can be passed by reference like\n    // the other `Intl` APIs.\n    var messageFormat = this;\n    this.format = function (values) {\n      try {\n        return messageFormat._format(pattern, values);\n      } catch (e) {\n        if (e.variableId) {\n          throw new Error(\n            'The intl string context variable \\'' + e.variableId + '\\'' +\n            ' was not provided to the string \\'' + message + '\\''\n          );\n        } else {\n          throw e;\n        }\n      }\n    };\n}\n\n// Default format options used as the prototype of the `formats` provided to the\n// constructor. These are used when constructing the internal Intl.NumberFormat\n// and Intl.DateTimeFormat instances.\ndefineProperty(MessageFormat, 'formats', {\n    enumerable: true,\n\n    value: {\n        number: {\n            'currency': {\n                style: 'currency'\n            },\n\n            'percent': {\n                style: 'percent'\n            }\n        },\n\n        date: {\n            'short': {\n                month: 'numeric',\n                day  : 'numeric',\n                year : '2-digit'\n            },\n\n            'medium': {\n                month: 'short',\n                day  : 'numeric',\n                year : 'numeric'\n            },\n\n            'long': {\n                month: 'long',\n                day  : 'numeric',\n                year : 'numeric'\n            },\n\n            'full': {\n                weekday: 'long',\n                month  : 'long',\n                day    : 'numeric',\n                year   : 'numeric'\n            }\n        },\n\n        time: {\n            'short': {\n                hour  : 'numeric',\n                minute: 'numeric'\n            },\n\n            'medium':  {\n                hour  : 'numeric',\n                minute: 'numeric',\n                second: 'numeric'\n            },\n\n            'long': {\n                hour        : 'numeric',\n                minute      : 'numeric',\n                second      : 'numeric',\n                timeZoneName: 'short'\n            },\n\n            'full': {\n                hour        : 'numeric',\n                minute      : 'numeric',\n                second      : 'numeric',\n                timeZoneName: 'short'\n            }\n        }\n    }\n});\n\n// Define internal private properties for dealing with locale data.\ndefineProperty(MessageFormat, '__localeData__', {value: objCreate(null)});\ndefineProperty(MessageFormat, '__addLocaleData', {value: function (data) {\n    if (!(data && data.locale)) {\n        throw new Error(\n            'Locale data provided to IntlMessageFormat is missing a ' +\n            '`locale` property'\n        );\n    }\n\n    MessageFormat.__localeData__[data.locale.toLowerCase()] = data;\n}});\n\n// Defines `__parse()` static method as an exposed private.\ndefineProperty(MessageFormat, '__parse', {value: parser.parse});\n\n// Define public `defaultLocale` property which defaults to English, but can be\n// set by the developer.\ndefineProperty(MessageFormat, 'defaultLocale', {\n    enumerable: true,\n    writable  : true,\n    value     : undefined\n});\n\nMessageFormat.prototype.resolvedOptions = function () {\n    // TODO: Provide anything else?\n    return {\n        locale: this._locale\n    };\n};\n\nMessageFormat.prototype._compilePattern = function (ast, locales, formats, pluralFn) {\n    var compiler = new Compiler(locales, formats, pluralFn);\n    return compiler.compile(ast);\n};\n\nMessageFormat.prototype._findPluralRuleFunction = function (locale) {\n    var localeData = MessageFormat.__localeData__;\n    var data       = localeData[locale.toLowerCase()];\n\n    // The locale data is de-duplicated, so we have to traverse the locale's\n    // hierarchy until we find a `pluralRuleFunction` to return.\n    while (data) {\n        if (data.pluralRuleFunction) {\n            return data.pluralRuleFunction;\n        }\n\n        data = data.parentLocale && localeData[data.parentLocale.toLowerCase()];\n    }\n\n    throw new Error(\n        'Locale data added to IntlMessageFormat is missing a ' +\n        '`pluralRuleFunction` for :' + locale\n    );\n};\n\nMessageFormat.prototype._format = function (pattern, values) {\n    var result = '',\n        i, len, part, id, value, err;\n\n    for (i = 0, len = pattern.length; i < len; i += 1) {\n        part = pattern[i];\n\n        // Exist early for string parts.\n        if (typeof part === 'string') {\n            result += part;\n            continue;\n        }\n\n        id = part.id;\n\n        // Enforce that all required values are provided by the caller.\n        if (!(values && hop.call(values, id))) {\n          err = new Error('A value must be provided for: ' + id);\n          err.variableId = id;\n          throw err;\n        }\n\n        value = values[id];\n\n        // Recursively format plural and select parts' option â€” which can be a\n        // nested pattern structure. The choosing of the option to use is\n        // abstracted-by and delegated-to the part helper object.\n        if (part.options) {\n            result += this._format(part.getOption(value), values);\n        } else {\n            result += part.format(value);\n        }\n    }\n\n    return result;\n};\n\nMessageFormat.prototype._mergeFormats = function (defaults, formats) {\n    var mergedFormats = {},\n        type, mergedType;\n\n    for (type in defaults) {\n        if (!hop.call(defaults, type)) { continue; }\n\n        mergedFormats[type] = mergedType = objCreate(defaults[type]);\n\n        if (formats && hop.call(formats, type)) {\n            extend(mergedType, formats[type]);\n        }\n    }\n\n    return mergedFormats;\n};\n\nMessageFormat.prototype._resolveLocale = function (locales) {\n    if (typeof locales === 'string') {\n        locales = [locales];\n    }\n\n    // Create a copy of the array so we can push on the default locale.\n    locales = (locales || []).concat(MessageFormat.defaultLocale);\n\n    var localeData = MessageFormat.__localeData__;\n    var i, len, localeParts, data;\n\n    // Using the set of locales + the default locale, we look for the first one\n    // which that has been registered. When data does not exist for a locale, we\n    // traverse its ancestors to find something that's been registered within\n    // its hierarchy of locales. Since we lack the proper `parentLocale` data\n    // here, we must take a naive approach to traversal.\n    for (i = 0, len = locales.length; i < len; i += 1) {\n        localeParts = locales[i].toLowerCase().split('-');\n\n        while (localeParts.length) {\n            data = localeData[localeParts.join('-')];\n            if (data) {\n                // Return the normalized locale string; e.g., we return \"en-US\",\n                // instead of \"en-us\".\n                return data.locale;\n            }\n\n            localeParts.pop();\n        }\n    }\n\n    var defaultLocale = locales.pop();\n    throw new Error(\n        'No locale data has been added to IntlMessageFormat for: ' +\n        locales.join(', ') + ', or the default locale: ' + defaultLocale\n    );\n};\n"],"sourceRoot":"/"},"metadata":{},"sourceType":"script"}