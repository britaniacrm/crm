{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/app/containers/AlertList/AlertList.js\";\nimport React, { useEffect, useCallback, useMemo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Alert } from '@material-ui/lab';\nimport { AppActions } from '@britania-crm/stores/app';\nimport { selectAlerts } from '@britania-crm/stores/app/app.selectors';\nimport useStyles, { Container } from './styles';\nlet timer = null;\n\nconst AlertList = () => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const alerts = useSelector(selectAlerts);\n  const lastMessageIndex = useMemo(() => alerts.length - 1, [alerts.length]);\n  const lastAlert = useMemo(() => alerts[lastMessageIndex], [alerts, lastMessageIndex]);\n  const closeAlert = useCallback(id => dispatch(AppActions.removeAlert(id)), [dispatch]); // Limpar contador na fase de desmontagem do componente\n\n  useEffect(() => () => timer && clearTimeout(timer), []);\n  useEffect(() => {\n    if (lastMessageIndex >= 0) {\n      timer = setTimeout(() => closeAlert(lastAlert.id), 3000);\n    }\n  }, [alerts]); // eslint-disable-line\n\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, lastMessageIndex >= 0 && alerts[lastMessageIndex].expiredAt >= new Date().getTime() && /*#__PURE__*/React.createElement(Alert, {\n    key: lastAlert.id,\n    severity: lastAlert.type,\n    onClose: () => closeAlert(lastAlert.id),\n    className: classes.alert,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 9\n    }\n  }, lastAlert.message));\n};\n\nexport default AlertList;","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/app/containers/AlertList/AlertList.js"],"names":["React","useEffect","useCallback","useMemo","useDispatch","useSelector","Alert","AppActions","selectAlerts","useStyles","Container","timer","AlertList","classes","dispatch","alerts","lastMessageIndex","length","lastAlert","closeAlert","id","removeAlert","clearTimeout","setTimeout","expiredAt","Date","getTime","type","alert","message"],"mappings":";AAAA,OAAOA,KAAP,IACEC,SADF,EAEEC,WAFF,EAGEC,OAHF,QAIO,OAJP;AAKA,SACEC,WADF,EAEEC,WAFF,QAGO,aAHP;AAKA,SAASC,KAAT,QAAsB,kBAAtB;AAEA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,YAAT,QAA6B,wCAA7B;AAEA,OAAOC,SAAP,IAAoBC,SAApB,QAAqC,UAArC;AAEA,IAAIC,KAAK,GAAG,IAAZ;;AAEA,MAAMC,SAAS,GAAG,MAAM;AACtB,QAAMC,OAAO,GAAGJ,SAAS,EAAzB;AAEA,QAAMK,QAAQ,GAAGV,WAAW,EAA5B;AACA,QAAMW,MAAM,GAAGV,WAAW,CAACG,YAAD,CAA1B;AAEA,QAAMQ,gBAAgB,GAAGb,OAAO,CAC9B,MAAMY,MAAM,CAACE,MAAP,GAAgB,CADQ,EAE9B,CAACF,MAAM,CAACE,MAAR,CAF8B,CAAhC;AAKA,QAAMC,SAAS,GAAGf,OAAO,CACvB,MAAMY,MAAM,CAACC,gBAAD,CADW,EAEvB,CAACD,MAAD,EAASC,gBAAT,CAFuB,CAAzB;AAKA,QAAMG,UAAU,GAAGjB,WAAW,CAC3BkB,EAAD,IAAQN,QAAQ,CAACP,UAAU,CAACc,WAAX,CAAuBD,EAAvB,CAAD,CADY,EAE5B,CAACN,QAAD,CAF4B,CAA9B,CAhBsB,CAqBtB;;AACAb,EAAAA,SAAS,CAAC,MAAM,MAAMU,KAAK,IAAIW,YAAY,CAACX,KAAD,CAAlC,EAA2C,EAA3C,CAAT;AAEAV,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIe,gBAAgB,IAAI,CAAxB,EAA2B;AACzBL,MAAAA,KAAK,GAAGY,UAAU,CAAC,MAAMJ,UAAU,CAACD,SAAS,CAACE,EAAX,CAAjB,EAAiC,IAAjC,CAAlB;AACD;AACF,GAJQ,EAIN,CAACL,MAAD,CAJM,CAAT,CAxBsB,CA4BT;;AAEb,sBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,gBAAgB,IAAI,CAApB,IAAyBD,MAAM,CAACC,gBAAD,CAAN,CAAyBQ,SAAzB,IAAuC,IAAIC,IAAJ,GAAWC,OAAX,EAAhE,iBACC,oBAAC,KAAD;AACE,IAAA,GAAG,EAAGR,SAAS,CAACE,EADlB;AAEE,IAAA,QAAQ,EAAGF,SAAS,CAACS,IAFvB;AAGE,IAAA,OAAO,EAAG,MAAMR,UAAU,CAACD,SAAS,CAACE,EAAX,CAH5B;AAIE,IAAA,SAAS,EAAGP,OAAO,CAACe,KAJtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGV,SAAS,CAACW,OANb,CAFJ,CADF;AAcD,CA5CD;;AA8CA,eAAejB,SAAf","sourcesContent":["import React, {\n  useEffect,\n  useCallback,\n  useMemo\n} from 'react'\nimport {\n  useDispatch,\n  useSelector\n} from 'react-redux'\n\nimport { Alert } from '@material-ui/lab'\n\nimport { AppActions } from '@britania-crm/stores/app'\nimport { selectAlerts } from '@britania-crm/stores/app/app.selectors'\n\nimport useStyles, { Container } from './styles'\n\nlet timer = null\n\nconst AlertList = () => {\n  const classes = useStyles()\n\n  const dispatch = useDispatch()\n  const alerts = useSelector(selectAlerts)\n\n  const lastMessageIndex = useMemo(\n    () => alerts.length - 1,\n    [alerts.length]\n  )\n\n  const lastAlert = useMemo(\n    () => alerts[lastMessageIndex],\n    [alerts, lastMessageIndex]\n  )\n\n  const closeAlert = useCallback(\n    (id) => dispatch(AppActions.removeAlert(id)),\n    [dispatch]\n  )\n\n  // Limpar contador na fase de desmontagem do componente\n  useEffect(() => () => timer && clearTimeout(timer), [])\n\n  useEffect(() => {\n    if (lastMessageIndex >= 0) {\n      timer = setTimeout(() => closeAlert(lastAlert.id), 3000)\n    }\n  }, [alerts]) // eslint-disable-line\n\n  return (\n    <Container>\n      {lastMessageIndex >= 0 && alerts[lastMessageIndex].expiredAt >= (new Date().getTime()) && (\n        <Alert\n          key={ lastAlert.id }\n          severity={ lastAlert.type }\n          onClose={ () => closeAlert(lastAlert.id) }\n          className={ classes.alert }\n        >\n          {lastAlert.message}\n        </Alert>\n      )}\n    </Container>\n  )\n}\n\nexport default AlertList\n"]},"metadata":{},"sourceType":"module"}