{"ast":null,"code":"import moment from 'moment/moment';\nconst tzHours = 3;\nexport const dateBackFormat = 'YYYY-MM-DD';\nexport const dateTimeBackFormat = 'YYYY-MM-DD[T]HH:mm:ss.sss[Z]';\nexport const timeBackFormat = 'HH:mm:ss.sss[Z]';\nexport const monthYearBackFormat = 'YYYY-MM';\nexport const monthDayBackFormat = 'MM-DD';\nexport const monthDayFriendlyFormat = 'DD/MM';\nexport const dateFriendlyFormat = 'DD/MM/YYYY';\nexport const dateTimeFriendlyFormat = 'DD/MM/YYYY HH:mm:ss';\nexport const leapYear = '2020';\nexport const formatBackDateToFriendlyFormat = (date, tz = tzHours) => moment(date, dateTimeBackFormat).subtract(tz, 'hours').format(dateFriendlyFormat);\nexport const formatBackDateToIsoFormat = (date, tz = tzHours) => moment(date, dateBackFormat).subtract(tz, 'hours').toISOString();\nexport const formatBackDateTimeToFriendlyFormat = (date, tz = tzHours) => moment(date, dateTimeBackFormat).subtract(tz, 'hours').format(dateTimeFriendlyFormat);\nexport const formatBackDateTimeToFriendlyDateFormat = (date, tz = tzHours) => moment(date, dateTimeBackFormat).subtract(tz, 'hours').format(dateFriendlyFormat);\nexport const formatBackDateTimeToBackDateFormat = (date, tz = tzHours) => moment(date, dateTimeBackFormat).subtract(tz, 'hours').format(dateBackFormat);\nexport const formatFriendlyDateToBackFormat = date => moment(date, dateBackFormat).format(dateTimeBackFormat);\nexport const formatFriendlyDateFromBackFormat = date => moment(date, dateBackFormat).format(dateFriendlyFormat);","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/core/utils/date.js"],"names":["moment","tzHours","dateBackFormat","dateTimeBackFormat","timeBackFormat","monthYearBackFormat","monthDayBackFormat","monthDayFriendlyFormat","dateFriendlyFormat","dateTimeFriendlyFormat","leapYear","formatBackDateToFriendlyFormat","date","tz","subtract","format","formatBackDateToIsoFormat","toISOString","formatBackDateTimeToFriendlyFormat","formatBackDateTimeToFriendlyDateFormat","formatBackDateTimeToBackDateFormat","formatFriendlyDateToBackFormat","formatFriendlyDateFromBackFormat"],"mappings":"AACA,OAAOA,MAAP,MAAmB,eAAnB;AAEA,MAAMC,OAAO,GAAG,CAAhB;AAEA,OAAO,MAAMC,cAAc,GAAG,YAAvB;AACP,OAAO,MAAMC,kBAAkB,GAAG,8BAA3B;AACP,OAAO,MAAMC,cAAc,GAAG,iBAAvB;AACP,OAAO,MAAMC,mBAAmB,GAAG,SAA5B;AACP,OAAO,MAAMC,kBAAkB,GAAG,OAA3B;AAEP,OAAO,MAAMC,sBAAsB,GAAG,OAA/B;AACP,OAAO,MAAMC,kBAAkB,GAAG,YAA3B;AACP,OAAO,MAAMC,sBAAsB,GAAG,qBAA/B;AAEP,OAAO,MAAMC,QAAQ,GAAG,MAAjB;AAEP,OAAO,MAAMC,8BAA8B,GAAG,CAACC,IAAD,EAAOC,EAAE,GAAGZ,OAAZ,KAAwBD,MAAM,CAACY,IAAD,EAAOT,kBAAP,CAAN,CAAiCW,QAAjC,CAA0CD,EAA1C,EAA8C,OAA9C,EAAuDE,MAAvD,CAA8DP,kBAA9D,CAA/D;AACP,OAAO,MAAMQ,yBAAyB,GAAG,CAACJ,IAAD,EAAOC,EAAE,GAAGZ,OAAZ,KAAwBD,MAAM,CAACY,IAAD,EAAOV,cAAP,CAAN,CAA6BY,QAA7B,CAAsCD,EAAtC,EAA0C,OAA1C,EAAmDI,WAAnD,EAA1D;AACP,OAAO,MAAMC,kCAAkC,GAAG,CAACN,IAAD,EAAOC,EAAE,GAAGZ,OAAZ,KAAwBD,MAAM,CAACY,IAAD,EAAOT,kBAAP,CAAN,CAAiCW,QAAjC,CAA0CD,EAA1C,EAA8C,OAA9C,EAAuDE,MAAvD,CAA8DN,sBAA9D,CAAnE;AACP,OAAO,MAAMU,sCAAsC,GAAG,CAACP,IAAD,EAAOC,EAAE,GAAGZ,OAAZ,KAAwBD,MAAM,CAACY,IAAD,EAAOT,kBAAP,CAAN,CAAiCW,QAAjC,CAA0CD,EAA1C,EAA8C,OAA9C,EAAuDE,MAAvD,CAA8DP,kBAA9D,CAAvE;AAEP,OAAO,MAAMY,kCAAkC,GAAG,CAACR,IAAD,EAAOC,EAAE,GAAGZ,OAAZ,KAAwBD,MAAM,CAACY,IAAD,EAAOT,kBAAP,CAAN,CAAiCW,QAAjC,CAA0CD,EAA1C,EAA8C,OAA9C,EAAuDE,MAAvD,CAA8Db,cAA9D,CAAnE;AAEP,OAAO,MAAMmB,8BAA8B,GAAIT,IAAD,IAAUZ,MAAM,CAACY,IAAD,EAAOV,cAAP,CAAN,CAA6Ba,MAA7B,CAAoCZ,kBAApC,CAAjD;AACP,OAAO,MAAMmB,gCAAgC,GAAIV,IAAD,IAAUZ,MAAM,CAACY,IAAD,EAAOV,cAAP,CAAN,CAA6Ba,MAA7B,CAAoCP,kBAApC,CAAnD","sourcesContent":["\nimport moment from 'moment/moment'\n\nconst tzHours = 3\n\nexport const dateBackFormat = 'YYYY-MM-DD'\nexport const dateTimeBackFormat = 'YYYY-MM-DD[T]HH:mm:ss.sss[Z]'\nexport const timeBackFormat = 'HH:mm:ss.sss[Z]'\nexport const monthYearBackFormat = 'YYYY-MM'\nexport const monthDayBackFormat = 'MM-DD'\n\nexport const monthDayFriendlyFormat = 'DD/MM'\nexport const dateFriendlyFormat = 'DD/MM/YYYY'\nexport const dateTimeFriendlyFormat = 'DD/MM/YYYY HH:mm:ss'\n\nexport const leapYear = '2020'\n\nexport const formatBackDateToFriendlyFormat = (date, tz = tzHours) => moment(date, dateTimeBackFormat).subtract(tz, 'hours').format(dateFriendlyFormat)\nexport const formatBackDateToIsoFormat = (date, tz = tzHours) => moment(date, dateBackFormat).subtract(tz, 'hours').toISOString()\nexport const formatBackDateTimeToFriendlyFormat = (date, tz = tzHours) => moment(date, dateTimeBackFormat).subtract(tz, 'hours').format(dateTimeFriendlyFormat)\nexport const formatBackDateTimeToFriendlyDateFormat = (date, tz = tzHours) => moment(date, dateTimeBackFormat).subtract(tz, 'hours').format(dateFriendlyFormat)\n\nexport const formatBackDateTimeToBackDateFormat = (date, tz = tzHours) => moment(date, dateTimeBackFormat).subtract(tz, 'hours').format(dateBackFormat)\n\nexport const formatFriendlyDateToBackFormat = (date) => moment(date, dateBackFormat).format(dateTimeBackFormat)\nexport const formatFriendlyDateFromBackFormat = (date) => moment(date, dateBackFormat).format(dateFriendlyFormat)\n"]},"metadata":{},"sourceType":"module"}