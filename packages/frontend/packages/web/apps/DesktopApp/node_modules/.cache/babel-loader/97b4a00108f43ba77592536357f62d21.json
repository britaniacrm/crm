{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/workflowPanel/screens/WorkflowPanelScreen/WorkflowPanelScreen.js\";\n\n/* eslint-disable react/prop-types */\nimport React, { useMemo, useCallback, useEffect, useState } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport isEmpty from 'lodash/isEmpty';\nimport { useDialog } from '@britania-crm/dialog';\nimport { useT } from '@britania-crm/i18n';\nimport { workflows as workflowsCrmRoutes } from '@britania-crm/services/apis/crmApi/resources/routes';\nimport useCrmApi from '@britania-crm/services/hooks/useCrmApi';\nimport { WorkflowActions } from '@britania-crm/stores/workflow';\nimport colors from '@britania-crm/styles/colors';\nimport { formatBackDateToFriendlyFormat } from '@britania-crm/utils/date';\nimport CheckboxStatus from '@britania-crm/web-components/CheckboxStatus';\nimport DataTable from '@britania-crm/web-components/DataTable';\nimport LightTooltip from '@britania-crm/web-components/LightTooltip';\nimport { useRoutes } from '@britania-crm/web-src/routes/authenticated.routes';\nimport FilterWorkflowPanelModal from '../../modals/FilterWorkflowPanelModal/FilterWorkflowPanelModal';\nimport { Container, TableToolTipText } from './styled';\n\nconst WorkflowPanelScreen = () => {\n  const dispatch = useCallback(useDispatch(), []);\n  const {\n    routes,\n    currentRoutePermissions\n  } = useRoutes();\n  const history = useHistory();\n  const [loading, setLoading] = useState(false);\n  const [filters, setFilters] = useState({});\n  const {\n    data,\n    isValidating // mutate\n\n  } = useCrmApi([workflowsCrmRoutes.getAll, filters], {\n    params: filters\n  });\n  const t = useT();\n  const {\n    createDialog\n  } = useDialog();\n  useEffect(() => {\n    dispatch(WorkflowActions.getWorkflowTypes());\n  }, [dispatch]);\n  useEffect(() => {\n    if (isEmpty(data) && isValidating) {\n      setLoading(true);\n    } else if (!isValidating) {\n      setLoading(false);\n    }\n  }, [data, isValidating]);\n  const renderCellTooltip = useCallback(value => /*#__PURE__*/React.createElement(LightTooltip, {\n    title: value,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TableToolTipText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, value)), []);\n  const columns = useMemo(() => [{\n    title: t('title'),\n    field: 'title',\n    defaultSort: 'asc',\n    render: row => renderCellTooltip(row.title)\n  }, {\n    title: t('type'),\n    field: 'type',\n    render: row => renderCellTooltip(row.type)\n  }, {\n    title: t('version'),\n    field: 'version'\n  }, {\n    title: t('date start'),\n    field: 'dateStart',\n    render: row => formatBackDateToFriendlyFormat(row.dateStart)\n  }, {\n    title: t('date end'),\n    field: 'dateEnd',\n    render: row => formatBackDateToFriendlyFormat(row.dateEnd)\n  }, {\n    sorting: false,\n    title: t('status'),\n    field: 'status',\n\n    render(row) {\n      let status, color;\n\n      if (row.status === 'ACTIVE') {\n        status = t('running');\n      } else if (row.status === 'PROGRAMMED') {\n        status = t('programmed');\n        color = colors.warning.main;\n      } else if (row.status === 'EXPIRED') {\n        status = t('overdue');\n        color = colors.orange.base;\n      }\n\n      return /*#__PURE__*/React.createElement(CheckboxStatus, {\n        detached: true,\n        readOnly: true,\n        value: row.status !== 'INACTIVE',\n        style: {\n          color: colors.black2\n        },\n        activeStatus: status,\n        activeColor: color,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 11\n        }\n      });\n    }\n\n  }], [renderCellTooltip, t]);\n  const handleOpenFilterModal = useCallback(() => {\n    if (!isEmpty(filters)) {\n      setFilters({});\n    }\n\n    createDialog({\n      id: 'filterModal',\n      Component: FilterWorkflowPanelModal,\n      props: {\n        handleSearch: setFilters\n      }\n    });\n  }, [createDialog, filters]);\n  const onAddClick = useCallback(() => history.push(routes.workflowPanelCreate.path), [history, routes.workflowPanelCreate.path]);\n  const onEditClick = useCallback((event, row) => {\n    if (row.status === 'PROGRAMMED' || row.status === 'ACTIVE' || row.status === 'EXPIRED') {\n      history.push(routes.workflowPanelEdit.path, {\n        workflowId: row.id\n      });\n    }\n  }, [history, routes.workflowPanelEdit.path]);\n  const onRowClick = useCallback((event, row) => {\n    history.push(routes.workflowPanelView.path, {\n      workflowId: row.id\n    });\n  }, [history, routes.workflowPanelView.path]);\n  const conditionToEdit = useCallback(row => row.status === 'PROGRAMMED' || row.status === 'ACTIVE' || row.status === 'EXPIRED', []);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DataTable, {\n    options: {\n      search: false\n    },\n    data: data,\n    columns: columns,\n    loading: loading,\n    title: t('workflow panel'),\n    addFilterTitle: t('filter data'),\n    addTitle: t('add new workflow'),\n    onAddClick: currentRoutePermissions.INCLUIR && onAddClick,\n    onEditClick: currentRoutePermissions.EDITAR && onEditClick,\n    conditionToEdit: conditionToEdit,\n    onFilterClick: handleOpenFilterModal,\n    onRowClick: onRowClick,\n    onGoBack: history.goBack,\n    disableRowClick: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default WorkflowPanelScreen;","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/workflowPanel/screens/WorkflowPanelScreen/WorkflowPanelScreen.js"],"names":["React","useMemo","useCallback","useEffect","useState","useDispatch","useHistory","isEmpty","useDialog","useT","workflows","workflowsCrmRoutes","useCrmApi","WorkflowActions","colors","formatBackDateToFriendlyFormat","CheckboxStatus","DataTable","LightTooltip","useRoutes","FilterWorkflowPanelModal","Container","TableToolTipText","WorkflowPanelScreen","dispatch","routes","currentRoutePermissions","history","loading","setLoading","filters","setFilters","data","isValidating","getAll","params","t","createDialog","getWorkflowTypes","renderCellTooltip","value","columns","title","field","defaultSort","render","row","type","dateStart","dateEnd","sorting","status","color","warning","main","orange","base","black2","handleOpenFilterModal","id","Component","props","handleSearch","onAddClick","push","workflowPanelCreate","path","onEditClick","event","workflowPanelEdit","workflowId","onRowClick","workflowPanelView","conditionToEdit","search","INCLUIR","EDITAR","goBack"],"mappings":"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","sourcesContent":["/* eslint-disable react/prop-types */\nimport React, {\n  useMemo,\n  useCallback,\n  useEffect,\n  useState\n} from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\n\nimport isEmpty from 'lodash/isEmpty'\n\nimport { useDialog } from '@britania-crm/dialog'\nimport { useT } from '@britania-crm/i18n'\nimport { workflows as workflowsCrmRoutes } from '@britania-crm/services/apis/crmApi/resources/routes'\nimport useCrmApi from '@britania-crm/services/hooks/useCrmApi'\nimport { WorkflowActions } from '@britania-crm/stores/workflow'\nimport colors from '@britania-crm/styles/colors'\nimport { formatBackDateToFriendlyFormat } from '@britania-crm/utils/date'\nimport CheckboxStatus from '@britania-crm/web-components/CheckboxStatus'\nimport DataTable from '@britania-crm/web-components/DataTable'\nimport LightTooltip from '@britania-crm/web-components/LightTooltip'\nimport { useRoutes } from '@britania-crm/web-src/routes/authenticated.routes'\n\nimport FilterWorkflowPanelModal from '../../modals/FilterWorkflowPanelModal/FilterWorkflowPanelModal'\nimport {\n  Container,\n  TableToolTipText\n} from './styled'\n\nconst WorkflowPanelScreen = () => {\n  const dispatch = useCallback(useDispatch(), [])\n  const { routes, currentRoutePermissions } = useRoutes()\n  const history = useHistory()\n\n  const [loading, setLoading] = useState(false)\n  const [filters, setFilters] = useState({})\n\n  const {\n    data,\n    isValidating\n    // mutate\n  } = useCrmApi([workflowsCrmRoutes.getAll, filters], { params: filters })\n\n  const t = useT()\n  const { createDialog } = useDialog()\n\n  useEffect(() => {\n    dispatch(WorkflowActions.getWorkflowTypes())\n  }, [dispatch])\n\n  useEffect(() => {\n    if (isEmpty(data) && isValidating) {\n      setLoading(true)\n    } else if (!isValidating) {\n      setLoading(false)\n    }\n  }, [data, isValidating])\n\n  const renderCellTooltip = useCallback((value) => (\n    <LightTooltip title={ value } >\n      <TableToolTipText>\n        {value}\n      </TableToolTipText>\n    </LightTooltip>\n  ), [])\n\n  const columns = useMemo(() => [\n    {\n      title: t('title'),\n      field: 'title',\n      defaultSort: 'asc',\n      render: (row) => renderCellTooltip(row.title)\n    },\n    {\n      title: t('type'),\n      field: 'type',\n      render: (row) => renderCellTooltip(row.type)\n    },\n    {\n      title: t('version'),\n      field: 'version'\n    },\n    {\n      title: t('date start'),\n      field: 'dateStart',\n      render: (row) => formatBackDateToFriendlyFormat(row.dateStart)\n    },\n    {\n      title: t('date end'),\n      field: 'dateEnd',\n      render: (row) => formatBackDateToFriendlyFormat(row.dateEnd)\n    },\n    {\n      sorting: false,\n      title: t('status'),\n      field: 'status',\n      render (row) {\n        let status, color\n\n        if (row.status === 'ACTIVE') {\n          status = t('running')\n        } else if (row.status === 'PROGRAMMED') {\n          status = t('programmed')\n          color = colors.warning.main\n        } else if (row.status === 'EXPIRED') {\n          status = t('overdue')\n          color = colors.orange.base\n        }\n\n        return (\n          <CheckboxStatus\n            detached\n            readOnly\n            value={ row.status !== 'INACTIVE' }\n            style={ { color: colors.black2 } }\n            activeStatus={ status }\n            activeColor={ color }\n          />\n        )\n      }\n    }\n  ], [renderCellTooltip, t])\n\n  const handleOpenFilterModal = useCallback(() => {\n    if (!isEmpty(filters)) {\n      setFilters({})\n    }\n\n    createDialog({\n      id: 'filterModal',\n      Component: FilterWorkflowPanelModal,\n      props: { handleSearch: setFilters }\n    })\n  }, [createDialog, filters])\n\n  const onAddClick = useCallback(\n    () => history.push(routes.workflowPanelCreate.path),\n    [history, routes.workflowPanelCreate.path]\n  )\n\n  const onEditClick = useCallback((event, row) => {\n    if (row.status === 'PROGRAMMED' || row.status === 'ACTIVE' || row.status === 'EXPIRED') {\n      history.push(routes.workflowPanelEdit.path, { workflowId: row.id })\n    }\n  }, [history, routes.workflowPanelEdit.path])\n\n  const onRowClick = useCallback((event, row) => {\n    history.push(routes.workflowPanelView.path, { workflowId: row.id })\n  }, [history, routes.workflowPanelView.path])\n\n  const conditionToEdit = useCallback((row) => row.status === 'PROGRAMMED' || row.status === 'ACTIVE' || row.status === 'EXPIRED', [])\n\n  return (\n    <Container>\n      <DataTable\n        options={ { search: false } }\n        data={ data }\n        columns={ columns }\n        loading={ loading }\n        title={ t('workflow panel') }\n        addFilterTitle={ t('filter data') }\n        addTitle={ t('add new workflow') }\n        onAddClick={ currentRoutePermissions.INCLUIR && onAddClick }\n        onEditClick={ currentRoutePermissions.EDITAR && onEditClick }\n        conditionToEdit={ conditionToEdit }\n        onFilterClick={ handleOpenFilterModal }\n        onRowClick={ onRowClick }\n        onGoBack={ history.goBack }\n        disableRowClick\n      />\n    </Container>\n  )\n}\n\nexport default WorkflowPanelScreen\n"]},"metadata":{},"sourceType":"module"}