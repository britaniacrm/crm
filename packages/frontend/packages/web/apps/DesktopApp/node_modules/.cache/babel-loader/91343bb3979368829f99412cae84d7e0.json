{"ast":null,"code":"import indexOf from 'lodash/indexOf';\nimport mapValues from 'lodash/mapValues';\nimport reduce from 'lodash/reduce';\nimport { USER_ACTIONS } from '@britania-crm/constants/auth.constants';\nexport const selectIsAuthenticated = state => !!state.auth.accessToken;\nexport const selectAccessToken = state => state.auth.accessToken;\nexport const selectAuthStatus = state => state.auth.status;\nexport const selectAuthError = state => state.auth.error;\nexport const selectHasAccessToMessageBoard = state => state.auth.hasAccessToMessageBoard;\nexport const selectRememberUser = state => state.auth.rememberUser;\nexport const selectUserIdFromToken = state => {\n  const {\n    userId\n  } = state.auth.jwtContent;\n  return userId;\n};\nexport const selectAuthUserAccesses = state => {\n  var _state$auth$jwtConten;\n\n  return (((_state$auth$jwtConten = state.auth.jwtContent) === null || _state$auth$jwtConten === void 0 ? void 0 : _state$auth$jwtConten.accesses) || '').split(',');\n};\nexport const selectAuthUserPermissions = state => {\n  const userAccesses = selectAuthUserAccesses(state);\n  return reduce(userAccesses, (acc, access) => {\n    var _state$auth$jwtConten2;\n\n    const accessByJWT = (_state$auth$jwtConten2 = state.auth.jwtContent) === null || _state$auth$jwtConten2 === void 0 ? void 0 : _state$auth$jwtConten2[access];\n\n    if (accessByJWT) {\n      try {\n        const accessJson = JSON.parse(accessByJWT);\n        const jsonSplitted = mapValues(accessJson, field => field.split(','));\n        return { ...acc,\n          [access]: { ...jsonSplitted,\n            permissions: mapValues(USER_ACTIONS, action => indexOf(jsonSplitted === null || jsonSplitted === void 0 ? void 0 : jsonSplitted.permissions, action) > -1)\n          }\n        };\n      } catch (e) {\n        return acc;\n      }\n    }\n\n    return acc;\n  }, {});\n};\nexport const selectUser = state => state.auth.user;\nexport const selectUserRepresentative = state => state.auth.user.representativeCodes;","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/core/stores/auth/auth.selectors.js"],"names":["indexOf","mapValues","reduce","USER_ACTIONS","selectIsAuthenticated","state","auth","accessToken","selectAccessToken","selectAuthStatus","status","selectAuthError","error","selectHasAccessToMessageBoard","hasAccessToMessageBoard","selectRememberUser","rememberUser","selectUserIdFromToken","userId","jwtContent","selectAuthUserAccesses","accesses","split","selectAuthUserPermissions","userAccesses","acc","access","accessByJWT","accessJson","JSON","parse","jsonSplitted","field","permissions","action","e","selectUser","user","selectUserRepresentative","representativeCodes"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,gBAApB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;AACA,OAAOC,MAAP,MAAmB,eAAnB;AAEA,SAASC,YAAT,QAA6B,wCAA7B;AAEA,OAAO,MAAMC,qBAAqB,GAAIC,KAAD,IAAW,CAAC,CAACA,KAAK,CAACC,IAAN,CAAWC,WAAtD;AAEP,OAAO,MAAMC,iBAAiB,GAAIH,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWC,WAAhD;AAEP,OAAO,MAAME,gBAAgB,GAAIJ,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWI,MAA/C;AAEP,OAAO,MAAMC,eAAe,GAAIN,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWM,KAA9C;AAEP,OAAO,MAAMC,6BAA6B,GAAIR,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWQ,uBAA5D;AAEP,OAAO,MAAMC,kBAAkB,GAAIV,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAWU,YAAjD;AAEP,OAAO,MAAMC,qBAAqB,GAAIZ,KAAD,IAAW;AAC9C,QAAM;AAAEa,IAAAA;AAAF,MAAab,KAAK,CAACC,IAAN,CAAWa,UAA9B;AACA,SAAOD,MAAP;AACD,CAHM;AAKP,OAAO,MAAME,sBAAsB,GAAIf,KAAD;AAAA;;AAAA,SAAW,CAAC,0BAAAA,KAAK,CAACC,IAAN,CAAWa,UAAX,gFAAuBE,QAAvB,KAAmC,EAApC,EAAwCC,KAAxC,CAA8C,GAA9C,CAAX;AAAA,CAA/B;AAEP,OAAO,MAAMC,yBAAyB,GAAIlB,KAAD,IAAW;AAClD,QAAMmB,YAAY,GAAGJ,sBAAsB,CAACf,KAAD,CAA3C;AAEA,SAAOH,MAAM,CAACsB,YAAD,EAAe,CAACC,GAAD,EAAMC,MAAN,KAAiB;AAAA;;AAC3C,UAAMC,WAAW,6BAAGtB,KAAK,CAACC,IAAN,CAAWa,UAAd,2DAAG,uBAAwBO,MAAxB,CAApB;;AACA,QAAIC,WAAJ,EAAiB;AACf,UAAI;AACF,cAAMC,UAAU,GAAGC,IAAI,CAACC,KAAL,CAAWH,WAAX,CAAnB;AACA,cAAMI,YAAY,GAAG9B,SAAS,CAAC2B,UAAD,EAAcI,KAAD,IAAWA,KAAK,CAACV,KAAN,CAAY,GAAZ,CAAxB,CAA9B;AACA,eAAO,EACL,GAAGG,GADE;AAEL,WAACC,MAAD,GAAU,EACR,GAAGK,YADK;AAERE,YAAAA,WAAW,EAAEhC,SAAS,CAACE,YAAD,EAAgB+B,MAAD,IAAYlC,OAAO,CAAC+B,YAAD,aAACA,YAAD,uBAACA,YAAY,CAAEE,WAAf,EAA4BC,MAA5B,CAAP,GAA6C,CAAC,CAAzE;AAFd;AAFL,SAAP;AAOD,OAVD,CAUE,OAAOC,CAAP,EAAU;AACV,eAAOV,GAAP;AACD;AACF;;AACD,WAAOA,GAAP;AACD,GAlBY,EAkBV,EAlBU,CAAb;AAmBD,CAtBM;AAwBP,OAAO,MAAMW,UAAU,GAAI/B,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAW+B,IAAzC;AAEP,OAAO,MAAMC,wBAAwB,GAAIjC,KAAD,IAAWA,KAAK,CAACC,IAAN,CAAW+B,IAAX,CAAgBE,mBAA5D","sourcesContent":["import indexOf from 'lodash/indexOf'\nimport mapValues from 'lodash/mapValues'\nimport reduce from 'lodash/reduce'\n\nimport { USER_ACTIONS } from '@britania-crm/constants/auth.constants'\n\nexport const selectIsAuthenticated = (state) => !!state.auth.accessToken\n\nexport const selectAccessToken = (state) => state.auth.accessToken\n\nexport const selectAuthStatus = (state) => state.auth.status\n\nexport const selectAuthError = (state) => state.auth.error\n\nexport const selectHasAccessToMessageBoard = (state) => state.auth.hasAccessToMessageBoard\n\nexport const selectRememberUser = (state) => state.auth.rememberUser\n\nexport const selectUserIdFromToken = (state) => {\n  const { userId } = state.auth.jwtContent\n  return userId\n}\n\nexport const selectAuthUserAccesses = (state) => (state.auth.jwtContent?.accesses || '').split(',')\n\nexport const selectAuthUserPermissions = (state) => {\n  const userAccesses = selectAuthUserAccesses(state)\n\n  return reduce(userAccesses, (acc, access) => {\n    const accessByJWT = state.auth.jwtContent?.[access]\n    if (accessByJWT) {\n      try {\n        const accessJson = JSON.parse(accessByJWT)\n        const jsonSplitted = mapValues(accessJson, (field) => field.split(','))\n        return {\n          ...acc,\n          [access]: {\n            ...jsonSplitted,\n            permissions: mapValues(USER_ACTIONS, (action) => indexOf(jsonSplitted?.permissions, action) > -1)\n          }\n        }\n      } catch (e) {\n        return acc\n      }\n    }\n    return acc\n  }, {})\n}\n\nexport const selectUser = (state) => state.auth.user\n\nexport const selectUserRepresentative = (state) => state.auth.user.representativeCodes\n"]},"metadata":{},"sourceType":"module"}