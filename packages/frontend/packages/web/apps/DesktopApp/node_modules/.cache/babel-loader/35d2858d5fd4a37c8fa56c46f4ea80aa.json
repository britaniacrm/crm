{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/components/TreeView/TreeView.js\";\nimport React, { useMemo, useCallback } from 'react';\nimport SortableTree, { toggleExpandedForAll } from 'react-sortable-tree';\nimport FileExplorerTheme from 'react-sortable-tree-theme-full-node-drag';\nimport PropTypes from 'prop-types';\nimport findIndex from 'lodash/findIndex';\nimport { MSG006 } from '@britania-crm/constants/feedbackMessages.constants';\nimport { treeTypes } from '@britania-crm/constants/workflow.constants';\nimport { useDialog } from '@britania-crm/dialog';\nimport ConfirmModal from '@britania-crm/web-components/Modal/ConfirmModal';\nimport Buttons from './Buttons';\nimport { formatResponseAndConditionCards } from './ResponseAndConditionCards';\nimport { Container } from './styles';\nimport { getEmptyResponse, getEmptyCondition, getEmptyTask } from './utils';\nimport { formatWorkflowCards } from './WorkflowCards';\n\nconst TreeView = ({\n  items,\n  onChange,\n  readOnly,\n  fields,\n  isTaskView,\n  id,\n  allTasks,\n  task,\n  onAddOrEditTask,\n  confirmDelete\n}) => {\n  const rowHeight = ({\n    node\n  }) => {\n    var _node$type, _node$type2;\n\n    return isTaskView ? (_node$type = node.type) === null || _node$type === void 0 ? void 0 : _node$type.taskRowHeight : (_node$type2 = node.type) === null || _node$type2 === void 0 ? void 0 : _node$type2.conditionslAndResponseRowHeight;\n  };\n\n  const canDrag = ({\n    parentNode,\n    node\n  }) => !readOnly && parentNode === null && node.type.type === treeTypes.TASK.type;\n\n  const canDrop = ({\n    nextParent\n  }) => nextParent === null;\n\n  const onDragStateChanged = ({\n    draggedNode\n  }) => {\n    if (draggedNode) {\n      draggedNode.expanded = false;\n    }\n  };\n\n  const onMoveNode = ({\n    treeData\n  }) => {\n    if (treeData) {\n      onChange(toggleExpandedForAll({\n        treeData,\n        expanded: false\n      }));\n    }\n  };\n\n  const {\n    createDialog\n  } = useDialog();\n  const onPropChange = useCallback((field, index, eventValue = 'value') => event => {\n    const value = (event === null || event === void 0 ? void 0 : event.target) ? event.target[eventValue] : event;\n    onChange(prevState => {\n      const tmp = [...prevState];\n      tmp[index][field] = value;\n      return tmp;\n    });\n  }, [onChange]);\n  const onAddNewConditionOrResponse = useCallback(type => () => {\n    onChange(prevState => {\n      const tmp = [...prevState, type === 'response' ? getEmptyResponse() : getEmptyCondition()];\n      return tmp;\n    });\n  }, [onChange]);\n  const onDeleteNode = useCallback(nodeId => {\n    const index = findIndex(items, item => item.id === nodeId);\n    const tmp = [...items];\n    tmp.splice(index, 1);\n    onChange(tmp);\n  }, [items, onChange]);\n  const handleConfimDelete = useCallback(nodeId => {\n    createDialog({\n      id: 'confirm-delete',\n      Component: ConfirmModal,\n      props: {\n        onConfirm: () => onDeleteNode(nodeId),\n        text: MSG006\n      }\n    });\n  }, [createDialog, onDeleteNode]);\n  const deleteNode = useCallback(nodeId => () => {\n    if (confirmDelete) handleConfimDelete(nodeId);else onDeleteNode(nodeId);\n  }, [confirmDelete, handleConfimDelete, onDeleteNode]);\n  const addTask = useCallback(() => {\n    const newTask = getEmptyTask();\n    onAddOrEditTask(newTask);\n  }, [onAddOrEditTask]);\n  const nodeProps = useMemo(() => {\n    if (isTaskView) {\n      return props => formatWorkflowCards(props, {\n        readOnly,\n        deleteNode,\n        onAddOrEditTask\n      });\n    }\n\n    return props => formatResponseAndConditionCards(props, {\n      fields,\n      onPropChange,\n      readOnly,\n      items,\n      deleteNode,\n      allTasks,\n      task\n    });\n  }, [isTaskView, readOnly, deleteNode, onAddOrEditTask, fields, onPropChange, items, allTasks, task]);\n  return /*#__PURE__*/React.createElement(Container, {\n    id: id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(SortableTree, {\n    treeData: items,\n    onChange: onChange,\n    canDrag: canDrag,\n    canDrop: canDrop,\n    generateNodeProps: nodeProps,\n    theme: FileExplorerTheme,\n    rowHeight: rowHeight,\n    onMoveNode: onMoveNode,\n    onDragStateChanged: onDragStateChanged,\n    isVirtualized: isTaskView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }\n  }), !readOnly && /*#__PURE__*/React.createElement(Buttons, {\n    id: id,\n    isTaskView: isTaskView,\n    onAddNewConditionOrResponse: onAddNewConditionOrResponse,\n    onAddTask: addTask,\n    amountOfTasks: items.length,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }));\n};\n\nTreeView.propTypes = {\n  items: PropTypes.array.isRequired,\n  onChange: PropTypes.func.isRequired,\n  readOnly: PropTypes.bool,\n  fields: PropTypes.array,\n  isTaskView: PropTypes.bool,\n  id: PropTypes.string.isRequired,\n  onAddOrEditTask: PropTypes.func,\n  task: PropTypes.object,\n  allTasks: PropTypes.array,\n  confirmDelete: PropTypes.bool\n};\nTreeView.defaultProps = {\n  readOnly: false,\n  fields: [],\n  taskId: null,\n\n  onAddOrEditTask() {},\n\n  isTaskView: false,\n  task: {},\n  allTasks: [],\n  confirmDelete: true\n};\nexport default TreeView;","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/components/TreeView/TreeView.js"],"names":["React","useMemo","useCallback","SortableTree","toggleExpandedForAll","FileExplorerTheme","PropTypes","findIndex","MSG006","treeTypes","useDialog","ConfirmModal","Buttons","formatResponseAndConditionCards","Container","getEmptyResponse","getEmptyCondition","getEmptyTask","formatWorkflowCards","TreeView","items","onChange","readOnly","fields","isTaskView","id","allTasks","task","onAddOrEditTask","confirmDelete","rowHeight","node","type","taskRowHeight","conditionslAndResponseRowHeight","canDrag","parentNode","TASK","canDrop","nextParent","onDragStateChanged","draggedNode","expanded","onMoveNode","treeData","createDialog","onPropChange","field","index","eventValue","event","value","target","prevState","tmp","onAddNewConditionOrResponse","onDeleteNode","nodeId","item","splice","handleConfimDelete","Component","props","onConfirm","text","deleteNode","addTask","newTask","nodeProps","length","propTypes","array","isRequired","func","bool","string","object","defaultProps","taskId"],"mappings":"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","sourcesContent":["import React, {\n  useMemo,\n  useCallback\n} from 'react'\nimport SortableTree, { toggleExpandedForAll } from 'react-sortable-tree'\nimport FileExplorerTheme from 'react-sortable-tree-theme-full-node-drag'\n\nimport PropTypes from 'prop-types'\n\nimport findIndex from 'lodash/findIndex'\n\nimport { MSG006 } from '@britania-crm/constants/feedbackMessages.constants'\nimport { treeTypes } from '@britania-crm/constants/workflow.constants'\nimport { useDialog } from '@britania-crm/dialog'\nimport ConfirmModal from '@britania-crm/web-components/Modal/ConfirmModal'\n\nimport Buttons from './Buttons'\nimport { formatResponseAndConditionCards } from './ResponseAndConditionCards'\nimport { Container } from './styles'\nimport {\n  getEmptyResponse,\n  getEmptyCondition,\n  getEmptyTask\n} from './utils'\nimport { formatWorkflowCards } from './WorkflowCards'\n\nconst TreeView = ({\n  items,\n  onChange,\n  readOnly,\n  fields,\n  isTaskView,\n  id,\n  allTasks,\n  task,\n  onAddOrEditTask,\n  confirmDelete\n}) => {\n  const rowHeight = ({ node }) => isTaskView ? node.type?.taskRowHeight : node.type?.conditionslAndResponseRowHeight\n  const canDrag = ({ parentNode, node }) => !readOnly && parentNode === null && node.type.type === treeTypes.TASK.type\n  const canDrop = ({ nextParent }) => nextParent === null\n\n  const onDragStateChanged = ({ draggedNode }) => {\n    if (draggedNode) {\n      draggedNode.expanded = false\n    }\n  }\n\n  const onMoveNode = ({ treeData }) => {\n    if (treeData) {\n      onChange(toggleExpandedForAll({ treeData, expanded: false }))\n    }\n  }\n\n  const { createDialog } = useDialog()\n\n  const onPropChange = useCallback((field, index, eventValue = 'value') => (event) => {\n    const value = event?.target ? event.target[eventValue] : event\n\n    onChange((prevState) => {\n      const tmp = [...prevState]\n\n      tmp[index][field] = value\n\n      return tmp\n    })\n  }, [onChange])\n\n  const onAddNewConditionOrResponse = useCallback((type) => () => {\n    onChange((prevState) => {\n      const tmp = [\n        ...prevState,\n        type === 'response' ? getEmptyResponse() : getEmptyCondition()\n      ]\n\n      return tmp\n    })\n  }, [onChange])\n\n  const onDeleteNode = useCallback((nodeId) => {\n    const index = findIndex(items, (item) => item.id === nodeId)\n    const tmp = [...items]\n\n    tmp.splice(index, 1)\n\n    onChange(tmp)\n  }, [items, onChange])\n\n  const handleConfimDelete = useCallback(\n    (nodeId) => {\n      createDialog({\n        id: 'confirm-delete',\n        Component: ConfirmModal,\n        props: {\n          onConfirm: () => onDeleteNode(nodeId),\n          text: MSG006\n        }\n      })\n    },\n    [createDialog, onDeleteNode]\n  )\n\n  const deleteNode = useCallback((nodeId) => () => {\n    if (confirmDelete) handleConfimDelete(nodeId)\n    else onDeleteNode(nodeId)\n  }, [confirmDelete, handleConfimDelete, onDeleteNode])\n\n  const addTask = useCallback(() => {\n    const newTask = getEmptyTask()\n\n    onAddOrEditTask(newTask)\n  }, [onAddOrEditTask])\n\n  const nodeProps = useMemo(() => {\n    if (isTaskView) {\n      return (props) => formatWorkflowCards(props, {\n        readOnly, deleteNode, onAddOrEditTask\n      })\n    }\n\n    return (props) => formatResponseAndConditionCards(\n      props,\n      {\n        fields,\n        onPropChange,\n        readOnly,\n        items,\n        deleteNode,\n        allTasks,\n        task\n      }\n    )\n  }, [isTaskView, readOnly, deleteNode, onAddOrEditTask, fields, onPropChange, items, allTasks, task])\n\n  return (\n    <Container id={ id }>\n      <SortableTree\n        treeData={ items }\n        onChange={ onChange }\n        canDrag={ canDrag }\n        canDrop={ canDrop }\n        generateNodeProps={ nodeProps }\n        theme={ FileExplorerTheme }\n        rowHeight={ rowHeight }\n        onMoveNode={ onMoveNode }\n        onDragStateChanged={ onDragStateChanged }\n        isVirtualized={ isTaskView }\n      />\n      {!readOnly &&\n        <Buttons\n          id={ id }\n          isTaskView={ isTaskView }\n          onAddNewConditionOrResponse={ onAddNewConditionOrResponse }\n          onAddTask={ addTask }\n          amountOfTasks={ items.length }\n        />\n      }\n    </Container>\n  )\n}\n\nTreeView.propTypes = {\n  items: PropTypes.array.isRequired,\n  onChange: PropTypes.func.isRequired,\n  readOnly: PropTypes.bool,\n  fields: PropTypes.array,\n  isTaskView: PropTypes.bool,\n  id: PropTypes.string.isRequired,\n  onAddOrEditTask: PropTypes.func,\n  task: PropTypes.object,\n  allTasks: PropTypes.array,\n  confirmDelete: PropTypes.bool\n}\n\nTreeView.defaultProps = {\n  readOnly: false,\n  fields: [],\n  taskId: null,\n  onAddOrEditTask () {},\n  isTaskView: false,\n  task: {},\n  allTasks: [],\n  confirmDelete: true\n}\n\nexport default TreeView\n"]},"metadata":{},"sourceType":"module"}