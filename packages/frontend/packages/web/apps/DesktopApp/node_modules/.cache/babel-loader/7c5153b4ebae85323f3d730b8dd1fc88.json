{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/components/TreeView/ResponseAndConditionCards/formatResponseAndConditionCards.js\";\nimport React from 'react';\nimport find from 'lodash/find';\nimport { treeTypes } from '@britania-crm/constants/workflow.constants';\nimport I18n from '@britania-crm/i18n';\nimport CardHoc from '../CardHoc/CardHoc';\nimport ConditionCard from './ConditionCard';\nimport ResponseCard from './ResponseCard';\nexport const formatResponseAndConditionCards = ({\n  node,\n  treeIndex\n}, {\n  onPropChange,\n  readOnly,\n  items,\n  deleteNode,\n  allTasks,\n  task\n}) => {\n  var _items$treeIndex;\n\n  const Response = /*#__PURE__*/React.createElement(ResponseCard, {\n    onPropChange: onPropChange,\n    treeIndex: treeIndex,\n    readOnly: readOnly,\n    items: items,\n    deleteNode: deleteNode,\n    allTasks: allTasks,\n    task: task,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  });\n  const Condition = /*#__PURE__*/React.createElement(ConditionCard, {\n    onPropChange: onPropChange,\n    treeIndex: treeIndex,\n    readOnly: readOnly,\n    items: items,\n    deleteNode: deleteNode,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  });\n  const renders = [{\n    type: treeTypes.CONDITION.type,\n    component: Condition,\n    title: /*#__PURE__*/React.createElement(I18n, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 14\n      }\n    }, \"conditional\")\n  }, {\n    type: treeTypes.RESPONSE.type,\n    component: Response,\n    title: /*#__PURE__*/React.createElement(I18n, {\n      params: {\n        requiresJustification: (_items$treeIndex = items[treeIndex]) === null || _items$treeIndex === void 0 ? void 0 : _items$treeIndex.requiresJustification\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 14\n      }\n    }, \"response\")\n  }];\n  return {\n    title() {\n      const itemToRender = find(renders, item => {\n        var _node$type;\n\n        return item.type === ((_node$type = node.type) === null || _node$type === void 0 ? void 0 : _node$type.type);\n      });\n      return CardHoc({\n        component: itemToRender.component,\n        type: node.type,\n        fullWidth: true\n      });\n    },\n\n    className: 'tree-view-card',\n    listIndex: 0,\n    lowerSiblingCounts: []\n  };\n};","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/components/TreeView/ResponseAndConditionCards/formatResponseAndConditionCards.js"],"names":["React","find","treeTypes","I18n","CardHoc","ConditionCard","ResponseCard","formatResponseAndConditionCards","node","treeIndex","onPropChange","readOnly","items","deleteNode","allTasks","task","Response","Condition","renders","type","CONDITION","component","title","RESPONSE","requiresJustification","itemToRender","item","fullWidth","className","listIndex","lowerSiblingCounts"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,SAASC,SAAT,QAA0B,4CAA1B;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AAEA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AAEA,OAAO,MAAMC,+BAA+B,GAAG,CAC7C;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAD6C,EAE7C;AACEC,EAAAA,YADF;AAEEC,EAAAA,QAFF;AAGEC,EAAAA,KAHF;AAIEC,EAAAA,UAJF;AAKEC,EAAAA,QALF;AAMEC,EAAAA;AANF,CAF6C,KAU1C;AAAA;;AACH,QAAMC,QAAQ,gBACZ,oBAAC,YAAD;AACE,IAAA,YAAY,EAAGN,YADjB;AAEE,IAAA,SAAS,EAAGD,SAFd;AAGE,IAAA,QAAQ,EAAGE,QAHb;AAIE,IAAA,KAAK,EAAGC,KAJV;AAKE,IAAA,UAAU,EAAGC,UALf;AAME,IAAA,QAAQ,EAAGC,QANb;AAOE,IAAA,IAAI,EAAGC,IAPT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAYA,QAAME,SAAS,gBACb,oBAAC,aAAD;AACE,IAAA,YAAY,EAAGP,YADjB;AAEE,IAAA,SAAS,EAAGD,SAFd;AAGE,IAAA,QAAQ,EAAGE,QAHb;AAIE,IAAA,KAAK,EAAGC,KAJV;AAKE,IAAA,UAAU,EAAGC,UALf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF;AAUA,QAAMK,OAAO,GAAG,CACd;AACEC,IAAAA,IAAI,EAAEjB,SAAS,CAACkB,SAAV,CAAoBD,IAD5B;AAEEE,IAAAA,SAAS,EAAEJ,SAFb;AAGEK,IAAAA,KAAK,eAAE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHT,GADc,EAMd;AACEH,IAAAA,IAAI,EAAEjB,SAAS,CAACqB,QAAV,CAAmBJ,IAD3B;AAEEE,IAAAA,SAAS,EAAEL,QAFb;AAGEM,IAAAA,KAAK,eAAE,oBAAC,IAAD;AAAM,MAAA,MAAM,EAAG;AAAEE,QAAAA,qBAAqB,sBAAEZ,KAAK,CAACH,SAAD,CAAP,qDAAE,iBAAkBe;AAA3C,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHT,GANc,CAAhB;AAaA,SAAO;AACLF,IAAAA,KAAK,GAAI;AACP,YAAMG,YAAY,GAAGxB,IAAI,CAACiB,OAAD,EAAWQ,IAAD;AAAA;;AAAA,eAAUA,IAAI,CAACP,IAAL,oBAAcX,IAAI,CAACW,IAAnB,+CAAc,WAAWA,IAAzB,CAAV;AAAA,OAAV,CAAzB;AAEA,aAAOf,OAAO,CAAC;AACbiB,QAAAA,SAAS,EAAEI,YAAY,CAACJ,SADX;AAEbF,QAAAA,IAAI,EAAEX,IAAI,CAACW,IAFE;AAGbQ,QAAAA,SAAS,EAAE;AAHE,OAAD,CAAd;AAKD,KATI;;AAULC,IAAAA,SAAS,EAAE,gBAVN;AAWLC,IAAAA,SAAS,EAAE,CAXN;AAYLC,IAAAA,kBAAkB,EAAE;AAZf,GAAP;AAcD,CA5DM","sourcesContent":["import React from 'react'\n\nimport find from 'lodash/find'\n\nimport { treeTypes } from '@britania-crm/constants/workflow.constants'\nimport I18n from '@britania-crm/i18n'\n\nimport CardHoc from '../CardHoc/CardHoc'\nimport ConditionCard from './ConditionCard'\nimport ResponseCard from './ResponseCard'\n\nexport const formatResponseAndConditionCards = (\n  { node, treeIndex },\n  {\n    onPropChange,\n    readOnly,\n    items,\n    deleteNode,\n    allTasks,\n    task\n  }\n) => {\n  const Response = (\n    <ResponseCard\n      onPropChange={ onPropChange }\n      treeIndex={ treeIndex }\n      readOnly={ readOnly }\n      items={ items }\n      deleteNode={ deleteNode }\n      allTasks={ allTasks }\n      task={ task }\n    />\n  )\n\n  const Condition = (\n    <ConditionCard\n      onPropChange={ onPropChange }\n      treeIndex={ treeIndex }\n      readOnly={ readOnly }\n      items={ items }\n      deleteNode={ deleteNode }\n    />\n  )\n\n  const renders = [\n    {\n      type: treeTypes.CONDITION.type,\n      component: Condition,\n      title: <I18n>conditional</I18n>\n    },\n    {\n      type: treeTypes.RESPONSE.type,\n      component: Response,\n      title: <I18n params={ { requiresJustification: items[treeIndex]?.requiresJustification } }>response</I18n>\n    }\n  ]\n\n  return {\n    title () {\n      const itemToRender = find(renders, (item) => item.type === node.type?.type)\n\n      return CardHoc({\n        component: itemToRender.component,\n        type: node.type,\n        fullWidth: true\n      })\n    },\n    className: 'tree-view-card',\n    listIndex: 0,\n    lowerSiblingCounts: []\n  }\n}\n"]},"metadata":{},"sourceType":"module"}