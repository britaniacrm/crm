{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/customers/modals/RankingChangeModal/RankingChangeModal.js\";\nimport React, { useRef, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport rankingSchema, { INITIAL_VALUES } from '@britania-crm/forms/schemas/customer/ranking.schema';\nimport I18n, { useT } from '@britania-crm/i18n';\nimport { ranking, clients } from '@britania-crm/services/apis/crmApi/resources/routes';\nimport useCrmApi from '@britania-crm/services/hooks/useCrmApi';\nimport useEffectOnlyDidUpdate from '@britania-crm/utils/useEffectOnlyDidUpdate';\nimport Button from '@britania-crm/web-components/Button';\nimport Form from '@britania-crm/web-components/Form';\nimport InputSelect from '@britania-crm/web-components/InputSelect';\nimport Modal from '@britania-crm/web-components/Modal';\nimport RankingBadge from '@britania-crm/web-components/RankingBadge';\nimport TextArea from '@britania-crm/web-components/TextArea';\nimport useStyles, { ButtonContainer } from '../styles';\n\nconst RankingChangeModal = ({\n  id,\n  open,\n  handleClose,\n  onSuccess,\n  matrixCode\n}) => {\n  const classes = useStyles();\n  const t = useT();\n  const formRef = useRef(null);\n  const {\n    data: suggestionRanking\n  } = useCrmApi(clients.getRankingSuggestionUrl.replace(':clientTotvsCode', matrixCode));\n  const {\n    data: rankingOptions\n  } = useCrmApi(ranking.getRankingsRankings);\n  useEffectOnlyDidUpdate(() => {\n    formRef.current.setData({\n      rankingId: suggestionRanking === null || suggestionRanking === void 0 ? void 0 : suggestionRanking.rankingId,\n      justification: (suggestionRanking === null || suggestionRanking === void 0 ? void 0 : suggestionRanking.justification) || ''\n    });\n  }, [suggestionRanking]);\n  const handleSubmit = useCallback(async values => {\n    await onSuccess(values);\n    handleClose();\n  }, [handleClose, onSuccess]);\n  return /*#__PURE__*/React.createElement(Modal, {\n    id: id,\n    open: open,\n    title: t('ranking change'),\n    maxWidth: \"md\",\n    fullWidth: true,\n    escapeWhenLoading: true,\n    FooterComponent: () => /*#__PURE__*/React.createElement(ButtonContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      color: \"secondary\",\n      variant: \"outlined\",\n      onClick: () => {\n        handleClose();\n        formRef.current.reset();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(I18n, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 13\n      }\n    }, \"cancel\")), /*#__PURE__*/React.createElement(Button, {\n      color: \"secondary\",\n      variant: \"contained\",\n      onClick: () => formRef.current.submit(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(I18n, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }, \"save\"))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    ref: formRef,\n    onSubmit: handleSubmit,\n    schemaConstructor: rankingSchema,\n    defaultValues: INITIAL_VALUES,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    item: true,\n    sm: 12,\n    spacing: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    className: classes.ranking,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(I18n, {\n    as: Typography,\n    variant: \"body2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 13\n    }\n  }, \"system suggestion\"), /*#__PURE__*/React.createElement(RankingBadge, {\n    type: suggestionRanking === null || suggestionRanking === void 0 ? void 0 : suggestionRanking.alias,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputSelect, {\n    name: \"rankingId\",\n    label: t('new ranking suggestion'),\n    required: true,\n    options: rankingOptions,\n    valueKey: \"description\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TextArea, {\n    name: \"justification\",\n    label: t('justification'),\n    rows: 10,\n    inputProps: {\n      maxLength: 1000\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }\n  })))));\n};\n\nRankingChangeModal.propTypes = {\n  id: PropTypes.string.isRequired,\n  open: PropTypes.bool.isRequired,\n  handleClose: PropTypes.func.isRequired,\n  onSuccess: PropTypes.func,\n  matrixCode: PropTypes.number.isRequired\n};\nRankingChangeModal.defaultProps = {\n  user: {},\n\n  onSuccess() {},\n\n  currentRoutePermissions: {}\n};\nexport default RankingChangeModal;","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/customers/modals/RankingChangeModal/RankingChangeModal.js"],"names":["React","useRef","useCallback","PropTypes","Grid","Typography","rankingSchema","INITIAL_VALUES","I18n","useT","ranking","clients","useCrmApi","useEffectOnlyDidUpdate","Button","Form","InputSelect","Modal","RankingBadge","TextArea","useStyles","ButtonContainer","RankingChangeModal","id","open","handleClose","onSuccess","matrixCode","classes","t","formRef","data","suggestionRanking","getRankingSuggestionUrl","replace","rankingOptions","getRankingsRankings","current","setData","rankingId","justification","handleSubmit","values","reset","submit","alias","maxLength","propTypes","string","isRequired","bool","func","number","defaultProps","user","currentRoutePermissions"],"mappings":"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","sourcesContent":["import React, {\n  useRef,\n  useCallback\n} from 'react'\n\nimport PropTypes from 'prop-types'\n\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\n\nimport rankingSchema, { INITIAL_VALUES } from '@britania-crm/forms/schemas/customer/ranking.schema'\nimport I18n, { useT } from '@britania-crm/i18n'\nimport {\n  ranking,\n  clients\n} from '@britania-crm/services/apis/crmApi/resources/routes'\nimport useCrmApi from '@britania-crm/services/hooks/useCrmApi'\nimport useEffectOnlyDidUpdate from '@britania-crm/utils/useEffectOnlyDidUpdate'\nimport Button from '@britania-crm/web-components/Button'\nimport Form from '@britania-crm/web-components/Form'\nimport InputSelect from '@britania-crm/web-components/InputSelect'\nimport Modal from '@britania-crm/web-components/Modal'\nimport RankingBadge from '@britania-crm/web-components/RankingBadge'\nimport TextArea from '@britania-crm/web-components/TextArea'\n\nimport useStyles, { ButtonContainer } from '../styles'\n\nconst RankingChangeModal = ({\n  id, open, handleClose, onSuccess, matrixCode\n}) => {\n  const classes = useStyles()\n  const t = useT()\n  const formRef = useRef(null)\n  const { data: suggestionRanking } = useCrmApi(clients.getRankingSuggestionUrl.replace(':clientTotvsCode', matrixCode))\n  const { data: rankingOptions } = useCrmApi(ranking.getRankingsRankings)\n\n  useEffectOnlyDidUpdate(() => {\n    formRef.current.setData({\n      rankingId: suggestionRanking?.rankingId,\n      justification: suggestionRanking?.justification || ''\n    })\n  },\n  [suggestionRanking])\n\n  const handleSubmit = useCallback(\n    async (values) => {\n      await onSuccess(values)\n      handleClose()\n    }, [handleClose, onSuccess]\n  )\n\n  return (\n    <Modal\n      id={ id }\n      open={ open }\n      title={ t('ranking change') }\n      maxWidth=\"md\"\n      fullWidth\n      escapeWhenLoading\n      FooterComponent={ () => (\n        <ButtonContainer>\n          <Button\n            color=\"secondary\"\n            variant=\"outlined\"\n            onClick={ () => {\n              handleClose()\n              formRef.current.reset()\n            }\n            }\n          >\n            <I18n>cancel</I18n>\n          </Button>\n          <Button\n            color=\"secondary\"\n            variant=\"contained\"\n            onClick={ () => formRef.current.submit() }\n          >\n            <I18n>save</I18n>\n          </Button>\n        </ButtonContainer>\n      ) }\n    >\n      <Form\n        ref={ formRef }\n        onSubmit={ handleSubmit }\n        schemaConstructor={ rankingSchema }\n        defaultValues={ INITIAL_VALUES }\n      >\n        <Grid container item sm={ 12 } spacing={ 1 } >\n          <Grid item sm={ 12 } className={ classes.ranking }>\n            <I18n as={ Typography } variant=\"body2\" >\n            system suggestion\n            </I18n>\n            <RankingBadge type={ suggestionRanking?.alias } />\n          </Grid>\n          <Grid item sm={ 12 }>\n            <InputSelect\n              name=\"rankingId\"\n              label={ t('new ranking suggestion') }\n              required\n              options={ rankingOptions }\n              valueKey=\"description\"\n            />\n          </Grid>\n          <Grid item sm={ 12 }>\n            <TextArea\n              name=\"justification\"\n              label={ t('justification') }\n              rows={ 10 }\n              inputProps={ { maxLength: 1000 } }\n            />\n          </Grid>\n        </Grid>\n      </Form>\n    </Modal>\n  )\n}\n\nRankingChangeModal.propTypes = {\n  id: PropTypes.string.isRequired,\n  open: PropTypes.bool.isRequired,\n  handleClose: PropTypes.func.isRequired,\n  onSuccess: PropTypes.func,\n  matrixCode: PropTypes.number.isRequired\n}\n\nRankingChangeModal.defaultProps = {\n  user: {},\n  onSuccess () {},\n  currentRoutePermissions: {}\n}\n\nexport default RankingChangeModal\n"]},"metadata":{},"sourceType":"module"}