{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/workflow/containers/WorkFlowTaskExecution/WorkFlowTaskExecution.js\";\nimport React, { useMemo, useRef, useEffect, useState, memo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport * as Yup from 'yup';\nimport find from 'lodash/find';\nimport isEmpty from 'lodash/isEmpty';\nimport last from 'lodash/last';\nimport toNumber from 'lodash/toNumber';\nimport justificationValidator from '@britania-crm/forms/validators/justification.validator';\nimport { useT } from '@britania-crm/i18n';\nimport { WorkflowActions } from '@britania-crm/stores/workflow';\nimport DataTable from '@britania-crm/web-components/DataTable';\nimport RadioGroup from '@britania-crm/web-components/RadioGroup';\nimport JustificationEditComponent from './JustificationEditComponent';\n\nconst WorkFlowTaskExecution = props => {\n  const {\n    taskInProgress,\n    baseUrl,\n    isReadOnly\n  } = props;\n  const t = useT();\n  const dispatch = useDispatch();\n  const tableRef = useRef(null);\n  const mounted = useRef(false);\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const columns = useMemo(() => [{\n    title: t('workflow'),\n    field: 'version',\n    editable: 'never',\n    width: 100\n  }, {\n    title: t('task', {\n      howMany: 1\n    }),\n    field: 'task',\n    editable: 'never',\n    width: 200\n  }, {\n    title: t('response', {\n      requiresJustification: false\n    }),\n    field: 'workflowTaskResponseId',\n    editable: 'always',\n    width: 300,\n    render: row => {\n      var _find;\n\n      return ((_find = find(row.responses, {\n        id: row.workflowTaskResponseId\n      })) === null || _find === void 0 ? void 0 : _find.title) || '-';\n    },\n    initialEditValue: '',\n    editComponent: ({\n      // eslint-disable-next-line react/prop-types\n      value,\n      onChange,\n      rowData: {\n        responses\n      }\n    }) => /*#__PURE__*/React.createElement(RadioGroup, {\n      detached: true,\n      name: \"workflowTaskResponseId\",\n      value: value,\n      onChange: e => onChange(toNumber(e.target.value)),\n      options: responses,\n      valueKey: \"title\",\n      disabled: isReadOnly,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 11\n      }\n    }),\n    validate: row => !!row.workflowTaskResponseId\n  }, {\n    title: t('justification'),\n    field: 'justification',\n    editable: 'always',\n    initialEditValue: null,\n    isReadOnly,\n    editComponent: JustificationEditComponent,\n\n    validate(row) {\n      const currentResponse = find(row.responses, {\n        id: row.workflowTaskResponseId\n      });\n\n      if (!(currentResponse === null || currentResponse === void 0 ? void 0 : currentResponse.requiresJustification)) {\n        return true;\n      }\n\n      try {\n        const justificationSchema = justificationValidator({\n          t\n        })(Yup.string().nullable());\n        justificationSchema.validateSync(row.justification, {\n          abortEarly: false\n        });\n        return true;\n      } catch (error) {\n        return {\n          isValid: false,\n          helperText: last(error.errors)\n        };\n      }\n    }\n\n  }], [isReadOnly, t]);\n  const options = useMemo(() => ({\n    search: false,\n    sorting: false,\n    paging: false,\n    resetOnUpdate: false,\n    disableCancelEdit: true\n  }), []);\n  const editableOptions = useMemo(() => isEmpty(data) ? {} : {\n    onRowUpdate: row => new Promise((resolve, reject) => {\n      const payload = {\n        workflowTaskResponseId: row.workflowTaskResponseId,\n        justification: row.justification ? row.justification : null\n      };\n      setLoading(true);\n      dispatch(WorkflowActions.answerWorkflow(baseUrl, payload, () => {\n        if (mounted.current) {\n          setData([row]);\n          setLoading(false);\n        }\n\n        resolve();\n      }, error => {\n        if (mounted.current) {\n          setLoading(false);\n        }\n\n        reject(error);\n      }));\n    })\n  }, [baseUrl, data, dispatch]);\n  useEffect( // mount material-table in row edit mode\n  () => {\n    if (!isEmpty(data) && tableRef && tableRef.current) {\n      const rowData = tableRef.current.props.data[0];\n      tableRef.current.dataManager.changeRowEditing(rowData, 'update');\n      tableRef.current.setState(tableRef.current.dataManager.getRenderState());\n    }\n  }, [tableRef, data]);\n  useEffect(() => {\n    setData(isEmpty(taskInProgress) ? [] : [taskInProgress]);\n  }, [taskInProgress]);\n  useEffect(() => {\n    mounted.current = true;\n    return () => {\n      mounted.current = false;\n    };\n  }, []);\n  return !isEmpty(data) && /*#__PURE__*/React.createElement(DataTable, {\n    ref: tableRef,\n    options: options,\n    data: data,\n    columns: columns,\n    loading: loading,\n    editable: editableOptions,\n    minimalistToolbar: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 5\n    }\n  });\n};\n\nWorkFlowTaskExecution.propTypes = {\n  taskInProgress: PropTypes.object,\n  baseUrl: PropTypes.string,\n  isReadOnly: PropTypes.bool\n};\nWorkFlowTaskExecution.defaultProps = {\n  taskInProgress: {},\n  baseUrl: null,\n  isReadOnly: false\n};\nexport default memo(WorkFlowTaskExecution);","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/workflow/containers/WorkFlowTaskExecution/WorkFlowTaskExecution.js"],"names":["React","useMemo","useRef","useEffect","useState","memo","useDispatch","PropTypes","Yup","find","isEmpty","last","toNumber","justificationValidator","useT","WorkflowActions","DataTable","RadioGroup","JustificationEditComponent","WorkFlowTaskExecution","props","taskInProgress","baseUrl","isReadOnly","t","dispatch","tableRef","mounted","data","setData","loading","setLoading","columns","title","field","editable","width","howMany","requiresJustification","render","row","responses","id","workflowTaskResponseId","initialEditValue","editComponent","value","onChange","rowData","e","target","validate","currentResponse","justificationSchema","string","nullable","validateSync","justification","abortEarly","error","isValid","helperText","errors","options","search","sorting","paging","resetOnUpdate","disableCancelEdit","editableOptions","onRowUpdate","Promise","resolve","reject","payload","answerWorkflow","current","dataManager","changeRowEditing","setState","getRenderState","propTypes","object","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, {\n  useMemo,\n  useRef,\n  useEffect,\n  useState,\n  memo\n} from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport PropTypes from 'prop-types'\nimport * as Yup from 'yup'\n\nimport find from 'lodash/find'\nimport isEmpty from 'lodash/isEmpty'\nimport last from 'lodash/last'\nimport toNumber from 'lodash/toNumber'\n\nimport justificationValidator from '@britania-crm/forms/validators/justification.validator'\nimport { useT } from '@britania-crm/i18n'\nimport { WorkflowActions } from '@britania-crm/stores/workflow'\nimport DataTable from '@britania-crm/web-components/DataTable'\nimport RadioGroup from '@britania-crm/web-components/RadioGroup'\n\nimport JustificationEditComponent from './JustificationEditComponent'\n\nconst WorkFlowTaskExecution = (props) => {\n  const {\n    taskInProgress,\n    baseUrl,\n    isReadOnly\n  } = props\n\n  const t = useT()\n  const dispatch = useDispatch()\n\n  const tableRef = useRef(null)\n  const mounted = useRef(false)\n\n  const [data, setData] = useState([])\n  const [loading, setLoading] = useState(false)\n\n  const columns = useMemo(\n    () => [\n      {\n        title: t('workflow'),\n        field: 'version',\n        editable: 'never',\n        width: 100\n      },\n      {\n        title: t('task', { howMany: 1 }),\n        field: 'task',\n        editable: 'never',\n        width: 200\n      },\n      {\n        title: t('response', { requiresJustification: false }),\n        field: 'workflowTaskResponseId',\n        editable: 'always',\n        width: 300,\n        render: (row) => find(row.responses, { id: row.workflowTaskResponseId })?.title || '-',\n        initialEditValue: '',\n        editComponent: ({\n          // eslint-disable-next-line react/prop-types\n          value, onChange, rowData: { responses }\n        }) => (\n          <RadioGroup\n            detached\n            name=\"workflowTaskResponseId\"\n            value={ value }\n            onChange={ (e) => onChange(toNumber(e.target.value)) }\n            options={ responses }\n            valueKey=\"title\"\n            disabled={ isReadOnly }\n          />\n        ),\n        validate: (row) => !!row.workflowTaskResponseId\n      },\n      {\n        title: t('justification'),\n        field: 'justification',\n        editable: 'always',\n        initialEditValue: null,\n        isReadOnly,\n        editComponent: JustificationEditComponent,\n        validate (row) {\n          const currentResponse = find(row.responses, { id: row.workflowTaskResponseId })\n          if (!currentResponse?.requiresJustification) {\n            return true\n          }\n\n          try {\n            const justificationSchema = justificationValidator({ t })(Yup.string().nullable())\n            justificationSchema.validateSync(row.justification, { abortEarly: false })\n            return true\n          } catch (error) {\n            return {\n              isValid: false,\n              helperText: last(error.errors)\n            }\n          }\n        }\n      }\n    ],\n    [isReadOnly, t]\n  )\n\n  const options = useMemo(\n    () => ({\n      search: false,\n      sorting: false,\n      paging: false,\n      resetOnUpdate: false,\n      disableCancelEdit: true\n    }),\n    []\n  )\n\n  const editableOptions = useMemo(\n    () => isEmpty(data) ? {} : ({\n      onRowUpdate: (row) => new Promise((resolve, reject) => {\n        const payload = {\n          workflowTaskResponseId: row.workflowTaskResponseId,\n          justification: row.justification ? row.justification : null\n        }\n        setLoading(true)\n        dispatch(WorkflowActions.answerWorkflow(\n          baseUrl,\n          payload,\n          () => {\n            if (mounted.current) {\n              setData([row])\n              setLoading(false)\n            }\n            resolve()\n          },\n          (error) => {\n            if (mounted.current) {\n              setLoading(false)\n            }\n            reject(error)\n          }\n        ))\n      })\n    }),\n    [baseUrl, data, dispatch]\n  )\n\n  useEffect(\n    // mount material-table in row edit mode\n    () => {\n      if (!isEmpty(data) && tableRef && tableRef.current) {\n        const rowData = tableRef.current.props.data[0]\n        tableRef.current.dataManager.changeRowEditing(rowData, 'update')\n        tableRef.current.setState(tableRef.current.dataManager.getRenderState())\n      }\n    },\n    [tableRef, data]\n  )\n\n  useEffect(\n    () => {\n      setData(isEmpty(taskInProgress) ? [] : [taskInProgress])\n    },\n    [taskInProgress]\n  )\n\n  useEffect(\n    () => {\n      mounted.current = true\n      return () => {\n        mounted.current = false\n      }\n    },\n    []\n  )\n\n  return !isEmpty(data) && (\n    <DataTable\n      ref={ tableRef }\n      options={ options }\n      data={ data }\n      columns={ columns }\n      loading={ loading }\n      editable={ editableOptions }\n      minimalistToolbar\n    />\n  )\n}\n\nWorkFlowTaskExecution.propTypes = {\n  taskInProgress: PropTypes.object,\n  baseUrl: PropTypes.string,\n  isReadOnly: PropTypes.bool\n}\n\nWorkFlowTaskExecution.defaultProps = {\n  taskInProgress: {},\n  baseUrl: null,\n  isReadOnly: false\n}\n\nexport default memo(WorkFlowTaskExecution)\n"]},"metadata":{},"sourceType":"module"}