{"ast":null,"code":"\"use strict\";\n\nexports[\"default\"] = function () {\n  \"use strict\";\n  /*\n   * Generated by PEG.js 0.9.0.\n   *\n   * http://pegjs.org/\n   */\n\n  function peg$subclass(child, parent) {\n    function ctor() {\n      this.constructor = child;\n    }\n\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function peg$SyntaxError(message, expected, found, location) {\n    this.message = message;\n    this.expected = expected;\n    this.found = found;\n    this.location = location;\n    this.name = \"SyntaxError\";\n\n    if (typeof Error.captureStackTrace === \"function\") {\n      Error.captureStackTrace(this, peg$SyntaxError);\n    }\n  }\n\n  peg$subclass(peg$SyntaxError, Error);\n\n  function peg$parse(input) {\n    var options = arguments.length > 1 ? arguments[1] : {},\n        parser = this,\n        peg$FAILED = {},\n        peg$startRuleFunctions = {\n      start: peg$parsestart\n    },\n        peg$startRuleFunction = peg$parsestart,\n        peg$c0 = function (elements) {\n      return {\n        type: 'messageFormatPattern',\n        elements: elements,\n        location: location()\n      };\n    },\n        peg$c1 = function (text) {\n      var string = '',\n          i,\n          j,\n          outerLen,\n          inner,\n          innerLen;\n\n      for (i = 0, outerLen = text.length; i < outerLen; i += 1) {\n        inner = text[i];\n\n        for (j = 0, innerLen = inner.length; j < innerLen; j += 1) {\n          string += inner[j];\n        }\n      }\n\n      return string;\n    },\n        peg$c2 = function (messageText) {\n      return {\n        type: 'messageTextElement',\n        value: messageText,\n        location: location()\n      };\n    },\n        peg$c3 = /^[^ \\t\\n\\r,.+={}#]/,\n        peg$c4 = {\n      type: \"class\",\n      value: \"[^ \\\\t\\\\n\\\\r,.+={}#]\",\n      description: \"[^ \\\\t\\\\n\\\\r,.+={}#]\"\n    },\n        peg$c5 = \"{\",\n        peg$c6 = {\n      type: \"literal\",\n      value: \"{\",\n      description: \"\\\"{\\\"\"\n    },\n        peg$c7 = \",\",\n        peg$c8 = {\n      type: \"literal\",\n      value: \",\",\n      description: \"\\\",\\\"\"\n    },\n        peg$c9 = \"}\",\n        peg$c10 = {\n      type: \"literal\",\n      value: \"}\",\n      description: \"\\\"}\\\"\"\n    },\n        peg$c11 = function (id, format) {\n      return {\n        type: 'argumentElement',\n        id: id,\n        format: format && format[2],\n        location: location()\n      };\n    },\n        peg$c12 = \"number\",\n        peg$c13 = {\n      type: \"literal\",\n      value: \"number\",\n      description: \"\\\"number\\\"\"\n    },\n        peg$c14 = \"date\",\n        peg$c15 = {\n      type: \"literal\",\n      value: \"date\",\n      description: \"\\\"date\\\"\"\n    },\n        peg$c16 = \"time\",\n        peg$c17 = {\n      type: \"literal\",\n      value: \"time\",\n      description: \"\\\"time\\\"\"\n    },\n        peg$c18 = function (type, style) {\n      return {\n        type: type + 'Format',\n        style: style && style[2],\n        location: location()\n      };\n    },\n        peg$c19 = \"plural\",\n        peg$c20 = {\n      type: \"literal\",\n      value: \"plural\",\n      description: \"\\\"plural\\\"\"\n    },\n        peg$c21 = function (pluralStyle) {\n      return {\n        type: pluralStyle.type,\n        ordinal: false,\n        offset: pluralStyle.offset || 0,\n        options: pluralStyle.options,\n        location: location()\n      };\n    },\n        peg$c22 = \"selectordinal\",\n        peg$c23 = {\n      type: \"literal\",\n      value: \"selectordinal\",\n      description: \"\\\"selectordinal\\\"\"\n    },\n        peg$c24 = function (pluralStyle) {\n      return {\n        type: pluralStyle.type,\n        ordinal: true,\n        offset: pluralStyle.offset || 0,\n        options: pluralStyle.options,\n        location: location()\n      };\n    },\n        peg$c25 = \"select\",\n        peg$c26 = {\n      type: \"literal\",\n      value: \"select\",\n      description: \"\\\"select\\\"\"\n    },\n        peg$c27 = function (options) {\n      return {\n        type: 'selectFormat',\n        options: options,\n        location: location()\n      };\n    },\n        peg$c28 = \"=\",\n        peg$c29 = {\n      type: \"literal\",\n      value: \"=\",\n      description: \"\\\"=\\\"\"\n    },\n        peg$c30 = function (selector, pattern) {\n      return {\n        type: 'optionalFormatPattern',\n        selector: selector,\n        value: pattern,\n        location: location()\n      };\n    },\n        peg$c31 = \"offset:\",\n        peg$c32 = {\n      type: \"literal\",\n      value: \"offset:\",\n      description: \"\\\"offset:\\\"\"\n    },\n        peg$c33 = function (number) {\n      return number;\n    },\n        peg$c34 = function (offset, options) {\n      return {\n        type: 'pluralFormat',\n        offset: offset,\n        options: options,\n        location: location()\n      };\n    },\n        peg$c35 = {\n      type: \"other\",\n      description: \"whitespace\"\n    },\n        peg$c36 = /^[ \\t\\n\\r]/,\n        peg$c37 = {\n      type: \"class\",\n      value: \"[ \\\\t\\\\n\\\\r]\",\n      description: \"[ \\\\t\\\\n\\\\r]\"\n    },\n        peg$c38 = {\n      type: \"other\",\n      description: \"optionalWhitespace\"\n    },\n        peg$c39 = /^[0-9]/,\n        peg$c40 = {\n      type: \"class\",\n      value: \"[0-9]\",\n      description: \"[0-9]\"\n    },\n        peg$c41 = /^[0-9a-f]/i,\n        peg$c42 = {\n      type: \"class\",\n      value: \"[0-9a-f]i\",\n      description: \"[0-9a-f]i\"\n    },\n        peg$c43 = \"0\",\n        peg$c44 = {\n      type: \"literal\",\n      value: \"0\",\n      description: \"\\\"0\\\"\"\n    },\n        peg$c45 = /^[1-9]/,\n        peg$c46 = {\n      type: \"class\",\n      value: \"[1-9]\",\n      description: \"[1-9]\"\n    },\n        peg$c47 = function (digits) {\n      return parseInt(digits, 10);\n    },\n        peg$c48 = /^[^{}\\\\\\0-\\x1F \\t\\n\\r]/,\n        peg$c49 = {\n      type: \"class\",\n      value: \"[^{}\\\\\\\\\\\\0-\\\\x1F\\\\x7f \\\\t\\\\n\\\\r]\",\n      description: \"[^{}\\\\\\\\\\\\0-\\\\x1F\\\\x7f \\\\t\\\\n\\\\r]\"\n    },\n        peg$c50 = \"\\\\\\\\\",\n        peg$c51 = {\n      type: \"literal\",\n      value: \"\\\\\\\\\",\n      description: \"\\\"\\\\\\\\\\\\\\\\\\\"\"\n    },\n        peg$c52 = function () {\n      return '\\\\';\n    },\n        peg$c53 = \"\\\\#\",\n        peg$c54 = {\n      type: \"literal\",\n      value: \"\\\\#\",\n      description: \"\\\"\\\\\\\\#\\\"\"\n    },\n        peg$c55 = function () {\n      return '\\\\#';\n    },\n        peg$c56 = \"\\\\{\",\n        peg$c57 = {\n      type: \"literal\",\n      value: \"\\\\{\",\n      description: \"\\\"\\\\\\\\{\\\"\"\n    },\n        peg$c58 = function () {\n      return '\\u007B';\n    },\n        peg$c59 = \"\\\\}\",\n        peg$c60 = {\n      type: \"literal\",\n      value: \"\\\\}\",\n      description: \"\\\"\\\\\\\\}\\\"\"\n    },\n        peg$c61 = function () {\n      return '\\u007D';\n    },\n        peg$c62 = \"\\\\u\",\n        peg$c63 = {\n      type: \"literal\",\n      value: \"\\\\u\",\n      description: \"\\\"\\\\\\\\u\\\"\"\n    },\n        peg$c64 = function (digits) {\n      return String.fromCharCode(parseInt(digits, 16));\n    },\n        peg$c65 = function (chars) {\n      return chars.join('');\n    },\n        peg$currPos = 0,\n        peg$savedPos = 0,\n        peg$posDetailsCache = [{\n      line: 1,\n      column: 1,\n      seenCR: false\n    }],\n        peg$maxFailPos = 0,\n        peg$maxFailExpected = [],\n        peg$silentFails = 0,\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$savedPos, peg$currPos);\n    }\n\n    function location() {\n      return peg$computeLocation(peg$savedPos, peg$currPos);\n    }\n\n    function expected(description) {\n      throw peg$buildException(null, [{\n        type: \"other\",\n        description: description\n      }], input.substring(peg$savedPos, peg$currPos), peg$computeLocation(peg$savedPos, peg$currPos));\n    }\n\n    function error(message) {\n      throw peg$buildException(message, null, input.substring(peg$savedPos, peg$currPos), peg$computeLocation(peg$savedPos, peg$currPos));\n    }\n\n    function peg$computePosDetails(pos) {\n      var details = peg$posDetailsCache[pos],\n          p,\n          ch;\n\n      if (details) {\n        return details;\n      } else {\n        p = pos - 1;\n\n        while (!peg$posDetailsCache[p]) {\n          p--;\n        }\n\n        details = peg$posDetailsCache[p];\n        details = {\n          line: details.line,\n          column: details.column,\n          seenCR: details.seenCR\n        };\n\n        while (p < pos) {\n          ch = input.charAt(p);\n\n          if (ch === \"\\n\") {\n            if (!details.seenCR) {\n              details.line++;\n            }\n\n            details.column = 1;\n            details.seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            details.line++;\n            details.column = 1;\n            details.seenCR = true;\n          } else {\n            details.column++;\n            details.seenCR = false;\n          }\n\n          p++;\n        }\n\n        peg$posDetailsCache[pos] = details;\n        return details;\n      }\n    }\n\n    function peg$computeLocation(startPos, endPos) {\n      var startPosDetails = peg$computePosDetails(startPos),\n          endPosDetails = peg$computePosDetails(endPos);\n      return {\n        start: {\n          offset: startPos,\n          line: startPosDetails.line,\n          column: startPosDetails.column\n        },\n        end: {\n          offset: endPos,\n          line: endPosDetails.line,\n          column: endPosDetails.column\n        }\n      };\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) {\n        return;\n      }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildException(message, expected, found, location) {\n      function cleanupExpected(expected) {\n        var i = 1;\n        expected.sort(function (a, b) {\n          if (a.description < b.description) {\n            return -1;\n          } else if (a.description > b.description) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n\n        while (i < expected.length) {\n          if (expected[i - 1] === expected[i]) {\n            expected.splice(i, 1);\n          } else {\n            i++;\n          }\n        }\n      }\n\n      function buildMessage(expected, found) {\n        function stringEscape(s) {\n          function hex(ch) {\n            return ch.charCodeAt(0).toString(16).toUpperCase();\n          }\n\n          return s.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"').replace(/\\x08/g, '\\\\b').replace(/\\t/g, '\\\\t').replace(/\\n/g, '\\\\n').replace(/\\f/g, '\\\\f').replace(/\\r/g, '\\\\r').replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function (ch) {\n            return '\\\\x0' + hex(ch);\n          }).replace(/[\\x10-\\x1F\\x80-\\xFF]/g, function (ch) {\n            return '\\\\x' + hex(ch);\n          }).replace(/[\\u0100-\\u0FFF]/g, function (ch) {\n            return '\\\\u0' + hex(ch);\n          }).replace(/[\\u1000-\\uFFFF]/g, function (ch) {\n            return '\\\\u' + hex(ch);\n          });\n        }\n\n        var expectedDescs = new Array(expected.length),\n            expectedDesc,\n            foundDesc,\n            i;\n\n        for (i = 0; i < expected.length; i++) {\n          expectedDescs[i] = expected[i].description;\n        }\n\n        expectedDesc = expected.length > 1 ? expectedDescs.slice(0, -1).join(\", \") + \" or \" + expectedDescs[expected.length - 1] : expectedDescs[0];\n        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\n        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n      }\n\n      if (expected !== null) {\n        cleanupExpected(expected);\n      }\n\n      return new peg$SyntaxError(message !== null ? message : buildMessage(expected, found), expected, found, location);\n    }\n\n    function peg$parsestart() {\n      var s0;\n      s0 = peg$parsemessageFormatPattern();\n      return s0;\n    }\n\n    function peg$parsemessageFormatPattern() {\n      var s0, s1, s2;\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsemessageFormatElement();\n\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsemessageFormatElement();\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c0(s1);\n      }\n\n      s0 = s1;\n      return s0;\n    }\n\n    function peg$parsemessageFormatElement() {\n      var s0;\n      s0 = peg$parsemessageTextElement();\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseargumentElement();\n      }\n\n      return s0;\n    }\n\n    function peg$parsemessageText() {\n      var s0, s1, s2, s3, s4, s5;\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$currPos;\n      s3 = peg$parse_();\n\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parsechars();\n\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse_();\n\n          if (s5 !== peg$FAILED) {\n            s3 = [s3, s4, s5];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$currPos;\n          s3 = peg$parse_();\n\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsechars();\n\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse_();\n\n              if (s5 !== peg$FAILED) {\n                s3 = [s3, s4, s5];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        }\n      } else {\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1(s1);\n      }\n\n      s0 = s1;\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsews();\n\n        if (s1 !== peg$FAILED) {\n          s0 = input.substring(s0, peg$currPos);\n        } else {\n          s0 = s1;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsemessageTextElement() {\n      var s0, s1;\n      s0 = peg$currPos;\n      s1 = peg$parsemessageText();\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c2(s1);\n      }\n\n      s0 = s1;\n      return s0;\n    }\n\n    function peg$parseargument() {\n      var s0, s1, s2;\n      s0 = peg$parsenumber();\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = [];\n\n        if (peg$c3.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c4);\n          }\n        }\n\n        if (s2 !== peg$FAILED) {\n          while (s2 !== peg$FAILED) {\n            s1.push(s2);\n\n            if (peg$c3.test(input.charAt(peg$currPos))) {\n              s2 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s2 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c4);\n              }\n            }\n          }\n        } else {\n          s1 = peg$FAILED;\n        }\n\n        if (s1 !== peg$FAILED) {\n          s0 = input.substring(s0, peg$currPos);\n        } else {\n          s0 = s1;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseargumentElement() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n      s0 = peg$currPos;\n\n      if (input.charCodeAt(peg$currPos) === 123) {\n        s1 = peg$c5;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c6);\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseargument();\n\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n\n            if (s4 !== peg$FAILED) {\n              s5 = peg$currPos;\n\n              if (input.charCodeAt(peg$currPos) === 44) {\n                s6 = peg$c7;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c8);\n                }\n              }\n\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse_();\n\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseelementFormat();\n\n                  if (s8 !== peg$FAILED) {\n                    s6 = [s6, s7, s8];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse_();\n\n                if (s6 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 125) {\n                    s7 = peg$c9;\n                    peg$currPos++;\n                  } else {\n                    s7 = peg$FAILED;\n\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c10);\n                    }\n                  }\n\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c11(s3, s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseelementFormat() {\n      var s0;\n      s0 = peg$parsesimpleFormat();\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsepluralFormat();\n\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseselectOrdinalFormat();\n\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseselectFormat();\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsesimpleFormat() {\n      var s0, s1, s2, s3, s4, s5, s6;\n      s0 = peg$currPos;\n\n      if (input.substr(peg$currPos, 6) === peg$c12) {\n        s1 = peg$c12;\n        peg$currPos += 6;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c13);\n        }\n      }\n\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 4) === peg$c14) {\n          s1 = peg$c14;\n          peg$currPos += 4;\n        } else {\n          s1 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c15);\n          }\n        }\n\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 4) === peg$c16) {\n            s1 = peg$c16;\n            peg$currPos += 4;\n          } else {\n            s1 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c17);\n            }\n          }\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s4 = peg$c7;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c8);\n            }\n          }\n\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsechars();\n\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c18(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsepluralFormat() {\n      var s0, s1, s2, s3, s4, s5;\n      s0 = peg$currPos;\n\n      if (input.substr(peg$currPos, 6) === peg$c19) {\n        s1 = peg$c19;\n        peg$currPos += 6;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c20);\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s3 = peg$c7;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c8);\n            }\n          }\n\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsepluralStyle();\n\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c21(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseselectOrdinalFormat() {\n      var s0, s1, s2, s3, s4, s5;\n      s0 = peg$currPos;\n\n      if (input.substr(peg$currPos, 13) === peg$c22) {\n        s1 = peg$c22;\n        peg$currPos += 13;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c23);\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s3 = peg$c7;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c8);\n            }\n          }\n\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsepluralStyle();\n\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c24(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseselectFormat() {\n      var s0, s1, s2, s3, s4, s5, s6;\n      s0 = peg$currPos;\n\n      if (input.substr(peg$currPos, 6) === peg$c25) {\n        s1 = peg$c25;\n        peg$currPos += 6;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c26);\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s3 = peg$c7;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c8);\n            }\n          }\n\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n\n            if (s4 !== peg$FAILED) {\n              s5 = [];\n              s6 = peg$parseoptionalFormatPattern();\n\n              if (s6 !== peg$FAILED) {\n                while (s6 !== peg$FAILED) {\n                  s5.push(s6);\n                  s6 = peg$parseoptionalFormatPattern();\n                }\n              } else {\n                s5 = peg$FAILED;\n              }\n\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c27(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseselector() {\n      var s0, s1, s2, s3;\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n\n      if (input.charCodeAt(peg$currPos) === 61) {\n        s2 = peg$c28;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c29);\n        }\n      }\n\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenumber();\n\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        s0 = input.substring(s0, peg$currPos);\n      } else {\n        s0 = s1;\n      }\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsechars();\n      }\n\n      return s0;\n    }\n\n    function peg$parseoptionalFormatPattern() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n      s0 = peg$currPos;\n      s1 = peg$parse_();\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseselector();\n\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse_();\n\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 123) {\n              s4 = peg$c5;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c6);\n              }\n            }\n\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse_();\n\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parsemessageFormatPattern();\n\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parse_();\n\n                  if (s7 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 125) {\n                      s8 = peg$c9;\n                      peg$currPos++;\n                    } else {\n                      s8 = peg$FAILED;\n\n                      if (peg$silentFails === 0) {\n                        peg$fail(peg$c10);\n                      }\n                    }\n\n                    if (s8 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c30(s2, s6);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseoffset() {\n      var s0, s1, s2, s3;\n      s0 = peg$currPos;\n\n      if (input.substr(peg$currPos, 7) === peg$c31) {\n        s1 = peg$c31;\n        peg$currPos += 7;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c32);\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsenumber();\n\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c33(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsepluralStyle() {\n      var s0, s1, s2, s3, s4;\n      s0 = peg$currPos;\n      s1 = peg$parseoffset();\n\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parseoptionalFormatPattern();\n\n          if (s4 !== peg$FAILED) {\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              s4 = peg$parseoptionalFormatPattern();\n            }\n          } else {\n            s3 = peg$FAILED;\n          }\n\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c34(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsews() {\n      var s0, s1;\n      peg$silentFails++;\n      s0 = [];\n\n      if (peg$c36.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c37);\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n\n          if (peg$c36.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c37);\n            }\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n\n      peg$silentFails--;\n\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c35);\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parse_() {\n      var s0, s1, s2;\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsews();\n\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsews();\n      }\n\n      if (s1 !== peg$FAILED) {\n        s0 = input.substring(s0, peg$currPos);\n      } else {\n        s0 = s1;\n      }\n\n      peg$silentFails--;\n\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c38);\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsedigit() {\n      var s0;\n\n      if (peg$c39.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c40);\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsehexDigit() {\n      var s0;\n\n      if (peg$c41.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c42);\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsenumber() {\n      var s0, s1, s2, s3, s4, s5;\n      s0 = peg$currPos;\n\n      if (input.charCodeAt(peg$currPos) === 48) {\n        s1 = peg$c43;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c44);\n        }\n      }\n\n      if (s1 === peg$FAILED) {\n        s1 = peg$currPos;\n        s2 = peg$currPos;\n\n        if (peg$c45.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c46);\n          }\n        }\n\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsedigit();\n\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsedigit();\n          }\n\n          if (s4 !== peg$FAILED) {\n            s3 = [s3, s4];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n\n        if (s2 !== peg$FAILED) {\n          s1 = input.substring(s1, peg$currPos);\n        } else {\n          s1 = s2;\n        }\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c47(s1);\n      }\n\n      s0 = s1;\n      return s0;\n    }\n\n    function peg$parsechar() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      if (peg$c48.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c49);\n        }\n      }\n\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n\n        if (input.substr(peg$currPos, 2) === peg$c50) {\n          s1 = peg$c50;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c51);\n          }\n        }\n\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c52();\n        }\n\n        s0 = s1;\n\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n\n          if (input.substr(peg$currPos, 2) === peg$c53) {\n            s1 = peg$c53;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n\n            if (peg$silentFails === 0) {\n              peg$fail(peg$c54);\n            }\n          }\n\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c55();\n          }\n\n          s0 = s1;\n\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n\n            if (input.substr(peg$currPos, 2) === peg$c56) {\n              s1 = peg$c56;\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n\n              if (peg$silentFails === 0) {\n                peg$fail(peg$c57);\n              }\n            }\n\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c58();\n            }\n\n            s0 = s1;\n\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n\n              if (input.substr(peg$currPos, 2) === peg$c59) {\n                s1 = peg$c59;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n\n                if (peg$silentFails === 0) {\n                  peg$fail(peg$c60);\n                }\n              }\n\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c61();\n              }\n\n              s0 = s1;\n\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n\n                if (input.substr(peg$currPos, 2) === peg$c62) {\n                  s1 = peg$c62;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c63);\n                  }\n                }\n\n                if (s1 !== peg$FAILED) {\n                  s2 = peg$currPos;\n                  s3 = peg$currPos;\n                  s4 = peg$parsehexDigit();\n\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parsehexDigit();\n\n                    if (s5 !== peg$FAILED) {\n                      s6 = peg$parsehexDigit();\n\n                      if (s6 !== peg$FAILED) {\n                        s7 = peg$parsehexDigit();\n\n                        if (s7 !== peg$FAILED) {\n                          s4 = [s4, s5, s6, s7];\n                          s3 = s4;\n                        } else {\n                          peg$currPos = s3;\n                          s3 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s3;\n                        s3 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s3;\n                      s3 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n\n                  if (s3 !== peg$FAILED) {\n                    s2 = input.substring(s2, peg$currPos);\n                  } else {\n                    s2 = s3;\n                  }\n\n                  if (s2 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c64(s2);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsechars() {\n      var s0, s1, s2;\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsechar();\n\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parsechar();\n        }\n      } else {\n        s1 = peg$FAILED;\n      }\n\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c65(s1);\n      }\n\n      s0 = s1;\n      return s0;\n    }\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail({\n          type: \"end\",\n          description: \"end of input\"\n        });\n      }\n\n      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));\n    }\n  }\n\n  return {\n    SyntaxError: peg$SyntaxError,\n    parse: peg$parse\n  };\n}();","map":{"version":3,"sources":["src/parser.js"],"names":[],"mappings":"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","sourcesContent":["export default (function() {\n  \"use strict\";\n\n  /*\n   * Generated by PEG.js 0.9.0.\n   *\n   * http://pegjs.org/\n   */\n\n  function peg$subclass(child, parent) {\n    function ctor() { this.constructor = child; }\n    ctor.prototype = parent.prototype;\n    child.prototype = new ctor();\n  }\n\n  function peg$SyntaxError(message, expected, found, location) {\n    this.message  = message;\n    this.expected = expected;\n    this.found    = found;\n    this.location = location;\n    this.name     = \"SyntaxError\";\n\n    if (typeof Error.captureStackTrace === \"function\") {\n      Error.captureStackTrace(this, peg$SyntaxError);\n    }\n  }\n\n  peg$subclass(peg$SyntaxError, Error);\n\n  function peg$parse(input) {\n    var options = arguments.length > 1 ? arguments[1] : {},\n        parser  = this,\n\n        peg$FAILED = {},\n\n        peg$startRuleFunctions = { start: peg$parsestart },\n        peg$startRuleFunction  = peg$parsestart,\n\n        peg$c0 = function(elements) {\n                return {\n                    type    : 'messageFormatPattern',\n                    elements: elements,\n                    location: location()\n                };\n            },\n        peg$c1 = function(text) {\n                var string = '',\n                    i, j, outerLen, inner, innerLen;\n\n                for (i = 0, outerLen = text.length; i < outerLen; i += 1) {\n                    inner = text[i];\n\n                    for (j = 0, innerLen = inner.length; j < innerLen; j += 1) {\n                        string += inner[j];\n                    }\n                }\n\n                return string;\n            },\n        peg$c2 = function(messageText) {\n                return {\n                    type : 'messageTextElement',\n                    value: messageText,\n                    location: location()\n                };\n            },\n        peg$c3 = /^[^ \\t\\n\\r,.+={}#]/,\n        peg$c4 = { type: \"class\", value: \"[^ \\\\t\\\\n\\\\r,.+={}#]\", description: \"[^ \\\\t\\\\n\\\\r,.+={}#]\" },\n        peg$c5 = \"{\",\n        peg$c6 = { type: \"literal\", value: \"{\", description: \"\\\"{\\\"\" },\n        peg$c7 = \",\",\n        peg$c8 = { type: \"literal\", value: \",\", description: \"\\\",\\\"\" },\n        peg$c9 = \"}\",\n        peg$c10 = { type: \"literal\", value: \"}\", description: \"\\\"}\\\"\" },\n        peg$c11 = function(id, format) {\n                return {\n                    type  : 'argumentElement',\n                    id    : id,\n                    format: format && format[2],\n                    location: location()\n                };\n            },\n        peg$c12 = \"number\",\n        peg$c13 = { type: \"literal\", value: \"number\", description: \"\\\"number\\\"\" },\n        peg$c14 = \"date\",\n        peg$c15 = { type: \"literal\", value: \"date\", description: \"\\\"date\\\"\" },\n        peg$c16 = \"time\",\n        peg$c17 = { type: \"literal\", value: \"time\", description: \"\\\"time\\\"\" },\n        peg$c18 = function(type, style) {\n                return {\n                    type : type + 'Format',\n                    style: style && style[2],\n                    location: location()\n                };\n            },\n        peg$c19 = \"plural\",\n        peg$c20 = { type: \"literal\", value: \"plural\", description: \"\\\"plural\\\"\" },\n        peg$c21 = function(pluralStyle) {\n                return {\n                    type   : pluralStyle.type,\n                    ordinal: false,\n                    offset : pluralStyle.offset || 0,\n                    options: pluralStyle.options,\n                    location: location()\n                };\n            },\n        peg$c22 = \"selectordinal\",\n        peg$c23 = { type: \"literal\", value: \"selectordinal\", description: \"\\\"selectordinal\\\"\" },\n        peg$c24 = function(pluralStyle) {\n                return {\n                    type   : pluralStyle.type,\n                    ordinal: true,\n                    offset : pluralStyle.offset || 0,\n                    options: pluralStyle.options,\n                    location: location()\n                }\n            },\n        peg$c25 = \"select\",\n        peg$c26 = { type: \"literal\", value: \"select\", description: \"\\\"select\\\"\" },\n        peg$c27 = function(options) {\n                return {\n                    type   : 'selectFormat',\n                    options: options,\n                    location: location()\n                };\n            },\n        peg$c28 = \"=\",\n        peg$c29 = { type: \"literal\", value: \"=\", description: \"\\\"=\\\"\" },\n        peg$c30 = function(selector, pattern) {\n                return {\n                    type    : 'optionalFormatPattern',\n                    selector: selector,\n                    value   : pattern,\n                    location: location()\n                };\n            },\n        peg$c31 = \"offset:\",\n        peg$c32 = { type: \"literal\", value: \"offset:\", description: \"\\\"offset:\\\"\" },\n        peg$c33 = function(number) {\n                return number;\n            },\n        peg$c34 = function(offset, options) {\n                return {\n                    type   : 'pluralFormat',\n                    offset : offset,\n                    options: options,\n                    location: location()\n                };\n            },\n        peg$c35 = { type: \"other\", description: \"whitespace\" },\n        peg$c36 = /^[ \\t\\n\\r]/,\n        peg$c37 = { type: \"class\", value: \"[ \\\\t\\\\n\\\\r]\", description: \"[ \\\\t\\\\n\\\\r]\" },\n        peg$c38 = { type: \"other\", description: \"optionalWhitespace\" },\n        peg$c39 = /^[0-9]/,\n        peg$c40 = { type: \"class\", value: \"[0-9]\", description: \"[0-9]\" },\n        peg$c41 = /^[0-9a-f]/i,\n        peg$c42 = { type: \"class\", value: \"[0-9a-f]i\", description: \"[0-9a-f]i\" },\n        peg$c43 = \"0\",\n        peg$c44 = { type: \"literal\", value: \"0\", description: \"\\\"0\\\"\" },\n        peg$c45 = /^[1-9]/,\n        peg$c46 = { type: \"class\", value: \"[1-9]\", description: \"[1-9]\" },\n        peg$c47 = function(digits) {\n            return parseInt(digits, 10);\n        },\n        peg$c48 = /^[^{}\\\\\\0-\\x1F \\t\\n\\r]/,\n        peg$c49 = { type: \"class\", value: \"[^{}\\\\\\\\\\\\0-\\\\x1F\\\\x7f \\\\t\\\\n\\\\r]\", description: \"[^{}\\\\\\\\\\\\0-\\\\x1F\\\\x7f \\\\t\\\\n\\\\r]\" },\n        peg$c50 = \"\\\\\\\\\",\n        peg$c51 = { type: \"literal\", value: \"\\\\\\\\\", description: \"\\\"\\\\\\\\\\\\\\\\\\\"\" },\n        peg$c52 = function() { return '\\\\'; },\n        peg$c53 = \"\\\\#\",\n        peg$c54 = { type: \"literal\", value: \"\\\\#\", description: \"\\\"\\\\\\\\#\\\"\" },\n        peg$c55 = function() { return '\\\\#'; },\n        peg$c56 = \"\\\\{\",\n        peg$c57 = { type: \"literal\", value: \"\\\\{\", description: \"\\\"\\\\\\\\{\\\"\" },\n        peg$c58 = function() { return '\\u007B'; },\n        peg$c59 = \"\\\\}\",\n        peg$c60 = { type: \"literal\", value: \"\\\\}\", description: \"\\\"\\\\\\\\}\\\"\" },\n        peg$c61 = function() { return '\\u007D'; },\n        peg$c62 = \"\\\\u\",\n        peg$c63 = { type: \"literal\", value: \"\\\\u\", description: \"\\\"\\\\\\\\u\\\"\" },\n        peg$c64 = function(digits) {\n                return String.fromCharCode(parseInt(digits, 16));\n            },\n        peg$c65 = function(chars) { return chars.join(''); },\n\n        peg$currPos          = 0,\n        peg$savedPos         = 0,\n        peg$posDetailsCache  = [{ line: 1, column: 1, seenCR: false }],\n        peg$maxFailPos       = 0,\n        peg$maxFailExpected  = [],\n        peg$silentFails      = 0,\n\n        peg$result;\n\n    if (\"startRule\" in options) {\n      if (!(options.startRule in peg$startRuleFunctions)) {\n        throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n      }\n\n      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n    }\n\n    function text() {\n      return input.substring(peg$savedPos, peg$currPos);\n    }\n\n    function location() {\n      return peg$computeLocation(peg$savedPos, peg$currPos);\n    }\n\n    function expected(description) {\n      throw peg$buildException(\n        null,\n        [{ type: \"other\", description: description }],\n        input.substring(peg$savedPos, peg$currPos),\n        peg$computeLocation(peg$savedPos, peg$currPos)\n      );\n    }\n\n    function error(message) {\n      throw peg$buildException(\n        message,\n        null,\n        input.substring(peg$savedPos, peg$currPos),\n        peg$computeLocation(peg$savedPos, peg$currPos)\n      );\n    }\n\n    function peg$computePosDetails(pos) {\n      var details = peg$posDetailsCache[pos],\n          p, ch;\n\n      if (details) {\n        return details;\n      } else {\n        p = pos - 1;\n        while (!peg$posDetailsCache[p]) {\n          p--;\n        }\n\n        details = peg$posDetailsCache[p];\n        details = {\n          line:   details.line,\n          column: details.column,\n          seenCR: details.seenCR\n        };\n\n        while (p < pos) {\n          ch = input.charAt(p);\n          if (ch === \"\\n\") {\n            if (!details.seenCR) { details.line++; }\n            details.column = 1;\n            details.seenCR = false;\n          } else if (ch === \"\\r\" || ch === \"\\u2028\" || ch === \"\\u2029\") {\n            details.line++;\n            details.column = 1;\n            details.seenCR = true;\n          } else {\n            details.column++;\n            details.seenCR = false;\n          }\n\n          p++;\n        }\n\n        peg$posDetailsCache[pos] = details;\n        return details;\n      }\n    }\n\n    function peg$computeLocation(startPos, endPos) {\n      var startPosDetails = peg$computePosDetails(startPos),\n          endPosDetails   = peg$computePosDetails(endPos);\n\n      return {\n        start: {\n          offset: startPos,\n          line:   startPosDetails.line,\n          column: startPosDetails.column\n        },\n        end: {\n          offset: endPos,\n          line:   endPosDetails.line,\n          column: endPosDetails.column\n        }\n      };\n    }\n\n    function peg$fail(expected) {\n      if (peg$currPos < peg$maxFailPos) { return; }\n\n      if (peg$currPos > peg$maxFailPos) {\n        peg$maxFailPos = peg$currPos;\n        peg$maxFailExpected = [];\n      }\n\n      peg$maxFailExpected.push(expected);\n    }\n\n    function peg$buildException(message, expected, found, location) {\n      function cleanupExpected(expected) {\n        var i = 1;\n\n        expected.sort(function(a, b) {\n          if (a.description < b.description) {\n            return -1;\n          } else if (a.description > b.description) {\n            return 1;\n          } else {\n            return 0;\n          }\n        });\n\n        while (i < expected.length) {\n          if (expected[i - 1] === expected[i]) {\n            expected.splice(i, 1);\n          } else {\n            i++;\n          }\n        }\n      }\n\n      function buildMessage(expected, found) {\n        function stringEscape(s) {\n          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }\n\n          return s\n            .replace(/\\\\/g,   '\\\\\\\\')\n            .replace(/\"/g,    '\\\\\"')\n            .replace(/\\x08/g, '\\\\b')\n            .replace(/\\t/g,   '\\\\t')\n            .replace(/\\n/g,   '\\\\n')\n            .replace(/\\f/g,   '\\\\f')\n            .replace(/\\r/g,   '\\\\r')\n            .replace(/[\\x00-\\x07\\x0B\\x0E\\x0F]/g, function(ch) { return '\\\\x0' + hex(ch); })\n            .replace(/[\\x10-\\x1F\\x80-\\xFF]/g,    function(ch) { return '\\\\x'  + hex(ch); })\n            .replace(/[\\u0100-\\u0FFF]/g,         function(ch) { return '\\\\u0' + hex(ch); })\n            .replace(/[\\u1000-\\uFFFF]/g,         function(ch) { return '\\\\u'  + hex(ch); });\n        }\n\n        var expectedDescs = new Array(expected.length),\n            expectedDesc, foundDesc, i;\n\n        for (i = 0; i < expected.length; i++) {\n          expectedDescs[i] = expected[i].description;\n        }\n\n        expectedDesc = expected.length > 1\n          ? expectedDescs.slice(0, -1).join(\", \")\n              + \" or \"\n              + expectedDescs[expected.length - 1]\n          : expectedDescs[0];\n\n        foundDesc = found ? \"\\\"\" + stringEscape(found) + \"\\\"\" : \"end of input\";\n\n        return \"Expected \" + expectedDesc + \" but \" + foundDesc + \" found.\";\n      }\n\n      if (expected !== null) {\n        cleanupExpected(expected);\n      }\n\n      return new peg$SyntaxError(\n        message !== null ? message : buildMessage(expected, found),\n        expected,\n        found,\n        location\n      );\n    }\n\n    function peg$parsestart() {\n      var s0;\n\n      s0 = peg$parsemessageFormatPattern();\n\n      return s0;\n    }\n\n    function peg$parsemessageFormatPattern() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsemessageFormatElement();\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsemessageFormatElement();\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c0(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsemessageFormatElement() {\n      var s0;\n\n      s0 = peg$parsemessageTextElement();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseargumentElement();\n      }\n\n      return s0;\n    }\n\n    function peg$parsemessageText() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$currPos;\n      s3 = peg$parse_();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parsechars();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse_();\n          if (s5 !== peg$FAILED) {\n            s3 = [s3, s4, s5];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$currPos;\n          s3 = peg$parse_();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parsechars();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse_();\n              if (s5 !== peg$FAILED) {\n                s3 = [s3, s4, s5];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        }\n      } else {\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1(s1);\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsews();\n        if (s1 !== peg$FAILED) {\n          s0 = input.substring(s0, peg$currPos);\n        } else {\n          s0 = s1;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsemessageTextElement() {\n      var s0, s1;\n\n      s0 = peg$currPos;\n      s1 = peg$parsemessageText();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c2(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parseargument() {\n      var s0, s1, s2;\n\n      s0 = peg$parsenumber();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = [];\n        if (peg$c3.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c4); }\n        }\n        if (s2 !== peg$FAILED) {\n          while (s2 !== peg$FAILED) {\n            s1.push(s2);\n            if (peg$c3.test(input.charAt(peg$currPos))) {\n              s2 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c4); }\n            }\n          }\n        } else {\n          s1 = peg$FAILED;\n        }\n        if (s1 !== peg$FAILED) {\n          s0 = input.substring(s0, peg$currPos);\n        } else {\n          s0 = s1;\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parseargumentElement() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 123) {\n        s1 = peg$c5;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c6); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseargument();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$currPos;\n              if (input.charCodeAt(peg$currPos) === 44) {\n                s6 = peg$c7;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c8); }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse_();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseelementFormat();\n                  if (s8 !== peg$FAILED) {\n                    s6 = [s6, s7, s8];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse_();\n                if (s6 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 125) {\n                    s7 = peg$c9;\n                    peg$currPos++;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c10); }\n                  }\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c11(s3, s5);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseelementFormat() {\n      var s0;\n\n      s0 = peg$parsesimpleFormat();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsepluralFormat();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseselectOrdinalFormat();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseselectFormat();\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsesimpleFormat() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 6) === peg$c12) {\n        s1 = peg$c12;\n        peg$currPos += 6;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c13); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 4) === peg$c14) {\n          s1 = peg$c14;\n          peg$currPos += 4;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c15); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.substr(peg$currPos, 4) === peg$c16) {\n            s1 = peg$c16;\n            peg$currPos += 4;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c17); }\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s4 = peg$c7;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c8); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsechars();\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c18(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsepluralFormat() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 6) === peg$c19) {\n        s1 = peg$c19;\n        peg$currPos += 6;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c20); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s3 = peg$c7;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c8); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsepluralStyle();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c21(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseselectOrdinalFormat() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 13) === peg$c22) {\n        s1 = peg$c22;\n        peg$currPos += 13;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c23); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s3 = peg$c7;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c8); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsepluralStyle();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c24(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseselectFormat() {\n      var s0, s1, s2, s3, s4, s5, s6;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 6) === peg$c25) {\n        s1 = peg$c25;\n        peg$currPos += 6;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c26); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 44) {\n            s3 = peg$c7;\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c8); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse_();\n            if (s4 !== peg$FAILED) {\n              s5 = [];\n              s6 = peg$parseoptionalFormatPattern();\n              if (s6 !== peg$FAILED) {\n                while (s6 !== peg$FAILED) {\n                  s5.push(s6);\n                  s6 = peg$parseoptionalFormatPattern();\n                }\n              } else {\n                s5 = peg$FAILED;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c27(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseselector() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 61) {\n        s2 = peg$c28;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c29); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenumber();\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        s0 = input.substring(s0, peg$currPos);\n      } else {\n        s0 = s1;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsechars();\n      }\n\n      return s0;\n    }\n\n    function peg$parseoptionalFormatPattern() {\n      var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n      s0 = peg$currPos;\n      s1 = peg$parse_();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseselector();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse_();\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 123) {\n              s4 = peg$c5;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c6); }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse_();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parsemessageFormatPattern();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parse_();\n                  if (s7 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 125) {\n                      s8 = peg$c9;\n                      peg$currPos++;\n                    } else {\n                      s8 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c10); }\n                    }\n                    if (s8 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c30(s2, s6);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parseoffset() {\n      var s0, s1, s2, s3;\n\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 7) === peg$c31) {\n        s1 = peg$c31;\n        peg$currPos += 7;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c32); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsenumber();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c33(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsepluralStyle() {\n      var s0, s1, s2, s3, s4;\n\n      s0 = peg$currPos;\n      s1 = peg$parseoffset();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse_();\n        if (s2 !== peg$FAILED) {\n          s3 = [];\n          s4 = peg$parseoptionalFormatPattern();\n          if (s4 !== peg$FAILED) {\n            while (s4 !== peg$FAILED) {\n              s3.push(s4);\n              s4 = peg$parseoptionalFormatPattern();\n            }\n          } else {\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c34(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n\n      return s0;\n    }\n\n    function peg$parsews() {\n      var s0, s1;\n\n      peg$silentFails++;\n      s0 = [];\n      if (peg$c36.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c37); }\n      }\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          if (peg$c36.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c37); }\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c35); }\n      }\n\n      return s0;\n    }\n\n    function peg$parse_() {\n      var s0, s1, s2;\n\n      peg$silentFails++;\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsews();\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsews();\n      }\n      if (s1 !== peg$FAILED) {\n        s0 = input.substring(s0, peg$currPos);\n      } else {\n        s0 = s1;\n      }\n      peg$silentFails--;\n      if (s0 === peg$FAILED) {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c38); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsedigit() {\n      var s0;\n\n      if (peg$c39.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c40); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsehexDigit() {\n      var s0;\n\n      if (peg$c41.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c42); }\n      }\n\n      return s0;\n    }\n\n    function peg$parsenumber() {\n      var s0, s1, s2, s3, s4, s5;\n\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 48) {\n        s1 = peg$c43;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c44); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$currPos;\n        s2 = peg$currPos;\n        if (peg$c45.test(input.charAt(peg$currPos))) {\n          s3 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c46); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsedigit();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsedigit();\n          }\n          if (s4 !== peg$FAILED) {\n            s3 = [s3, s4];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = input.substring(s1, peg$currPos);\n        } else {\n          s1 = s2;\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c47(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    function peg$parsechar() {\n      var s0, s1, s2, s3, s4, s5, s6, s7;\n\n      if (peg$c48.test(input.charAt(peg$currPos))) {\n        s0 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c49); }\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c50) {\n          s1 = peg$c50;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c51); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c52();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c53) {\n            s1 = peg$c53;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c54); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c55();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 2) === peg$c56) {\n              s1 = peg$c56;\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c57); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c58();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 2) === peg$c59) {\n                s1 = peg$c59;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c60); }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c61();\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 2) === peg$c62) {\n                  s1 = peg$c62;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c63); }\n                }\n                if (s1 !== peg$FAILED) {\n                  s2 = peg$currPos;\n                  s3 = peg$currPos;\n                  s4 = peg$parsehexDigit();\n                  if (s4 !== peg$FAILED) {\n                    s5 = peg$parsehexDigit();\n                    if (s5 !== peg$FAILED) {\n                      s6 = peg$parsehexDigit();\n                      if (s6 !== peg$FAILED) {\n                        s7 = peg$parsehexDigit();\n                        if (s7 !== peg$FAILED) {\n                          s4 = [s4, s5, s6, s7];\n                          s3 = s4;\n                        } else {\n                          peg$currPos = s3;\n                          s3 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s3;\n                        s3 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s3;\n                      s3 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s3;\n                    s3 = peg$FAILED;\n                  }\n                  if (s3 !== peg$FAILED) {\n                    s2 = input.substring(s2, peg$currPos);\n                  } else {\n                    s2 = s3;\n                  }\n                  if (s2 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c64(s2);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      return s0;\n    }\n\n    function peg$parsechars() {\n      var s0, s1, s2;\n\n      s0 = peg$currPos;\n      s1 = [];\n      s2 = peg$parsechar();\n      if (s2 !== peg$FAILED) {\n        while (s2 !== peg$FAILED) {\n          s1.push(s2);\n          s2 = peg$parsechar();\n        }\n      } else {\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c65(s1);\n      }\n      s0 = s1;\n\n      return s0;\n    }\n\n    peg$result = peg$startRuleFunction();\n\n    if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n      return peg$result;\n    } else {\n      if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n        peg$fail({ type: \"end\", description: \"end of input\" });\n      }\n\n      throw peg$buildException(\n        null,\n        peg$maxFailExpected,\n        peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n        peg$maxFailPos < input.length\n          ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n          : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n      );\n    }\n  }\n\n  return {\n    SyntaxError: peg$SyntaxError,\n    parse:       peg$parse\n  };\n})();"],"sourceRoot":"/"},"metadata":{},"sourceType":"script"}