{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/fan/modals/FileModal/FileModal.js\";\nimport React, { useRef, useCallback, useState, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport isEmpty from 'lodash/isEmpty';\nimport Grid from '@material-ui/core/Grid';\nimport { useFormEffect } from '@britania-crm/forms';\nimport attachmentsSchema, { INITIAL_VALUES } from '@britania-crm/forms/schemas/fan/attachments.schema';\nimport I18n, { useT } from '@britania-crm/i18n';\nimport { FanActions } from '@britania-crm/stores/fan';\nimport Button from '@britania-crm/web-components/Button';\nimport Form from '@britania-crm/web-components/Form';\nimport InputHidden from '@britania-crm/web-components/InputHidden';\nimport InputText from '@britania-crm/web-components/InputText';\nimport Modal from '@britania-crm/web-components/Modal';\nimport UploadImage from '@britania-crm/web-components/UploadImage';\nimport useStyles, { ButtonContainer } from './styles';\n\nconst FileModal = ({\n  id,\n  open,\n  handleClose,\n  onSave,\n  idFan,\n  row,\n  mode,\n  version\n}) => {\n  const classes = useStyles();\n  const t = useT();\n  const formRef = useRef(null);\n  const dispatch = useCallback(useDispatch(), []);\n  const [loader, setLoader] = useState(false);\n  const modeView = useMemo(() => mode === 'view', [mode]);\n  const titleModal = useMemo(() => {\n    switch (mode) {\n      case 'view':\n        return t('view of {this}', {\n          this: t('archive', {\n            howMany: 1\n          })\n        });\n\n      case 'edit':\n        return t('editing {this}', {\n          this: t('archive', {\n            howMany: 1\n          })\n        });\n\n      default:\n        return t('login image new file');\n    }\n  }, [mode, t]);\n  const onSuccessCallBack = useCallback(data => {\n    onSave(data);\n    setLoader(false);\n    handleClose();\n  }, [handleClose, onSave]);\n  const handleSubmit = useCallback(values => {\n    dispatch(FanActions.uploadFileFan({ ...values,\n      version\n    }, idFan, onSuccessCallBack));\n  }, [dispatch, idFan, onSuccessCallBack, version]);\n  const handleNameFile = useCallback(({\n    name\n  }) => {\n    if (name) {\n      const fileName = name.split('.');\n\n      if (version > 0) {\n        formRef.current.setFieldValue('filename', `${fileName[0]} (${version + 1}).${fileName[1]}`);\n      } else {\n        formRef.current.setFieldValue('filename', name);\n      }\n    }\n  }, [version]);\n  useFormEffect(() => {\n    if (!isEmpty(row)) {\n      formRef.current.setData({ ...row,\n        filename: row.file.filename\n      });\n    }\n  }, [formRef, row]);\n  return /*#__PURE__*/React.createElement(Modal, {\n    id: id,\n    open: open,\n    title: titleModal,\n    maxWidth: \"md\",\n    fullWidth: true,\n    escapeWhenLoading: true,\n    loading: loader,\n    FooterComponent: () => /*#__PURE__*/React.createElement(ButtonContainer, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }\n    }, !modeView && /*#__PURE__*/React.createElement(I18n, {\n      as: Button,\n      color: \"secondary\",\n      variant: \"outlined\",\n      onClick: () => {\n        handleClose();\n        formRef.current.reset();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 13\n      }\n    }, \"cancel\"), /*#__PURE__*/React.createElement(Button, {\n      color: \"secondary\",\n      variant: \"contained\",\n      onClick: () => modeView ? handleClose() : formRef.current.submit(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }\n    }, modeView ? t('turn back') : t('save'))),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    ref: formRef,\n    onSubmit: handleSubmit,\n    schemaConstructor: attachmentsSchema,\n    defaultValues: INITIAL_VALUES,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    item: true,\n    sm: 12,\n    spacing: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    className: classes.upload,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(UploadImage, {\n    name: \"file\",\n    hideWhenHasValue: true,\n    types: ['image/png', 'image/jpg', 'application/pdf'],\n    previewStyle: {\n      width: 200,\n      height: 200\n    },\n    clearable: !modeView,\n    preview: true,\n    onValueChange: handleNameFile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(InputHidden, {\n    name: \"path\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(InputHidden, {\n    name: \"fileId\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputText, {\n    name: \"filename\",\n    label: t('filename'),\n    disabled: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputText, {\n    name: \"description\",\n    label: t('description', {\n      howMany: 1\n    }),\n    disabled: modeView,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }\n  })))));\n};\n\nFileModal.propTypes = {\n  id: PropTypes.string.isRequired,\n  open: PropTypes.bool.isRequired,\n  handleClose: PropTypes.func.isRequired,\n  onSave: PropTypes.func,\n  row: PropTypes.object,\n  mode: PropTypes.string,\n  idFan: PropTypes.number.isRequired,\n  version: PropTypes.number.isRequired\n};\nFileModal.defaultProps = {\n  onSave() {},\n\n  row: {},\n  mode: 'create'\n};\nexport default FileModal;","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/fan/modals/FileModal/FileModal.js"],"names":["React","useRef","useCallback","useState","useMemo","useDispatch","PropTypes","isEmpty","Grid","useFormEffect","attachmentsSchema","INITIAL_VALUES","I18n","useT","FanActions","Button","Form","InputHidden","InputText","Modal","UploadImage","useStyles","ButtonContainer","FileModal","id","open","handleClose","onSave","idFan","row","mode","version","classes","t","formRef","dispatch","loader","setLoader","modeView","titleModal","this","howMany","onSuccessCallBack","data","handleSubmit","values","uploadFileFan","handleNameFile","name","fileName","split","current","setFieldValue","setData","filename","file","reset","submit","upload","width","height","propTypes","string","isRequired","bool","func","object","number","defaultProps"],"mappings":"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","sourcesContent":["import React, {\n  useRef,\n  useCallback,\n  useState,\n  useMemo\n} from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport PropTypes from 'prop-types'\n\nimport isEmpty from 'lodash/isEmpty'\n\nimport Grid from '@material-ui/core/Grid'\n\nimport { useFormEffect } from '@britania-crm/forms'\nimport attachmentsSchema, { INITIAL_VALUES } from '@britania-crm/forms/schemas/fan/attachments.schema'\nimport I18n, { useT } from '@britania-crm/i18n'\nimport { FanActions } from '@britania-crm/stores/fan'\nimport Button from '@britania-crm/web-components/Button'\nimport Form from '@britania-crm/web-components/Form'\nimport InputHidden from '@britania-crm/web-components/InputHidden'\nimport InputText from '@britania-crm/web-components/InputText'\nimport Modal from '@britania-crm/web-components/Modal'\nimport UploadImage from '@britania-crm/web-components/UploadImage'\n\nimport useStyles, { ButtonContainer } from './styles'\n\nconst FileModal = ({\n  id, open, handleClose, onSave, idFan, row, mode, version\n}) => {\n  const classes = useStyles()\n  const t = useT()\n  const formRef = useRef(null)\n  const dispatch = useCallback(useDispatch(), [])\n\n  const [loader, setLoader] = useState(false)\n\n  const modeView = useMemo(() => mode === 'view', [mode])\n\n  const titleModal = useMemo(() => {\n    switch (mode) {\n      case 'view':\n        return t('view of {this}', { this: t('archive', { howMany: 1 }) })\n      case 'edit':\n        return t('editing {this}', { this: t('archive', { howMany: 1 }) })\n      default:\n        return t('login image new file')\n    }\n  }, [mode, t])\n\n  const onSuccessCallBack = useCallback(\n    (data) => {\n      onSave(data)\n      setLoader(false)\n      handleClose()\n    },\n    [handleClose, onSave]\n  )\n\n  const handleSubmit = useCallback(\n    (values) => {\n      dispatch(FanActions.uploadFileFan(\n        { ...values, version },\n        idFan,\n        onSuccessCallBack\n      ))\n    },\n    [dispatch, idFan, onSuccessCallBack, version]\n  )\n\n  const handleNameFile = useCallback(\n    ({ name }) => {\n      if (name) {\n        const fileName = name.split('.')\n        if (version > 0) {\n          formRef.current.setFieldValue('filename', `${ fileName[0] } (${ version + 1 }).${ fileName[1] }`)\n        } else {\n          formRef.current.setFieldValue('filename', name)\n        }\n      }\n    },\n    [version]\n  )\n\n  useFormEffect(() => {\n    if (!isEmpty(row)) {\n      formRef.current.setData({ ...row, filename: row.file.filename })\n    }\n  }, [formRef, row])\n\n  return (\n    <Modal\n      id={ id }\n      open={ open }\n      title={ titleModal }\n      maxWidth=\"md\"\n      fullWidth\n      escapeWhenLoading\n      loading={ loader }\n      FooterComponent={ () => (\n        <ButtonContainer>\n          {!modeView && (\n            <I18n as={ Button }\n              color=\"secondary\"\n              variant=\"outlined\"\n              onClick={ () => {\n                handleClose()\n                formRef.current.reset()\n              } }\n            >\n              cancel\n            </I18n>)}\n          <Button\n            color=\"secondary\"\n            variant=\"contained\"\n            onClick={ () => modeView ? handleClose() : formRef.current.submit() }\n          >\n            { modeView ? t('turn back') : t('save')}\n          </Button>\n        </ButtonContainer>\n      ) }\n    >\n      <Form\n        ref={ formRef }\n        onSubmit={ handleSubmit }\n        schemaConstructor={ attachmentsSchema }\n        defaultValues={ INITIAL_VALUES }\n      >\n        <Grid container item sm={ 12 } spacing={ 1 } >\n          <Grid item sm={ 12 } className={ classes.upload }>\n            <UploadImage\n              name=\"file\"\n              hideWhenHasValue\n              types={ ['image/png', 'image/jpg', 'application/pdf'] }\n              previewStyle={ { width: 200, height: 200 } }\n              clearable={ !modeView }\n              preview\n              onValueChange={ handleNameFile }\n            />\n            <InputHidden name=\"path\" />\n            <InputHidden name=\"fileId\" />\n          </Grid>\n          <Grid item sm={ 12 } md={ 12 }>\n            <InputText\n              name=\"filename\"\n              label={ t('filename') }\n              disabled\n            />\n          </Grid>\n          <Grid item sm={ 12 } md={ 12 }>\n            <InputText\n              name=\"description\"\n              label={ t('description', { howMany: 1 }) }\n              disabled={ modeView }\n            />\n          </Grid>\n        </Grid>\n      </Form>\n    </Modal>\n  )\n}\n\nFileModal.propTypes = {\n  id: PropTypes.string.isRequired,\n  open: PropTypes.bool.isRequired,\n  handleClose: PropTypes.func.isRequired,\n  onSave: PropTypes.func,\n  row: PropTypes.object,\n  mode: PropTypes.string,\n  idFan: PropTypes.number.isRequired,\n  version: PropTypes.number.isRequired\n}\n\nFileModal.defaultProps = {\n  onSave () {},\n  row: {},\n  mode: 'create'\n}\n\nexport default FileModal\n"]},"metadata":{},"sourceType":"module"}