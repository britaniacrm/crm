{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/customers/screens/CustomerPreRegistrationFormScreen/tabs/Documents/Documents.js\";\nimport React, { useCallback, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport isArray from 'lodash/isArray';\nimport map from 'lodash/map';\nimport Grid from '@material-ui/core/Grid';\nimport { Scope } from '@britania-crm/forms';\nimport { VALUES_NAME, INITIAL_VALUES_DOCUMENTS } from '@britania-crm/forms/schemas/customer/documents.schema';\nimport { useT } from '@britania-crm/i18n';\nimport { CustomerActions } from '@britania-crm/stores/customer';\nimport ButtonUploadFile from '@britania-crm/web-components/ButtonUploadFile';\nimport IconButton from '@britania-crm/web-components/IconButton';\nimport InfoIcon from '@britania-crm/web-components/Icons/infoIcon';\nimport Tooltip from '@britania-crm/web-components/Tooltip';\nimport useStyles from './styles';\n\nconst Documents = ({\n  disabled,\n  handleDocumentation\n}) => {\n  const classes = useStyles();\n  const t = useT();\n  const dispatch = useCallback(useDispatch(), []);\n  const fileTypes = useMemo(() => ['application/pdf', 'video/*', 'image/*', '.csv', '.doc', '.docx', '.xls', '.xlsx', '.ppt', '.pptx'], []);\n  const onDownloadClick = useCallback((_, row) => {\n    dispatch(CustomerActions.downloadFileCustomer(row === null || row === void 0 ? void 0 : row.path, row === null || row === void 0 ? void 0 : row.filename));\n  }, [dispatch]);\n  return /*#__PURE__*/React.createElement(Scope, {\n    path: \"documents\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    className: classes.iconInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }, handleDocumentation && /*#__PURE__*/React.createElement(Tooltip, {\n    title: t('documentation', {\n      howMany: 1\n    }),\n    arrow: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    color: \"care\",\n    onClick: handleDocumentation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(InfoIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 17\n    }\n  })))), map(VALUES_NAME, ({\n    name,\n    label,\n    max\n  }) => /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    md: 6,\n    key: name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(ButtonUploadFile, {\n    label: t(label),\n    buttonLabel: t('click here to select the attachment'),\n    className: classes.addButtonFile,\n    variant: \"contained\",\n    isLoading: false,\n    disabled: disabled,\n    types: fileTypes,\n    name: name,\n    toDownload: onDownloadClick,\n    multiple: isArray(INITIAL_VALUES_DOCUMENTS[name]),\n    max: max,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  })))));\n};\n\nDocuments.propTypes = {\n  disabled: PropTypes.bool.isRequired,\n  handleDocumentation: PropTypes.func.isRequired\n};\nexport default Documents;","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/customers/screens/CustomerPreRegistrationFormScreen/tabs/Documents/Documents.js"],"names":["React","useCallback","useMemo","useDispatch","PropTypes","isArray","map","Grid","Scope","VALUES_NAME","INITIAL_VALUES_DOCUMENTS","useT","CustomerActions","ButtonUploadFile","IconButton","InfoIcon","Tooltip","useStyles","Documents","disabled","handleDocumentation","classes","t","dispatch","fileTypes","onDownloadClick","_","row","downloadFileCustomer","path","filename","iconInfo","howMany","name","label","max","addButtonFile","propTypes","bool","isRequired","func"],"mappings":"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","sourcesContent":["import React, {\n  useCallback,\n  useMemo\n} from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport PropTypes from 'prop-types'\n\nimport isArray from 'lodash/isArray'\nimport map from 'lodash/map'\n\nimport Grid from '@material-ui/core/Grid'\n\nimport { Scope } from '@britania-crm/forms'\nimport {\n  VALUES_NAME,\n  INITIAL_VALUES_DOCUMENTS\n} from '@britania-crm/forms/schemas/customer/documents.schema'\nimport { useT } from '@britania-crm/i18n'\nimport { CustomerActions } from '@britania-crm/stores/customer'\nimport ButtonUploadFile from '@britania-crm/web-components/ButtonUploadFile'\nimport IconButton from '@britania-crm/web-components/IconButton'\nimport InfoIcon from '@britania-crm/web-components/Icons/infoIcon'\nimport Tooltip from '@britania-crm/web-components/Tooltip'\n\nimport useStyles from './styles'\n\nconst Documents = ({ disabled, handleDocumentation }) => {\n  const classes = useStyles()\n  const t = useT()\n  const dispatch = useCallback(useDispatch(), [])\n\n  const fileTypes = useMemo(\n    () => [\n      'application/pdf',\n      'video/*',\n      'image/*',\n      '.csv',\n      '.doc',\n      '.docx',\n      '.xls',\n      '.xlsx',\n      '.ppt',\n      '.pptx'\n    ],\n    []\n  )\n\n  const onDownloadClick = useCallback(\n    (_, row) => {\n      dispatch(CustomerActions.downloadFileCustomer(row?.path, row?.filename))\n    },\n    [dispatch]\n  )\n\n  return (\n    <Scope path=\"documents\">\n      <Grid container spacing={ 1 }>\n        <Grid item sm={ 12 } className={ classes.iconInfo }>\n          {handleDocumentation && (\n            <Tooltip title={ t('documentation', { howMany: 1 }) } arrow>\n              <IconButton color=\"care\" onClick={ handleDocumentation } >\n                <InfoIcon />\n              </IconButton>\n            </Tooltip>\n          )}\n        </Grid>\n        {map(VALUES_NAME, ({\n          name, label, max\n        }) => (\n          <Grid item sm={ 12 } md={ 6 } key={ name }>\n            <ButtonUploadFile\n              label={ t(label) }\n              buttonLabel={ t('click here to select the attachment') }\n              className={ classes.addButtonFile }\n              variant=\"contained\"\n              isLoading={ false }\n              disabled={ disabled }\n              types={ fileTypes }\n              name={ name }\n              toDownload={ onDownloadClick }\n              multiple={ isArray(INITIAL_VALUES_DOCUMENTS[name]) }\n              max={ max }\n            />\n          </Grid>\n        ))}\n      </Grid>\n    </Scope>\n  )\n}\n\nDocuments.propTypes = { disabled: PropTypes.bool.isRequired, handleDocumentation: PropTypes.func.isRequired }\n\nexport default Documents\n"]},"metadata":{},"sourceType":"module"}