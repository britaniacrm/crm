{"ast":null,"code":"import { createReducer } from 'reduxsauce';\nimport { AppTypes } from './app.actions';\nconst INITIAL_STATE = {\n  alerts: [],\n  disableDrag: false,\n  reminders: []\n};\n\nconst addAlert = (state = INITIAL_STATE, {\n  newAlert\n}) => ({ ...state,\n  alerts: [...state.alerts, {\n    id: new Date().getTime(),\n    expiredAt: new Date().getTime() + 3 * 1000,\n    ...newAlert\n  }]\n});\n\nconst removeAlert = (state = INITIAL_STATE, {\n  alertId\n}) => ({ ...state,\n  alerts: state.alerts.filter(item => item.id !== alertId)\n});\n\nconst removeExpiredAlerts = (state = INITIAL_STATE) => ({ ...state,\n  alerts: state.alerts.filter(item => item.expiredAt <= new Date().getTime() + 3 * 1000)\n});\n\nconst closeReminder = (state = INITIAL_STATE, {\n  reminderId\n}) => ({ ...state,\n  reminders: state.reminders.filter(reminder => reminder.id !== reminderId)\n});\n\nconst changeDragStatusRememberContainer = (state = INITIAL_STATE, {\n  disableDrag\n}) => ({ ...state,\n  disableDrag\n});\n\nconst createNewReminderSuccess = (state = INITIAL_STATE, {\n  reminderCreated\n}) => ({ ...state,\n  reminders: [...state.reminders.map(reminder => reminder.topLayer ? { ...reminder,\n    topLayer: false\n  } : reminder), { ...reminderCreated,\n    topLayer: true,\n    showContent: true\n  }]\n});\n\nconst minimizeReminder = (state = INITIAL_STATE, {\n  reminderId,\n  minimize\n}) => ({ ...state,\n  reminders: state.reminders.map(reminder => reminder.id === reminderId ? { ...reminder,\n    showContent: !minimize,\n    topLayer: true\n  } : { ...reminder,\n    topLayer: false\n  })\n});\n\nconst saveReminder = (state = INITIAL_STATE, {\n  reminderId,\n  content\n}) => ({ ...state,\n  reminders: state.reminders.map(reminder => reminder.id === reminderId ? { ...reminder,\n    content\n  } : reminder)\n});\n\nconst selectReminderToTopLayer = (state = INITIAL_STATE, {\n  reminderId\n}) => ({ ...state,\n  disableDragging: false,\n  reminders: state.reminders.map(reminder => reminder.id === reminderId ? { ...reminder,\n    topLayer: true\n  } : { ...reminder,\n    topLayer: false\n  })\n});\n\nconst setAllReminders = (state = INITIAL_STATE, {\n  reminders\n}) => ({ ...state,\n  reminders: reminders.map(reminder => ({ ...reminder,\n    showContent: false,\n    topLayer: false\n  }))\n});\n\nexport default createReducer(INITIAL_STATE, {\n  [AppTypes.ADD_ALERT]: addAlert,\n  [AppTypes.REMOVE_ALERT]: removeAlert,\n  [AppTypes.REMOVE_EXPIRED_ALERTS]: removeExpiredAlerts,\n  [AppTypes.CLOSE_REMINDER]: closeReminder,\n  [AppTypes.CHANGE_DRAG_STATUS_REMEMBER_CONTAINER]: changeDragStatusRememberContainer,\n  [AppTypes.CREATE_NEW_REMINDER_SUCCESS]: createNewReminderSuccess,\n  [AppTypes.MINIMIZE_REMINDER]: minimizeReminder,\n  [AppTypes.SAVE_REMINDER]: saveReminder,\n  [AppTypes.SELECT_REMINDER_TO_TOP_LAYER]: selectReminderToTopLayer,\n  [AppTypes.SET_ALL_REMINDERS]: setAllReminders\n});","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/core/stores/app/app.reducer.js"],"names":["createReducer","AppTypes","INITIAL_STATE","alerts","disableDrag","reminders","addAlert","state","newAlert","id","Date","getTime","expiredAt","removeAlert","alertId","filter","item","removeExpiredAlerts","closeReminder","reminderId","reminder","changeDragStatusRememberContainer","createNewReminderSuccess","reminderCreated","map","topLayer","showContent","minimizeReminder","minimize","saveReminder","content","selectReminderToTopLayer","disableDragging","setAllReminders","ADD_ALERT","REMOVE_ALERT","REMOVE_EXPIRED_ALERTS","CLOSE_REMINDER","CHANGE_DRAG_STATUS_REMEMBER_CONTAINER","CREATE_NEW_REMINDER_SUCCESS","MINIMIZE_REMINDER","SAVE_REMINDER","SELECT_REMINDER_TO_TOP_LAYER","SET_ALL_REMINDERS"],"mappings":"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","sourcesContent":["import { createReducer } from 'reduxsauce'\n\nimport { AppTypes } from './app.actions'\n\nconst INITIAL_STATE = {\n  alerts: [],\n  disableDrag: false,\n  reminders: []\n}\n\nconst addAlert = (state = INITIAL_STATE, { newAlert }) => ({\n  ...state,\n  alerts: [\n    ...state.alerts,\n    {\n      id: (new Date()).getTime(),\n      expiredAt: (new Date()).getTime() + (3 * 1000),\n      ...newAlert\n    }\n  ]\n})\n\nconst removeAlert = (state = INITIAL_STATE, { alertId }) => ({\n  ...state,\n  alerts: state.alerts.filter((item) => item.id !== alertId)\n})\n\nconst removeExpiredAlerts = (state = INITIAL_STATE) => ({\n  ...state,\n  alerts: state.alerts.filter(\n    (item) => item.expiredAt <= ((new Date()).getTime() + (3 * 1000))\n  )\n})\n\nconst closeReminder = (state = INITIAL_STATE, { reminderId }) => ({\n  ...state,\n  reminders: state.reminders.filter((reminder) => reminder.id !== reminderId)\n})\n\nconst changeDragStatusRememberContainer = (state = INITIAL_STATE, { disableDrag }) => ({\n  ...state,\n  disableDrag\n})\n\nconst createNewReminderSuccess = (state = INITIAL_STATE, { reminderCreated }) => ({\n  ...state,\n  reminders: [\n    ...state.reminders.map((reminder) => (\n      reminder.topLayer\n        ? { ...reminder, topLayer: false }\n        : reminder\n    )),\n    {\n      ...reminderCreated,\n      topLayer: true,\n      showContent: true\n    }\n  ]\n})\n\nconst minimizeReminder = (state = INITIAL_STATE, { reminderId, minimize }) => ({\n  ...state,\n  reminders: state.reminders.map((reminder) => (\n    reminder.id === reminderId\n      ? {\n        ...reminder, showContent: !minimize, topLayer: true\n      }\n      : { ...reminder, topLayer: false }\n  ))\n})\n\nconst saveReminder = (state = INITIAL_STATE, { reminderId, content }) => ({\n  ...state,\n  reminders: state.reminders.map((reminder) => (\n    reminder.id === reminderId\n      ? { ...reminder, content }\n      : reminder\n  ))\n})\n\nconst selectReminderToTopLayer = (state = INITIAL_STATE, { reminderId }) => ({\n  ...state,\n  disableDragging: false,\n  reminders: state.reminders.map((reminder) => (\n    reminder.id === reminderId\n      ? { ...reminder, topLayer: true }\n      : { ...reminder, topLayer: false }\n  ))\n})\n\nconst setAllReminders = (state = INITIAL_STATE, { reminders }) => ({\n  ...state,\n  reminders: reminders.map((reminder) => ({\n    ...reminder,\n    showContent: false,\n    topLayer: false\n  }))\n})\n\nexport default createReducer(INITIAL_STATE, {\n  [AppTypes.ADD_ALERT]: addAlert,\n  [AppTypes.REMOVE_ALERT]: removeAlert,\n  [AppTypes.REMOVE_EXPIRED_ALERTS]: removeExpiredAlerts,\n\n  [AppTypes.CLOSE_REMINDER]: closeReminder,\n  [AppTypes.CHANGE_DRAG_STATUS_REMEMBER_CONTAINER]: changeDragStatusRememberContainer,\n  [AppTypes.CREATE_NEW_REMINDER_SUCCESS]: createNewReminderSuccess,\n  [AppTypes.MINIMIZE_REMINDER]: minimizeReminder,\n  [AppTypes.SAVE_REMINDER]: saveReminder,\n  [AppTypes.SELECT_REMINDER_TO_TOP_LAYER]: selectReminderToTopLayer,\n  [AppTypes.SET_ALL_REMINDERS]: setAllReminders\n})\n"]},"metadata":{},"sourceType":"module"}