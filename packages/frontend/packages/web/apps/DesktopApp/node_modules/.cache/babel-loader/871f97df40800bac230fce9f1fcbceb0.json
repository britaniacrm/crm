{"ast":null,"code":"import * as Yup from 'yup';\nimport flow from 'lodash/fp/flow';\nimport cep from '@britania-crm/forms/validators/cep.validator';\nimport cpfCnpj from '@britania-crm/forms/validators/cpfCnpj.validator';\nimport email from '@britania-crm/forms/validators/email.validator';\nimport maxLength from '@britania-crm/forms/validators/maxLength.validator';\nimport number from '@britania-crm/forms/validators/number.validator';\nimport phone from '@britania-crm/forms/validators/phone.validator';\nimport required from '@britania-crm/forms/validators/required.validator';\nconst addressInitialValues = {\n  zipCode: '',\n  publicPlace: '',\n  number: '',\n  district: '',\n  complement: '',\n  city: '',\n  state: '',\n  country: 'Brasil',\n  phone: '',\n  email: ''\n};\nexport const INITIAL_VALUES = {\n  mainData: {\n    parentCompanyCode: '',\n    parentCompanyName: '',\n    cnpj: '',\n    companyName: '',\n    branch: '',\n    commercialPhone: '',\n    cellPhone: '',\n    logisticsInformation: '',\n    creditAtatus: '',\n    branches: '',\n    regimeLetter: '',\n    creditSituation: '',\n    daysWithoutBilling: '',\n    customerRanking: '',\n    status: true\n  },\n  deliveryAddress: addressInitialValues,\n  billingAddress: addressInitialValues\n};\nexport default (({\n  t\n}) => {\n  const addressSchema = () => Yup.object().shape({\n    zipCode: cep({\n      t\n    })(Yup.string()),\n    publicPlace: flow(maxLength({\n      t,\n      length: 70,\n      type: t('characters')\n    }), required({\n      t\n    }))(Yup.string()),\n    number: flow(number({\n      t\n    }), required({\n      t\n    }), maxLength({\n      t,\n      length: 70,\n      type: t('characters')\n    }))(Yup.string()),\n    district: flow(maxLength({\n      t,\n      length: 40,\n      type: t('characters')\n    }), required({\n      t\n    }))(Yup.string()),\n    complement: flow(maxLength({\n      t,\n      length: 70,\n      type: t('characters')\n    }))(Yup.string()),\n    city: flow(maxLength({\n      t,\n      length: 40,\n      type: t('characters')\n    }), required({\n      t\n    }))(Yup.string()),\n    state: required({\n      t\n    })(Yup.string()),\n    country: flow(maxLength({\n      t,\n      length: 40,\n      type: t('characters')\n    }), required({\n      t\n    }))(Yup.string()),\n    phone: phone({\n      t\n    })(Yup.string()),\n    email: flow(email({\n      t\n    }), required({\n      t\n    }))(Yup.string())\n  });\n\n  return Yup.object().shape({\n    mainData: Yup.object().shape({\n      parentCompanyCode: Yup.string(),\n      parentCompanyName: Yup.string(),\n      cnpj: cpfCnpj({\n        t\n      })(Yup.string()),\n      socialReason: Yup.string(),\n      branch: Yup.string(),\n      commercialPhone: flow(phone({\n        t\n      }), required({\n        t\n      }))(Yup.string()),\n      cellPhone: phone({\n        t\n      })(Yup.string()),\n      logisticsInformation: flow(maxLength({\n        t,\n        length: 40,\n        type: t('characters')\n      }))(Yup.string()),\n      branches: Yup.string(),\n      regimeLetter: flow(maxLength({\n        t,\n        length: 40,\n        type: t('characters')\n      }))(Yup.string()),\n      creditSituation: flow(maxLength({\n        t,\n        length: 40,\n        type: t('characters')\n      }))(Yup.string()),\n      daysWithoutBilling: Yup.lazy(value => typeof value === 'number' ? Yup.number() : Yup.string()),\n      customerRanking: Yup.string(),\n      status: Yup.bool()\n    }),\n    deliveryAddress: addressSchema(),\n    billingAddress: addressSchema()\n  });\n});","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/core/forms/schemas/customer/customer.schema.js"],"names":["Yup","flow","cep","cpfCnpj","email","maxLength","number","phone","required","addressInitialValues","zipCode","publicPlace","district","complement","city","state","country","INITIAL_VALUES","mainData","parentCompanyCode","parentCompanyName","cnpj","companyName","branch","commercialPhone","cellPhone","logisticsInformation","creditAtatus","branches","regimeLetter","creditSituation","daysWithoutBilling","customerRanking","status","deliveryAddress","billingAddress","t","addressSchema","object","shape","string","length","type","socialReason","lazy","value","bool"],"mappings":"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","sourcesContent":["import * as Yup from 'yup'\n\nimport flow from 'lodash/fp/flow'\n\nimport cep from '@britania-crm/forms/validators/cep.validator'\nimport cpfCnpj from '@britania-crm/forms/validators/cpfCnpj.validator'\nimport email from '@britania-crm/forms/validators/email.validator'\nimport maxLength from '@britania-crm/forms/validators/maxLength.validator'\nimport number from '@britania-crm/forms/validators/number.validator'\nimport phone from '@britania-crm/forms/validators/phone.validator'\nimport required from '@britania-crm/forms/validators/required.validator'\n\nconst addressInitialValues = {\n  zipCode: '',\n  publicPlace: '',\n  number: '',\n  district: '',\n  complement: '',\n  city: '',\n  state: '',\n  country: 'Brasil',\n  phone: '',\n  email: ''\n}\n\nexport const INITIAL_VALUES = {\n  mainData: {\n    parentCompanyCode: '',\n    parentCompanyName: '',\n    cnpj: '',\n    companyName: '',\n    branch: '',\n    commercialPhone: '',\n    cellPhone: '',\n    logisticsInformation: '',\n    creditAtatus: '',\n    branches: '',\n    regimeLetter: '',\n    creditSituation: '',\n    daysWithoutBilling: '',\n    customerRanking: '',\n    status: true\n  },\n  deliveryAddress: addressInitialValues,\n  billingAddress: addressInitialValues\n}\n\nexport default ({ t }) => {\n  const addressSchema = () => Yup.object().shape({\n    zipCode: cep({ t })(Yup.string()),\n    publicPlace: flow(\n      maxLength({\n        t,\n        length: 70,\n        type: t('characters')\n      }),\n      required({ t })\n    )(Yup.string()),\n    number: flow(\n      number({ t }),\n      required({ t }),\n      maxLength({\n        t,\n        length: 70,\n        type: t('characters')\n      })\n    )(Yup.string()),\n    district: flow(\n      maxLength({\n        t,\n        length: 40,\n        type: t('characters')\n      }),\n      required({ t })\n    )(Yup.string()),\n    complement: flow(\n      maxLength({\n        t,\n        length: 70,\n        type: t('characters')\n      })\n    )(Yup.string()),\n    city: flow(\n      maxLength({\n        t,\n        length: 40,\n        type: t('characters')\n      }),\n      required({ t })\n    )(Yup.string()),\n    state: required({ t })(Yup.string()),\n    country: flow(\n      maxLength({\n        t,\n        length: 40,\n        type: t('characters')\n      }),\n      required({ t })\n    )(Yup.string()),\n    phone: phone({ t })(Yup.string()),\n    email: flow(\n      email({ t }),\n      required({ t })\n    )(Yup.string())\n  })\n\n  return Yup.object().shape({\n    mainData: Yup.object().shape({\n      parentCompanyCode: Yup.string(),\n      parentCompanyName: Yup.string(),\n      cnpj: cpfCnpj({ t })(Yup.string()),\n      socialReason: Yup.string(),\n      branch: Yup.string(),\n      commercialPhone: flow(\n        phone({ t }),\n        required({ t })\n      )(Yup.string()),\n      cellPhone: phone({ t })(Yup.string()),\n      logisticsInformation: flow(\n        maxLength({\n          t,\n          length: 40,\n          type: t('characters')\n        })\n      )(Yup.string()),\n      branches: Yup.string(),\n      regimeLetter: flow(\n        maxLength({\n          t,\n          length: 40,\n          type: t('characters')\n        })\n      )(Yup.string()),\n      creditSituation: flow(\n        maxLength({\n          t,\n          length: 40,\n          type: t('characters')\n        })\n      )(Yup.string()),\n      daysWithoutBilling: (Yup.lazy((value) => typeof value === 'number' ? Yup.number() : Yup.string())),\n      customerRanking: Yup.string(),\n      status: Yup.bool()\n    }),\n    deliveryAddress: addressSchema(),\n    billingAddress: addressSchema()\n  })\n}\n"]},"metadata":{},"sourceType":"module"}