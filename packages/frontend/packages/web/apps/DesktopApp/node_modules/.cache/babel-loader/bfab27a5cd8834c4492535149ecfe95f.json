{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/profiles/modals/MicroViewingModal/MicroViewingModal.js\";\nimport React, { useState, useCallback, useMemo, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport filter from 'lodash/filter';\nimport find from 'lodash/find';\nimport map from 'lodash/map';\nimport size from 'lodash/size';\nimport Grid from '@material-ui/core/Grid';\nimport I18n, { useT } from '@britania-crm/i18n';\nimport { fields as fieldsCrmRoutes } from '@britania-crm/services/apis/crmApi/resources/routes';\nimport useCrmApi from '@britania-crm/services/hooks/useCrmApi';\nimport Button from '@britania-crm/web-components/Button';\nimport InputSelect from '@britania-crm/web-components/InputSelect';\nimport Modal from '@britania-crm/web-components/Modal';\nimport TransferList from '@britania-crm/web-components/TransferList';\nimport useStyles from '../styles';\n\nconst MicroViewingModal = ({\n  id,\n  open,\n  handleClose,\n  accessesSelected,\n  fieldSelected,\n  // TODO  vamos utilizar para saber quem jÃ¡ foi selecionado no editar\n  microViewList,\n  isEdit,\n  onSave\n}) => {\n  const t = useT();\n  const classes = useStyles();\n  const [selectedMenuId, setSelectedMenuId] = useState();\n  const [fieldsSelectedInList, setFieldsSelectedInList] = useState([]);\n  const {\n    data,\n    loading\n  } = useCrmApi(selectedMenuId ? [`${fieldsCrmRoutes.get}/${Number(selectedMenuId)}`, selectedMenuId] : null);\n  const filterOptions = useMemo(() => {\n    const existingAccess = map(microViewList, ({\n      access\n    }) => access);\n    return filter(accessesSelected, item => !find(existingAccess, ({\n      id\n    }) => id === item.id));\n  }, [microViewList, accessesSelected]);\n  const filterOptionsField = useMemo(() => filter(data, item => find(fieldSelected, ({\n    id\n  }) => id === item.id)), [data, fieldSelected]);\n  const handleSaveMicroView = useCallback(() => {\n    let microViewObject = {};\n    const selectedMenuObject = find(accessesSelected, access => access.id === selectedMenuId);\n\n    const formatForHiddenFieldObject = field => ({\n      id: field.id,\n      name: field.name\n    });\n\n    const fieldsFormattedForHiddenFields = fieldsSelectedInList.map(field => formatForHiddenFieldObject(field));\n    const existingMicroView = find(microViewList, microView => microView.access.name === selectedMenuObject.name);\n\n    if (existingMicroView) {\n      microViewObject = { ...existingMicroView,\n        hiddenFields: fieldsFormattedForHiddenFields\n      };\n    } else {\n      microViewObject = {\n        access: selectedMenuObject,\n        hiddenFields: fieldsFormattedForHiddenFields\n      };\n    }\n\n    onSave(microViewObject);\n    handleClose();\n  }, [fieldsSelectedInList, handleClose, microViewList, onSave, accessesSelected, selectedMenuId]);\n  useEffect(() => {\n    if (size(filterOptions) > 0) {\n      setSelectedMenuId(filterOptions[0].id);\n    }\n  }, [filterOptions]);\n  useEffect(() => {\n    setFieldsSelectedInList([]);\n  }, [selectedMenuId]);\n  useEffect(() => {\n    if (isEdit) {\n      setFieldsSelectedInList(filterOptionsField);\n    }\n  }, [filterOptionsField, isEdit]);\n  return /*#__PURE__*/React.createElement(Modal, {\n    id: id,\n    open: open,\n    title: t('micro viewing'),\n    maxWidth: \"md\",\n    fullWidth: true,\n    loading: loading,\n    FooterComponent: () => /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      alignItems: \"center\",\n      justify: \"center\",\n      spacing: 2,\n      className: classes.buttons,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(I18n, {\n      as: Button,\n      color: \"secondary\",\n      onClick: handleClose,\n      size: \"small\",\n      variant: \"outlined\",\n      width: \"200px\",\n      disabled: loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }\n    }, \"cancel\"), /*#__PURE__*/React.createElement(I18n, {\n      as: Button,\n      color: \"secondary\",\n      onClick: handleSaveMicroView,\n      size: \"small\",\n      variant: \"contained\",\n      width: \"200px\",\n      disabled: loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }\n    }, \"save\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 7,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(InputSelect, {\n    detached: true,\n    name: \"menuToViewMicro\",\n    label: t('micro view menu'),\n    onChange: ({\n      target\n    }) => setSelectedMenuId(Number(target.value)),\n    value: selectedMenuId,\n    options: filterOptions,\n    disabled: isEdit,\n    required: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    direction: \"column\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(TransferList, {\n    detached: true,\n    options: data,\n    value: fieldsSelectedInList,\n    onChange: setFieldsSelectedInList,\n    title: t('field', {\n      howMany: 2\n    }),\n    loading: loading,\n    onFilterChange: false,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  })));\n};\n\nMicroViewingModal.propTypes = {\n  handleClose: PropTypes.func.isRequired,\n  id: PropTypes.string.isRequired,\n  open: PropTypes.bool.isRequired,\n  accessesSelected: PropTypes.array,\n  fieldSelected: PropTypes.array,\n  microViewList: PropTypes.array,\n  isEdit: PropTypes.bool,\n  onSave: PropTypes.func\n};\nMicroViewingModal.defaultProps = {\n  accessesSelected: [],\n  fieldSelected: [],\n  microViewList: [],\n  isEdit: false,\n\n  onSave() {}\n\n};\nexport default MicroViewingModal;","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/profiles/modals/MicroViewingModal/MicroViewingModal.js"],"names":["React","useState","useCallback","useMemo","useEffect","PropTypes","filter","find","map","size","Grid","I18n","useT","fields","fieldsCrmRoutes","useCrmApi","Button","InputSelect","Modal","TransferList","useStyles","MicroViewingModal","id","open","handleClose","accessesSelected","fieldSelected","microViewList","isEdit","onSave","t","classes","selectedMenuId","setSelectedMenuId","fieldsSelectedInList","setFieldsSelectedInList","data","loading","get","Number","filterOptions","existingAccess","access","item","filterOptionsField","handleSaveMicroView","microViewObject","selectedMenuObject","formatForHiddenFieldObject","field","name","fieldsFormattedForHiddenFields","existingMicroView","microView","hiddenFields","buttons","target","value","howMany","propTypes","func","isRequired","string","bool","array","defaultProps"],"mappings":"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","sourcesContent":["\nimport React, {\n  useState,\n  useCallback,\n  useMemo,\n  useEffect\n} from 'react'\n\nimport PropTypes from 'prop-types'\n\nimport filter from 'lodash/filter'\nimport find from 'lodash/find'\nimport map from 'lodash/map'\nimport size from 'lodash/size'\n\nimport Grid from '@material-ui/core/Grid'\n\nimport I18n, { useT } from '@britania-crm/i18n'\nimport { fields as fieldsCrmRoutes } from '@britania-crm/services/apis/crmApi/resources/routes'\nimport useCrmApi from '@britania-crm/services/hooks/useCrmApi'\nimport Button from '@britania-crm/web-components/Button'\nimport InputSelect from '@britania-crm/web-components/InputSelect'\nimport Modal from '@britania-crm/web-components/Modal'\nimport TransferList from '@britania-crm/web-components/TransferList'\n\nimport useStyles from '../styles'\n\nconst MicroViewingModal = ({\n  id,\n  open,\n  handleClose,\n  accessesSelected,\n  fieldSelected, // TODO  vamos utilizar para saber quem jÃ¡ foi selecionado no editar\n  microViewList,\n  isEdit,\n  onSave\n}) => {\n  const t = useT()\n  const classes = useStyles()\n\n  const [selectedMenuId, setSelectedMenuId] = useState()\n  const [fieldsSelectedInList, setFieldsSelectedInList] = useState([])\n\n  const {\n    data,\n    loading\n  } = useCrmApi(selectedMenuId ? [`${ fieldsCrmRoutes.get }/${ Number(selectedMenuId) }`, selectedMenuId] : null)\n\n  const filterOptions = useMemo(() => {\n    const existingAccess = map(microViewList, ({ access }) => access)\n    return filter(accessesSelected, (item) => !find(existingAccess, ({ id }) => id === item.id))\n  }, [microViewList, accessesSelected])\n\n  const filterOptionsField = useMemo(() =>\n    filter(data, (item) => find(fieldSelected, ({ id }) => id === item.id))\n  , [data, fieldSelected])\n\n  const handleSaveMicroView = useCallback(() => {\n    let microViewObject = {}\n    const selectedMenuObject = find(accessesSelected, (access) => access.id === selectedMenuId)\n\n    const formatForHiddenFieldObject = (field) => ({\n      id: field.id,\n      name: field.name\n    })\n    const fieldsFormattedForHiddenFields = fieldsSelectedInList.map((field) => formatForHiddenFieldObject(field))\n    const existingMicroView = find(microViewList, (microView) => microView.access.name === selectedMenuObject.name)\n\n    if (existingMicroView) {\n      microViewObject = {\n        ...existingMicroView,\n        hiddenFields: fieldsFormattedForHiddenFields\n      }\n    } else {\n      microViewObject = {\n        access: selectedMenuObject,\n        hiddenFields: fieldsFormattedForHiddenFields\n      }\n    }\n    onSave(microViewObject)\n    handleClose()\n  }, [fieldsSelectedInList, handleClose, microViewList, onSave, accessesSelected, selectedMenuId])\n\n  useEffect(() => {\n    if (size(filterOptions) > 0) {\n      setSelectedMenuId(filterOptions[0].id)\n    }\n  }, [filterOptions])\n\n  useEffect(() => {\n    setFieldsSelectedInList([])\n  }, [selectedMenuId])\n\n  useEffect(() => {\n    if (isEdit) {\n      setFieldsSelectedInList(filterOptionsField)\n    }\n  }, [filterOptionsField, isEdit])\n\n  return (\n    <Modal\n      id={ id }\n      open={ open }\n      title={ t('micro viewing') }\n      maxWidth=\"md\"\n      fullWidth\n      loading={ loading }\n      FooterComponent={ () => (\n        <Grid container alignItems=\"center\" justify=\"center\" spacing={ 2 } className={ classes.buttons }>\n          <I18n as={ Button }\n            color=\"secondary\"\n            onClick={ handleClose }\n            size=\"small\"\n            variant=\"outlined\"\n            width=\"200px\"\n            disabled={ loading }\n          >\n            cancel\n          </I18n>\n          <I18n as={ Button }\n            color=\"secondary\"\n            onClick={ handleSaveMicroView }\n            size=\"small\"\n            variant=\"contained\"\n            width=\"200px\"\n            disabled={ loading }\n          >\n            save\n          </I18n>\n        </Grid>\n      ) }\n    >\n      <Grid item xs={ 7 }>\n        <InputSelect\n          detached\n          name=\"menuToViewMicro\"\n          label={ t('micro view menu') }\n          onChange={ ({ target }) => setSelectedMenuId(Number(target.value)) }\n          value={ selectedMenuId }\n          options={ filterOptions }\n          disabled={ isEdit }\n          required\n        />\n      </Grid>\n      <Grid container direction=\"column\">\n        <TransferList\n          detached\n          options={ data }\n          value={ fieldsSelectedInList }\n          onChange={ setFieldsSelectedInList }\n          title={ t('field', { howMany: 2 }) }\n          loading= { loading }\n          onFilterChange={ false }\n        />\n      </Grid>\n    </Modal>\n  )\n}\n\nMicroViewingModal.propTypes = {\n  handleClose: PropTypes.func.isRequired,\n  id: PropTypes.string.isRequired,\n  open: PropTypes.bool.isRequired,\n  accessesSelected: PropTypes.array,\n  fieldSelected: PropTypes.array,\n  microViewList: PropTypes.array,\n  isEdit: PropTypes.bool,\n  onSave: PropTypes.func\n}\n\nMicroViewingModal.defaultProps = {\n  accessesSelected: [],\n  fieldSelected: [],\n  microViewList: [],\n  isEdit: false,\n  onSave () {}\n}\n\nexport default MicroViewingModal\n"]},"metadata":{},"sourceType":"module"}