{"ast":null,"code":"import { put, call, takeLatest } from 'redux-saga/effects';\nimport { MSG004 } from '@britania-crm/constants/feedbackMessages.constants';\nimport { postUser, putUser, deleteUser, attachProfiles } from '@britania-crm/services/apis/crmApi/resources/user.service';\nimport { AppActions } from '../app/app.actions';\nimport { UsersActions, UsersTypes } from './users.actions';\n\nfunction* saveUser({\n  user,\n  onSuccess = () => {},\n  onError = () => {}\n}) {\n  try {\n    const {\n      id,\n      ...restUser\n    } = user;\n    let response;\n\n    if (!id) {\n      // createMode\n      response = yield call(postUser, restUser);\n    } else {\n      // edit mode\n      response = yield call(putUser, id, restUser);\n    }\n\n    yield call(onSuccess, response);\n  } catch (error) {\n    yield put(UsersActions.usersError(error));\n    yield call(onError, error);\n  }\n}\n\nfunction* removeUser({\n  userId,\n  onSuccess = () => {},\n  onError = () => {}\n}) {\n  try {\n    yield call(deleteUser, userId);\n    yield call(onSuccess);\n  } catch (error) {\n    yield put(UsersActions.usersError(error));\n    yield call(onError, error);\n  }\n}\n\nfunction* doAttachProfiles({\n  userId,\n  profilesId,\n  onSuccess = () => {},\n  onError = () => {}\n}) {\n  try {\n    yield call(attachProfiles, userId, {\n      profiles: profilesId\n    });\n    yield call(onSuccess);\n    yield put(AppActions.addAlert({\n      type: 'success',\n      message: MSG004\n    }));\n  } catch (error) {\n    yield put(UsersActions.usersError(error));\n    yield put(AppActions.addAlert({\n      type: 'error',\n      message: 'Falha em vincular perfis ao usuário.'\n    }));\n    yield call(onError, error);\n  }\n}\n\nexport default [takeLatest(UsersTypes.SAVE_USER, saveUser), takeLatest(UsersTypes.REMOVE_USER, removeUser), takeLatest(UsersTypes.ATTACH_PROFILES, doAttachProfiles)];","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/core/stores/users/users.sagas.js"],"names":["put","call","takeLatest","MSG004","postUser","putUser","deleteUser","attachProfiles","AppActions","UsersActions","UsersTypes","saveUser","user","onSuccess","onError","id","restUser","response","error","usersError","removeUser","userId","doAttachProfiles","profilesId","profiles","addAlert","type","message","SAVE_USER","REMOVE_USER","ATTACH_PROFILES"],"mappings":"AAAA,SACEA,GADF,EAEEC,IAFF,EAGEC,UAHF,QAIO,oBAJP;AAMA,SAASC,MAAT,QAAuB,oDAAvB;AACA,SACEC,QADF,EAEEC,OAFF,EAGEC,UAHF,EAIEC,cAJF,QAKO,2DALP;AAOA,SAASC,UAAT,QAA2B,oBAA3B;AACA,SACEC,YADF,EAEEC,UAFF,QAGO,iBAHP;;AAKA,UAAUC,QAAV,CAAoB;AAClBC,EAAAA,IADkB;AACZC,EAAAA,SAAS,GAAG,MAAM,CAAE,CADR;AACUC,EAAAA,OAAO,GAAG,MAAM,CAAE;AAD5B,CAApB,EAEG;AACD,MAAI;AACF,UAAM;AAAEC,MAAAA,EAAF;AAAM,SAAGC;AAAT,QAAsBJ,IAA5B;AAEA,QAAIK,QAAJ;;AAEA,QAAI,CAACF,EAAL,EAAS;AACP;AACAE,MAAAA,QAAQ,GAAG,MAAMhB,IAAI,CAACG,QAAD,EAAWY,QAAX,CAArB;AACD,KAHD,MAGO;AACL;AACAC,MAAAA,QAAQ,GAAG,MAAMhB,IAAI,CAACI,OAAD,EAAUU,EAAV,EAAcC,QAAd,CAArB;AACD;;AAED,UAAMf,IAAI,CAACY,SAAD,EAAYI,QAAZ,CAAV;AACD,GAdD,CAcE,OAAOC,KAAP,EAAc;AACd,UAAMlB,GAAG,CAACS,YAAY,CAACU,UAAb,CAAwBD,KAAxB,CAAD,CAAT;AACA,UAAMjB,IAAI,CAACa,OAAD,EAAUI,KAAV,CAAV;AACD;AACF;;AAED,UAAUE,UAAV,CAAsB;AACpBC,EAAAA,MADoB;AACZR,EAAAA,SAAS,GAAG,MAAM,CAAE,CADR;AACUC,EAAAA,OAAO,GAAG,MAAM,CAAE;AAD5B,CAAtB,EAEG;AACD,MAAI;AACF,UAAMb,IAAI,CAACK,UAAD,EAAae,MAAb,CAAV;AACA,UAAMpB,IAAI,CAACY,SAAD,CAAV;AACD,GAHD,CAGE,OAAOK,KAAP,EAAc;AACd,UAAMlB,GAAG,CAACS,YAAY,CAACU,UAAb,CAAwBD,KAAxB,CAAD,CAAT;AACA,UAAMjB,IAAI,CAACa,OAAD,EAAUI,KAAV,CAAV;AACD;AACF;;AAED,UAAUI,gBAAV,CAA4B;AAC1BD,EAAAA,MAD0B;AAClBE,EAAAA,UADkB;AACNV,EAAAA,SAAS,GAAG,MAAM,CAAE,CADd;AACgBC,EAAAA,OAAO,GAAG,MAAM,CAAE;AADlC,CAA5B,EAEG;AACD,MAAI;AACF,UAAMb,IAAI,CAACM,cAAD,EAAiBc,MAAjB,EAAyB;AAAEG,MAAAA,QAAQ,EAAED;AAAZ,KAAzB,CAAV;AACA,UAAMtB,IAAI,CAACY,SAAD,CAAV;AACA,UAAMb,GAAG,CAACQ,UAAU,CAACiB,QAAX,CAAoB;AAAEC,MAAAA,IAAI,EAAE,SAAR;AAAmBC,MAAAA,OAAO,EAAExB;AAA5B,KAApB,CAAD,CAAT;AACD,GAJD,CAIE,OAAOe,KAAP,EAAc;AACd,UAAMlB,GAAG,CAACS,YAAY,CAACU,UAAb,CAAwBD,KAAxB,CAAD,CAAT;AACA,UAAMlB,GAAG,CAACQ,UAAU,CAACiB,QAAX,CAAoB;AAAEC,MAAAA,IAAI,EAAE,OAAR;AAAiBC,MAAAA,OAAO,EAAE;AAA1B,KAApB,CAAD,CAAT;AACA,UAAM1B,IAAI,CAACa,OAAD,EAAUI,KAAV,CAAV;AACD;AACF;;AAED,eAAe,CACbhB,UAAU,CAACQ,UAAU,CAACkB,SAAZ,EAAuBjB,QAAvB,CADG,EAEbT,UAAU,CAACQ,UAAU,CAACmB,WAAZ,EAAyBT,UAAzB,CAFG,EAGblB,UAAU,CAACQ,UAAU,CAACoB,eAAZ,EAA6BR,gBAA7B,CAHG,CAAf","sourcesContent":["import {\n  put,\n  call,\n  takeLatest\n} from 'redux-saga/effects'\n\nimport { MSG004 } from '@britania-crm/constants/feedbackMessages.constants'\nimport {\n  postUser,\n  putUser,\n  deleteUser,\n  attachProfiles\n} from '@britania-crm/services/apis/crmApi/resources/user.service'\n\nimport { AppActions } from '../app/app.actions'\nimport {\n  UsersActions,\n  UsersTypes\n} from './users.actions'\n\nfunction* saveUser ({\n  user, onSuccess = () => {}, onError = () => {}\n}) {\n  try {\n    const { id, ...restUser } = user\n\n    let response\n\n    if (!id) {\n      // createMode\n      response = yield call(postUser, restUser)\n    } else {\n      // edit mode\n      response = yield call(putUser, id, restUser)\n    }\n\n    yield call(onSuccess, response)\n  } catch (error) {\n    yield put(UsersActions.usersError(error))\n    yield call(onError, error)\n  }\n}\n\nfunction* removeUser ({\n  userId, onSuccess = () => {}, onError = () => {}\n}) {\n  try {\n    yield call(deleteUser, userId)\n    yield call(onSuccess)\n  } catch (error) {\n    yield put(UsersActions.usersError(error))\n    yield call(onError, error)\n  }\n}\n\nfunction* doAttachProfiles ({\n  userId, profilesId, onSuccess = () => {}, onError = () => {}\n}) {\n  try {\n    yield call(attachProfiles, userId, { profiles: profilesId })\n    yield call(onSuccess)\n    yield put(AppActions.addAlert({ type: 'success', message: MSG004 }))\n  } catch (error) {\n    yield put(UsersActions.usersError(error))\n    yield put(AppActions.addAlert({ type: 'error', message: 'Falha em vincular perfis ao usuário.' }))\n    yield call(onError, error)\n  }\n}\n\nexport default [\n  takeLatest(UsersTypes.SAVE_USER, saveUser),\n  takeLatest(UsersTypes.REMOVE_USER, removeUser),\n  takeLatest(UsersTypes.ATTACH_PROFILES, doAttachProfiles)\n]\n"]},"metadata":{},"sourceType":"module"}