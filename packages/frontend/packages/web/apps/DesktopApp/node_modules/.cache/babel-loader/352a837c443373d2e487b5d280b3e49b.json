{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/messageboards/modals/CreateMessageboardModal/CreateMessageboardModal.js\";\nimport React, { useState, useCallback, useEffect, useLayoutEffect, useMemo, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport first from 'lodash/first';\nimport isEmpty from 'lodash/isEmpty';\nimport isEqual from 'lodash/isEqual';\nimport map from 'lodash/map';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Chip from '@material-ui/core/Chip';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport DeleteIcon from '@material-ui/icons/DeleteOutline';\nimport ImageOutlined from '@material-ui/icons/ImageOutlined';\nimport { useDialog } from '@britania-crm/dialog';\nimport messageSchema, { INITIAL_VALUES } from '@britania-crm/forms/schemas/messageboard/message.schema';\nimport I18n, { useT } from '@britania-crm/i18n';\nimport { AppActions } from '@britania-crm/stores/app';\nimport { MessageActions } from '@britania-crm/stores/message';\nimport { getOneMessage, getLoading } from '@britania-crm/stores/message/message.selectors';\nimport { dateBackFormat, dateTimeBackFormat } from '@britania-crm/utils/date';\nimport Button from '@britania-crm/web-components/Button';\nimport Checkbox from '@britania-crm/web-components/Checkbox';\nimport Form from '@britania-crm/web-components/Form';\nimport InputDate from '@britania-crm/web-components/InputDate';\nimport InputHidden from '@britania-crm/web-components/InputHidden';\nimport InputText from '@britania-crm/web-components/InputText';\nimport Modal from '@britania-crm/web-components/Modal';\nimport RichTextEditor from '@britania-crm/web-components/RichTextEditor';\nimport ProfileLinkModal from '../ProfileLinkModal';\nimport useStyles from './styles';\n\nconst CreateMessageboardModal = ({\n  id,\n  handleClose,\n  open,\n  messageId,\n  onSave // onSaveCreate,\n  // onSaveEdit,\n\n}) => {\n  const classes = useStyles();\n  const t = useT();\n  const dispatch = useCallback(useDispatch(), []);\n  const {\n    createDialog\n  } = useDialog();\n  const formRef = useRef(null);\n  const [mounted, setMounted] = useState(false);\n  const [profilesSelected, setProfilesSelected] = useState([]);\n  const [files, setFiles] = useState([]);\n  const message = useSelector(getOneMessage);\n  const loading = useSelector(getLoading);\n  const filterNameProfileSelected = useMemo(() => {\n    const profiles = map(profilesSelected, ({\n      name\n    }) => name);\n    return profiles.join(', ');\n  }, [profilesSelected]);\n  const today = useMemo(() => moment().format(dateBackFormat), []);\n  const handleOpenProfileLinkModal = useCallback(() => {\n    createDialog({\n      id: 'profileLinkModal',\n      Component: ProfileLinkModal,\n      props: {\n        initialProfiles: formRef.current.getFieldValue('profiles'),\n\n        onSave(profiles) {\n          formRef.current.setFieldValue('profiles', profiles);\n        }\n\n      }\n    });\n  }, [createDialog]);\n  const handleClean = useCallback(() => {\n    formRef.current.reset();\n    dispatch(MessageActions.cleanMessage());\n  }, [dispatch]);\n  const handleGetOneMessage = useCallback(() => {\n    if (messageId) {\n      dispatch(MessageActions.getOneMessage(messageId));\n    }\n  }, [dispatch, messageId]);\n  const fileChip = useMemo(() => {\n    var _file$file;\n\n    const file = files === null || files === void 0 ? void 0 : files[0];\n    return file && /*#__PURE__*/React.createElement(Chip, {\n      label: file.name || (file === null || file === void 0 ? void 0 : (_file$file = file.file) === null || _file$file === void 0 ? void 0 : _file$file.filename),\n      variant: \"outlined\",\n      deleteIcon: /*#__PURE__*/React.createElement(DeleteIcon, {\n        className: classes.iconImage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 24\n        }\n      }),\n      onDelete: () => setFiles([]),\n      icon: /*#__PURE__*/React.createElement(ImageOutlined, {\n        className: classes.iconImage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 18\n        }\n      }),\n      classes: {\n        root: classes.chip,\n        label: classes.labelChip\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }\n    });\n  }, [classes.chip, classes.iconImage, classes.labelChip, files]);\n  const insertFile = useCallback(newFiles => {\n    if (!isEmpty(files)) {\n      dispatch(AppActions.addAlert({\n        type: 'error',\n        message: 'Ã‰ permitido somente um anexo por recado.'\n      }));\n    } else {\n      setFiles(newFiles);\n    }\n  }, [dispatch, files]);\n  const handleSubmit = useCallback(values => {\n    const payload = { ...values,\n      profiles: map(values.profiles, ({\n        id\n      }) => id).join(),\n      homeScreen: values.homeScreen ? '1' : '0',\n      files\n    };\n\n    if (messageId) {\n      if (!isEmpty(message.files) && !isEqual(message.files, files)) {\n        dispatch(MessageActions.deleteMessageAttachment(messageId, message.files));\n      }\n\n      dispatch(MessageActions.updateMessage(messageId, payload, () => {\n        onSave();\n        handleClose();\n      }));\n    } else {\n      dispatch(MessageActions.createMessage(payload, () => {\n        onSave();\n        handleClose();\n      }));\n    }\n  }, [dispatch, files, handleClose, message.files, messageId, onSave]);\n  useLayoutEffect(() => {\n    dispatch(MessageActions.cleanMessage());\n  }, [dispatch]);\n  useEffect(() => {\n    handleGetOneMessage();\n  }, [handleGetOneMessage]);\n  useEffect(() => {\n    if (mounted && !isEmpty(message)) {\n      var _first;\n\n      formRef.current.setData({ ...message,\n        expirationDate: moment(message.expirationDate, dateTimeBackFormat).format(dateBackFormat),\n        homeScreen: message.homeScreen === '1',\n        profiles: ((_first = first(message.messageProfile)) === null || _first === void 0 ? void 0 : _first.profile) || []\n      });\n      setFiles(message.files);\n    } else if (!mounted) {\n      setMounted(true);\n    }\n  }, [message, mounted]);\n  return /*#__PURE__*/React.createElement(Modal, {\n    id: id,\n    open: open,\n    classes: {\n      paperScrollPaper: classes.modal\n    },\n    maxWidth: \"lg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CardContent, {\n    className: classes.card,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    ref: formRef,\n    schemaConstructor: messageSchema,\n    defaultValues: INITIAL_VALUES,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(I18n, {\n    as: Typography,\n    variant: \"h6\",\n    gutterBottom: true,\n    className: classes.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 15\n    }\n  }, messageId ? 'edit message board' : 'new message board')), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    className: classes.items,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputText, {\n    name: \"title\",\n    label: t('message board title'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(I18n, {\n    as: Button,\n    color: \"warning\",\n    variant: \"contained\",\n    onClick: handleOpenProfileLinkModal,\n    className: classes.btn,\n    params: {\n      howMany: 2\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 15\n    }\n  }, \"link profile\"), /*#__PURE__*/React.createElement(InputText, {\n    detached: true,\n    name: \"profiles\",\n    label: t('linked profiles'),\n    value: filterNameProfileSelected,\n    disabled: true,\n    required: true,\n    style: {\n      marginBottom: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(InputHidden, {\n    name: \"profiles\",\n    showError: true,\n    onValueChange: setProfilesSelected,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 243,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    className: classes.row,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(InputDate, {\n    name: \"expirationDate\",\n    label: t('validity'),\n    min: today,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 17\n    }\n  }), /*#__PURE__*/React.createElement(Checkbox, {\n    name: \"homeScreen\",\n    label: t('home screen'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 17\n    }\n  })), /*#__PURE__*/React.createElement(RichTextEditor, {\n    name: \"content\",\n    label: t('message'),\n    getFiles: insertFile,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    className: classes.cardImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 15\n    }\n  }, fileChip))))), /*#__PURE__*/React.createElement(CardActions, {\n    className: classes.buttons,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    className: classes.btnClean,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(I18n, {\n    as: Button,\n    variant: \"text\",\n    color: \"secondary\",\n    onClick: handleClean,\n    disabled: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 11\n    }\n  }, \"clean\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    className: classes.btnsSaveAndCancel,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 289,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(I18n, {\n    as: Button,\n    color: \"secondary\",\n    variant: \"outlined\",\n    disabled: loading,\n    onClick: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 11\n    }\n  }, \"cancel\"), /*#__PURE__*/React.createElement(I18n, {\n    as: Button,\n    color: \"secondary\",\n    variant: \"contained\",\n    onClick: () => formRef.current.submit(),\n    className: classes.btnSave,\n    disabled: loading,\n    isLoading: loading,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 11\n    }\n  }, \"save\"))));\n};\n\nCreateMessageboardModal.propTypes = {\n  id: PropTypes.string.isRequired,\n  handleClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  onSave: PropTypes.func,\n  messageId: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nCreateMessageboardModal.defaultProps = {\n  onSave() {},\n\n  messageId: null\n};\nexport default CreateMessageboardModal;","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/messageboards/modals/CreateMessageboardModal/CreateMessageboardModal.js"],"names":["React","useState","useCallback","useEffect","useLayoutEffect","useMemo","useRef","useSelector","useDispatch","moment","PropTypes","first","isEmpty","isEqual","map","CardActions","CardContent","Chip","Grid","Typography","DeleteIcon","ImageOutlined","useDialog","messageSchema","INITIAL_VALUES","I18n","useT","AppActions","MessageActions","getOneMessage","getLoading","dateBackFormat","dateTimeBackFormat","Button","Checkbox","Form","InputDate","InputHidden","InputText","Modal","RichTextEditor","ProfileLinkModal","useStyles","CreateMessageboardModal","id","handleClose","open","messageId","onSave","classes","t","dispatch","createDialog","formRef","mounted","setMounted","profilesSelected","setProfilesSelected","files","setFiles","message","loading","filterNameProfileSelected","profiles","name","join","today","format","handleOpenProfileLinkModal","Component","props","initialProfiles","current","getFieldValue","setFieldValue","handleClean","reset","cleanMessage","handleGetOneMessage","fileChip","file","filename","iconImage","root","chip","label","labelChip","insertFile","newFiles","addAlert","type","handleSubmit","values","payload","homeScreen","deleteMessageAttachment","updateMessage","createMessage","setData","expirationDate","messageProfile","profile","paperScrollPaper","modal","card","title","items","btn","howMany","marginBottom","row","cardImage","buttons","btnClean","btnsSaveAndCancel","submit","btnSave","propTypes","string","isRequired","func","bool","oneOfType","number","defaultProps"],"mappings":"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","sourcesContent":["import React, {\n  useState,\n  useCallback,\n  useEffect,\n  useLayoutEffect,\n  useMemo,\n  useRef\n} from 'react'\nimport {\n  useSelector,\n  useDispatch\n} from 'react-redux'\n\nimport moment from 'moment'\nimport PropTypes from 'prop-types'\n\nimport first from 'lodash/first'\nimport isEmpty from 'lodash/isEmpty'\nimport isEqual from 'lodash/isEqual'\nimport map from 'lodash/map'\n\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport Chip from '@material-ui/core/Chip'\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\nimport DeleteIcon from '@material-ui/icons/DeleteOutline'\nimport ImageOutlined from '@material-ui/icons/ImageOutlined'\n\nimport { useDialog } from '@britania-crm/dialog'\nimport messageSchema, { INITIAL_VALUES } from '@britania-crm/forms/schemas/messageboard/message.schema'\nimport I18n, { useT } from '@britania-crm/i18n'\nimport { AppActions } from '@britania-crm/stores/app'\nimport { MessageActions } from '@britania-crm/stores/message'\nimport {\n  getOneMessage,\n  getLoading\n} from '@britania-crm/stores/message/message.selectors'\nimport {\n  dateBackFormat,\n  dateTimeBackFormat\n} from '@britania-crm/utils/date'\nimport Button from '@britania-crm/web-components/Button'\nimport Checkbox from '@britania-crm/web-components/Checkbox'\nimport Form from '@britania-crm/web-components/Form'\nimport InputDate from '@britania-crm/web-components/InputDate'\nimport InputHidden from '@britania-crm/web-components/InputHidden'\nimport InputText from '@britania-crm/web-components/InputText'\nimport Modal from '@britania-crm/web-components/Modal'\nimport RichTextEditor from '@britania-crm/web-components/RichTextEditor'\n\nimport ProfileLinkModal from '../ProfileLinkModal'\nimport useStyles from './styles'\n\nconst CreateMessageboardModal = ({\n  id,\n  handleClose,\n  open,\n  messageId,\n  onSave\n  // onSaveCreate,\n  // onSaveEdit,\n}) => {\n  const classes = useStyles()\n  const t = useT()\n  const dispatch = useCallback(useDispatch(), [])\n  const { createDialog } = useDialog()\n\n  const formRef = useRef(null)\n\n  const [mounted, setMounted] = useState(false)\n  const [profilesSelected, setProfilesSelected] = useState([])\n  const [files, setFiles] = useState([])\n\n  const message = useSelector(getOneMessage)\n  const loading = useSelector(getLoading)\n\n  const filterNameProfileSelected = useMemo(() => {\n    const profiles = map(profilesSelected, ({ name }) => name)\n    return profiles.join(', ')\n  }, [profilesSelected])\n\n  const today = useMemo(() => moment().format(dateBackFormat), [])\n\n  const handleOpenProfileLinkModal = useCallback(() => {\n    createDialog({\n      id: 'profileLinkModal',\n      Component: ProfileLinkModal,\n      props: {\n        initialProfiles: formRef.current.getFieldValue('profiles'),\n        onSave (profiles) {\n          formRef.current.setFieldValue('profiles', profiles)\n        }\n      }\n    })\n  }, [createDialog])\n\n  const handleClean = useCallback(() => {\n    formRef.current.reset()\n    dispatch(MessageActions.cleanMessage())\n  }, [dispatch])\n\n  const handleGetOneMessage = useCallback(() => {\n    if (messageId) {\n      dispatch(MessageActions.getOneMessage(messageId))\n    }\n  }, [dispatch, messageId])\n\n  const fileChip = useMemo(\n    () => {\n      const file = files?.[0]\n      return file && (\n        <Chip\n          label={ file.name || file?.file?.filename }\n          variant=\"outlined\"\n          deleteIcon={ <DeleteIcon className={ classes.iconImage } /> }\n          onDelete={ () => setFiles([]) }\n          icon={ <ImageOutlined className={ classes.iconImage } /> }\n          classes={ { root: classes.chip, label: classes.labelChip } }\n        />\n      )\n    },\n    [classes.chip, classes.iconImage, classes.labelChip, files]\n  )\n\n  const insertFile = useCallback((newFiles) => {\n    if (!isEmpty(files)) {\n      dispatch(AppActions.addAlert({ type: 'error', message: 'Ã‰ permitido somente um anexo por recado.' }))\n    } else {\n      setFiles(newFiles)\n    }\n  }, [dispatch, files])\n\n  const handleSubmit = useCallback(\n    (values) => {\n      const payload = {\n        ...values,\n        profiles: map(values.profiles, ({ id }) => id).join(),\n        homeScreen: values.homeScreen ? '1' : '0',\n        files\n      }\n\n      if (messageId) {\n        if (!isEmpty(message.files) && !isEqual(message.files, files)) {\n          dispatch(MessageActions.deleteMessageAttachment(\n            messageId,\n            message.files\n          ))\n        }\n        dispatch(MessageActions.updateMessage(\n          messageId,\n          payload,\n          () => {\n            onSave()\n            handleClose()\n          }\n        ))\n      } else {\n        dispatch(MessageActions.createMessage(\n          payload,\n          () => {\n            onSave()\n            handleClose()\n          }\n        ))\n      }\n    },\n    [dispatch, files, handleClose, message.files, messageId, onSave]\n  )\n\n  useLayoutEffect(\n    () => {\n      dispatch(MessageActions.cleanMessage())\n    },\n    [dispatch]\n  )\n\n  useEffect(() => {\n    handleGetOneMessage()\n  }, [handleGetOneMessage])\n\n  useEffect(() => {\n    if (mounted && !isEmpty(message)) {\n      formRef.current.setData({\n        ...message,\n        expirationDate: moment(message.expirationDate, dateTimeBackFormat).format(dateBackFormat),\n        homeScreen: message.homeScreen === '1',\n        profiles: first(message.messageProfile)?.profile || []\n      })\n      setFiles(message.files)\n    } else if (!mounted) {\n      setMounted(true)\n    }\n  }, [message, mounted])\n\n  return (\n    <Modal\n      id={ id }\n      open={ open }\n      classes={ { paperScrollPaper: classes.modal } }\n      maxWidth=\"lg\"\n    >\n      <CardContent className={ classes.card }>\n        <Form\n          ref={ formRef }\n          schemaConstructor={ messageSchema }\n          defaultValues={ INITIAL_VALUES }\n          onSubmit={ handleSubmit }\n        >\n          <Grid container spacing={ 1 }>\n\n            <Grid item xs={ 12 }>\n              <I18n as={ Typography } variant=\"h6\" gutterBottom className={ classes.title } >\n                { messageId ? 'edit message board' : 'new message board' }\n              </I18n>\n            </Grid>\n\n            <Grid item xs={ 12 } className={ classes.items }>\n              <InputText\n                name=\"title\"\n                label={ t('message board title') }\n              />\n\n              <I18n as={ Button }\n                color=\"warning\"\n                variant=\"contained\"\n                onClick={ handleOpenProfileLinkModal }\n                className={ classes.btn }\n                params={ { howMany: 2 } }\n              >\n                link profile\n              </I18n>\n\n              <InputText\n                detached\n                name=\"profiles\"\n                label={ t('linked profiles') }\n                value={ filterNameProfileSelected }\n                disabled\n                required\n                style={ { marginBottom: 0 } }\n              />\n              <InputHidden\n                name=\"profiles\"\n                showError\n                onValueChange={ setProfilesSelected }\n              />\n\n              <Grid item xs={ 12 } className={ classes.row }>\n                <InputDate\n                  name=\"expirationDate\"\n                  label={ t('validity') }\n                  min={ today }\n                />\n\n                <Checkbox\n                  name=\"homeScreen\"\n                  label={ t('home screen') }\n                />\n              </Grid>\n\n              <RichTextEditor\n                name=\"content\"\n                label={ t('message') }\n                getFiles={ insertFile }\n              />\n\n              <Grid item className={ classes.cardImage }>\n                { fileChip }\n              </Grid>\n\n            </Grid>\n\n          </Grid>\n        </Form>\n      </CardContent>\n\n      <CardActions className={ classes.buttons }>\n        <Grid item className={ classes.btnClean }>\n          <I18n as={ Button }\n            variant=\"text\"\n            color=\"secondary\"\n            onClick={ handleClean }\n            disabled={ loading }\n          >\n            clean\n          </I18n>\n        </Grid>\n        <Grid item className={ classes.btnsSaveAndCancel }>\n          <I18n as={ Button }\n            color=\"secondary\"\n            variant=\"outlined\"\n            disabled={ loading }\n            onClick={ handleClose }\n          >\n            cancel\n          </I18n>\n          <I18n as={ Button }\n            color=\"secondary\"\n            variant=\"contained\"\n            onClick={ () => formRef.current.submit() }\n            className={ classes.btnSave }\n            disabled={ loading }\n            isLoading={ loading }\n          >\n            save\n          </I18n>\n        </Grid>\n      </CardActions>\n    </Modal>\n  )\n}\n\nCreateMessageboardModal.propTypes = {\n  id: PropTypes.string.isRequired,\n  handleClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  onSave: PropTypes.func,\n  messageId: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number\n  ])\n}\n\nCreateMessageboardModal.defaultProps = {\n  onSave () {},\n  messageId: null\n}\n\nexport default CreateMessageboardModal\n"]},"metadata":{},"sourceType":"module"}