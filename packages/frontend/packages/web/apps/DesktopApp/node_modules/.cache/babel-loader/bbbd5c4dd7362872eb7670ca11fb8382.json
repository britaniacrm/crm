{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/customers/modals/NewBankReferenceModal/NewBankReferenceModal.js\";\nimport React, { useCallback, useRef, useMemo } from 'react';\nimport PropTypes from 'prop-types';\nimport isEmpty from 'lodash/isEmpty';\nimport map from 'lodash/map';\nimport Grid from '@material-ui/core/Grid';\nimport { useFormEffect } from '@britania-crm/forms';\nimport bankReferenceSchema, { INITIAL_VALUES } from '@britania-crm/forms/schemas/customer/customerPreRegistration.bankReference.schema';\nimport I18n, { useT } from '@britania-crm/i18n';\nimport { bank as bankCrmRoutes } from '@britania-crm/services/apis/crmApi/resources/routes';\nimport { trimMask } from '@britania-crm/utils/formatters';\nimport Button from '@britania-crm/web-components/Button';\nimport Form from '@britania-crm/web-components/Form';\nimport InputAutocomplete from '@britania-crm/web-components/InputAutocomplete';\nimport InputHidden from '@britania-crm/web-components/InputHidden';\nimport InputNumber from '@britania-crm/web-components/InputNumber';\nimport InputPhone from '@britania-crm/web-components/InputPhone';\nimport Modal from '@britania-crm/web-components/Modal';\n\nconst NewBankReferenceModal = props => {\n  const {\n    id,\n    open,\n    handleClose,\n    onSubmit,\n    bankReference\n  } = props;\n  const t = useT();\n  const formRef = useRef(null);\n  const banckParams = useMemo(() => ({\n    page: 1,\n    pageSize: 10\n  }), []);\n  const handleChangeBank = useCallback(value => formRef.current.setFieldValue('name', value.description), []);\n  const handleSubmit = useCallback(values => {\n    onSubmit({ ...values,\n      phone: trimMask(values.phone || '')\n    });\n    handleClose();\n  }, [handleClose, onSubmit]);\n  useFormEffect(() => {\n    if (!isEmpty(bankReference)) {\n      formRef.current.setData({ ...bankReference,\n        code: {\n          description: bankReference === null || bankReference === void 0 ? void 0 : bankReference.name,\n          label: bankReference === null || bankReference === void 0 ? void 0 : bankReference.name\n        }\n      });\n    }\n  }, [bankReference]);\n  return /*#__PURE__*/React.createElement(Modal, {\n    id: id,\n    open: open,\n    maxWidth: \"md\",\n    title: t('bank reference', {\n      howMany: 1\n    }),\n    variant: \"space\",\n    fullWidth: true,\n    FooterComponent: () => /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(I18n, {\n      as: Button,\n      onClick: handleClose,\n      color: \"secondary\",\n      variant: \"outlined\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }\n    }, \"cancel\"), /*#__PURE__*/React.createElement(I18n, {\n      as: Button,\n      onClick: () => formRef.current.submit(),\n      color: \"secondary\",\n      style: {\n        marginLeft: 10\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }\n    }, \"save\")),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    ref: formRef,\n    schemaConstructor: bankReferenceSchema,\n    defaultValues: INITIAL_VALUES,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    md: 4,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputAutocomplete, {\n    name: \"code\",\n    label: t('bank'),\n    url: bankCrmRoutes.getAll,\n    params: banckParams,\n    normalizeDataFn: options => map(options, ({\n      code,\n      description\n    }) => ({\n      code,\n      description,\n      label: `${code} - ${description}`\n    })),\n    valueKey: \"label\",\n    paramName: \"description\",\n    onValueChange: handleChangeBank,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(InputHidden, {\n    name: \"name\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    md: 2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputNumber, {\n    name: \"agency\",\n    label: t('agency', {\n      howMany: 1\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputNumber, {\n    name: \"account\",\n    label: t('account', {\n      howMany: 1\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    md: 3,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputPhone, {\n    name: \"phone\",\n    label: t('phone', {\n      howMany: 1\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 13\n    }\n  })))));\n};\n\nNewBankReferenceModal.propTypes = {\n  id: PropTypes.string.isRequired,\n  open: PropTypes.bool.isRequired,\n  handleClose: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  bankReference: PropTypes.object\n};\nNewBankReferenceModal.defaultProps = {\n  bankReference: {}\n};\nexport default NewBankReferenceModal;","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/customers/modals/NewBankReferenceModal/NewBankReferenceModal.js"],"names":["React","useCallback","useRef","useMemo","PropTypes","isEmpty","map","Grid","useFormEffect","bankReferenceSchema","INITIAL_VALUES","I18n","useT","bank","bankCrmRoutes","trimMask","Button","Form","InputAutocomplete","InputHidden","InputNumber","InputPhone","Modal","NewBankReferenceModal","props","id","open","handleClose","onSubmit","bankReference","t","formRef","banckParams","page","pageSize","handleChangeBank","value","current","setFieldValue","description","handleSubmit","values","phone","setData","code","name","label","howMany","submit","marginLeft","getAll","options","propTypes","string","isRequired","bool","func","object","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,IACEC,WADF,EAEEC,MAFF,EAGEC,OAHF,QAIO,OAJP;AAMA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AAEA,OAAOC,IAAP,MAAiB,wBAAjB;AAEA,SAASC,aAAT,QAA8B,qBAA9B;AACA,OAAOC,mBAAP,IAA8BC,cAA9B,QAAoD,mFAApD;AACA,OAAOC,IAAP,IAAeC,IAAf,QAA2B,oBAA3B;AACA,SAASC,IAAI,IAAIC,aAAjB,QAAsC,qDAAtC;AACA,SAASC,QAAT,QAAyB,gCAAzB;AACA,OAAOC,MAAP,MAAmB,qCAAnB;AACA,OAAOC,IAAP,MAAiB,mCAAjB;AACA,OAAOC,iBAAP,MAA8B,gDAA9B;AACA,OAAOC,WAAP,MAAwB,0CAAxB;AACA,OAAOC,WAAP,MAAwB,0CAAxB;AACA,OAAOC,UAAP,MAAuB,yCAAvB;AACA,OAAOC,KAAP,MAAkB,oCAAlB;;AAEA,MAAMC,qBAAqB,GAAIC,KAAD,IAAW;AACvC,QAAM;AACJC,IAAAA,EADI;AAEJC,IAAAA,IAFI;AAGJC,IAAAA,WAHI;AAIJC,IAAAA,QAJI;AAKJC,IAAAA;AALI,MAMFL,KANJ;AAQA,QAAMM,CAAC,GAAGlB,IAAI,EAAd;AACA,QAAMmB,OAAO,GAAG7B,MAAM,CAAC,IAAD,CAAtB;AAEA,QAAM8B,WAAW,GAAG7B,OAAO,CACzB,OAAO;AACL8B,IAAAA,IAAI,EAAE,CADD;AAELC,IAAAA,QAAQ,EAAE;AAFL,GAAP,CADyB,EAKzB,EALyB,CAA3B;AAOA,QAAMC,gBAAgB,GAAGlC,WAAW,CACjCmC,KAAD,IACEL,OAAO,CAACM,OAAR,CAAgBC,aAAhB,CAA8B,MAA9B,EAAsCF,KAAK,CAACG,WAA5C,CAFgC,EAGhC,EAHgC,CAApC;AAKA,QAAMC,YAAY,GAAGvC,WAAW,CAC7BwC,MAAD,IAAY;AACVb,IAAAA,QAAQ,CAAC,EACP,GAAGa,MADI;AAEPC,MAAAA,KAAK,EAAE3B,QAAQ,CAAC0B,MAAM,CAACC,KAAP,IAAgB,EAAjB;AAFR,KAAD,CAAR;AAIAf,IAAAA,WAAW;AACZ,GAP6B,EAQ9B,CAACA,WAAD,EAAcC,QAAd,CAR8B,CAAhC;AAWApB,EAAAA,aAAa,CACX,MAAM;AACJ,QAAI,CAACH,OAAO,CAACwB,aAAD,CAAZ,EAA6B;AAC3BE,MAAAA,OAAO,CAACM,OAAR,CAAgBM,OAAhB,CAAwB,EACtB,GAAGd,aADmB;AAEtBe,QAAAA,IAAI,EAAE;AACJL,UAAAA,WAAW,EAAEV,aAAF,aAAEA,aAAF,uBAAEA,aAAa,CAAEgB,IADxB;AAEJC,UAAAA,KAAK,EAAEjB,aAAF,aAAEA,aAAF,uBAAEA,aAAa,CAAEgB;AAFlB;AAFgB,OAAxB;AAOD;AACF,GAXU,EAYX,CAAChB,aAAD,CAZW,CAAb;AAeA,sBACE,oBAAC,KAAD;AACE,IAAA,EAAE,EAAGJ,EADP;AAEE,IAAA,IAAI,EAAGC,IAFT;AAGE,IAAA,QAAQ,EAAC,IAHX;AAIE,IAAA,KAAK,EAAGI,CAAC,CAAC,gBAAD,EAAmB;AAAEiB,MAAAA,OAAO,EAAE;AAAX,KAAnB,CAJX;AAKE,IAAA,OAAO,EAAC,OALV;AAME,IAAA,SAAS,MANX;AAOE,IAAA,eAAe,EAAG,mBAChB,uDACE,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAG/B,MAAX;AACE,MAAA,OAAO,EAAGW,WADZ;AAEE,MAAA,KAAK,EAAC,WAFR;AAGE,MAAA,OAAO,EAAC,UAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAQE,oBAAC,IAAD;AAAM,MAAA,EAAE,EAAGX,MAAX;AACE,MAAA,OAAO,EAAG,MAAMe,OAAO,CAACM,OAAR,CAAgBW,MAAhB,EADlB;AAEE,MAAA,KAAK,EAAC,WAFR;AAGE,MAAA,KAAK,EAAG;AAAEC,QAAAA,UAAU,EAAE;AAAd,OAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARF,CARJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBA0BE,oBAAC,IAAD;AACE,IAAA,GAAG,EAAGlB,OADR;AAEE,IAAA,iBAAiB,EAAGtB,mBAFtB;AAGE,IAAA,aAAa,EAAGC,cAHlB;AAIE,IAAA,QAAQ,EAAG8B,YAJb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAME,oBAAC,IAAD;AAAM,IAAA,SAAS,MAAf;AAAgB,IAAA,OAAO,EAAG,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAG,EAAhB;AAAqB,IAAA,EAAE,EAAG,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,iBAAD;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,KAAK,EAAGV,CAAC,CAAC,MAAD,CAFX;AAGE,IAAA,GAAG,EAAGhB,aAAa,CAACoC,MAHtB;AAIE,IAAA,MAAM,EAAGlB,WAJX;AAKE,IAAA,eAAe,EAAImB,OAAD,IAAa7C,GAAG,CAAC6C,OAAD,EAAU,CAAC;AAAEP,MAAAA,IAAF;AAAQL,MAAAA;AAAR,KAAD,MAA4B;AACtEK,MAAAA,IADsE;AAChEL,MAAAA,WADgE;AACnDO,MAAAA,KAAK,EAAG,GAAGF,IAAM,MAAML,WAAa;AADe,KAA5B,CAAV,CALpC;AAQE,IAAA,QAAQ,EAAC,OARX;AASE,IAAA,SAAS,EAAC,aATZ;AAUE,IAAA,aAAa,EAAGJ,gBAVlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAaE,oBAAC,WAAD;AAAa,IAAA,IAAI,EAAC,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbF,CADF,eAgBE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAG,EAAhB;AAAqB,IAAA,EAAE,EAAG,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AACE,IAAA,IAAI,EAAC,QADP;AAEE,IAAA,KAAK,EAAGL,CAAC,CAAC,QAAD,EAAW;AAAEiB,MAAAA,OAAO,EAAE;AAAX,KAAX,CAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAhBF,eAsBE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAG,EAAhB;AAAqB,IAAA,EAAE,EAAG,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,WAAD;AACE,IAAA,IAAI,EAAC,SADP;AAEE,IAAA,KAAK,EAAGjB,CAAC,CAAC,SAAD,EAAY;AAAEiB,MAAAA,OAAO,EAAE;AAAX,KAAZ,CAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAtBF,eA4BE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAG,EAAhB;AAAqB,IAAA,EAAE,EAAG,CAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,KAAK,EAAGjB,CAAC,CAAC,OAAD,EAAU;AAAEiB,MAAAA,OAAO,EAAE;AAAX,KAAV,CAFX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CA5BF,CANF,CA1BF,CADF;AAuED,CAzHD;;AA2HAxB,qBAAqB,CAAC6B,SAAtB,GAAkC;AAChC3B,EAAAA,EAAE,EAAErB,SAAS,CAACiD,MAAV,CAAiBC,UADW;AAEhC5B,EAAAA,IAAI,EAAEtB,SAAS,CAACmD,IAAV,CAAeD,UAFW;AAGhC3B,EAAAA,WAAW,EAAEvB,SAAS,CAACoD,IAAV,CAAeF,UAHI;AAIhC1B,EAAAA,QAAQ,EAAExB,SAAS,CAACoD,IAAV,CAAeF,UAJO;AAKhCzB,EAAAA,aAAa,EAAEzB,SAAS,CAACqD;AALO,CAAlC;AAQAlC,qBAAqB,CAACmC,YAAtB,GAAqC;AAAE7B,EAAAA,aAAa,EAAE;AAAjB,CAArC;AAEA,eAAeN,qBAAf","sourcesContent":["import React, {\n  useCallback,\n  useRef,\n  useMemo\n} from 'react'\n\nimport PropTypes from 'prop-types'\n\nimport isEmpty from 'lodash/isEmpty'\nimport map from 'lodash/map'\n\nimport Grid from '@material-ui/core/Grid'\n\nimport { useFormEffect } from '@britania-crm/forms'\nimport bankReferenceSchema, { INITIAL_VALUES } from '@britania-crm/forms/schemas/customer/customerPreRegistration.bankReference.schema'\nimport I18n, { useT } from '@britania-crm/i18n'\nimport { bank as bankCrmRoutes } from '@britania-crm/services/apis/crmApi/resources/routes'\nimport { trimMask } from '@britania-crm/utils/formatters'\nimport Button from '@britania-crm/web-components/Button'\nimport Form from '@britania-crm/web-components/Form'\nimport InputAutocomplete from '@britania-crm/web-components/InputAutocomplete'\nimport InputHidden from '@britania-crm/web-components/InputHidden'\nimport InputNumber from '@britania-crm/web-components/InputNumber'\nimport InputPhone from '@britania-crm/web-components/InputPhone'\nimport Modal from '@britania-crm/web-components/Modal'\n\nconst NewBankReferenceModal = (props) => {\n  const {\n    id,\n    open,\n    handleClose,\n    onSubmit,\n    bankReference\n  } = props\n\n  const t = useT()\n  const formRef = useRef(null)\n\n  const banckParams = useMemo(\n    () => ({\n      page: 1,\n      pageSize: 10\n    }),\n    [])\n\n  const handleChangeBank = useCallback(\n    (value) =>\n      formRef.current.setFieldValue('name', value.description)\n    , [])\n\n  const handleSubmit = useCallback(\n    (values) => {\n      onSubmit({\n        ...values,\n        phone: trimMask(values.phone || '')\n      })\n      handleClose()\n    },\n    [handleClose, onSubmit]\n  )\n\n  useFormEffect(\n    () => {\n      if (!isEmpty(bankReference)) {\n        formRef.current.setData({\n          ...bankReference,\n          code: {\n            description: bankReference?.name,\n            label: bankReference?.name\n          }\n        })\n      }\n    },\n    [bankReference]\n  )\n\n  return (\n    <Modal\n      id={ id }\n      open={ open }\n      maxWidth=\"md\"\n      title={ t('bank reference', { howMany: 1 }) }\n      variant=\"space\"\n      fullWidth\n      FooterComponent={ () => (\n        <>\n          <I18n as={ Button }\n            onClick={ handleClose }\n            color=\"secondary\"\n            variant=\"outlined\"\n          >\n            cancel\n          </I18n>\n          <I18n as={ Button }\n            onClick={ () => formRef.current.submit() }\n            color=\"secondary\"\n            style={ { marginLeft: 10 } }\n          >\n            save\n          </I18n>\n        </>\n      ) }\n    >\n      <Form\n        ref={ formRef }\n        schemaConstructor={ bankReferenceSchema }\n        defaultValues={ INITIAL_VALUES }\n        onSubmit={ handleSubmit }\n      >\n        <Grid container spacing={ 1 }>\n          <Grid item sm={ 12 } md={ 4 }>\n            <InputAutocomplete\n              name=\"code\"\n              label={ t('bank') }\n              url={ bankCrmRoutes.getAll }\n              params={ banckParams }\n              normalizeDataFn={ (options) => map(options, ({ code, description }) => ({\n                code, description, label: `${ code } - ${ description }`\n              })) }\n              valueKey=\"label\"\n              paramName=\"description\"\n              onValueChange={ handleChangeBank }\n            />\n            <InputHidden name=\"name\" />\n          </Grid>\n          <Grid item sm={ 12 } md={ 2 }>\n            <InputNumber\n              name=\"agency\"\n              label={ t('agency', { howMany: 1 }) }\n            />\n          </Grid>\n          <Grid item sm={ 12 } md={ 3 }>\n            <InputNumber\n              name=\"account\"\n              label={ t('account', { howMany: 1 }) }\n            />\n          </Grid>\n          <Grid item sm={ 12 } md={ 3 }>\n            <InputPhone\n              name=\"phone\"\n              label={ t('phone', { howMany: 1 }) }\n            />\n          </Grid>\n        </Grid>\n      </Form>\n    </Modal>\n  )\n}\n\nNewBankReferenceModal.propTypes = {\n  id: PropTypes.string.isRequired,\n  open: PropTypes.bool.isRequired,\n  handleClose: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  bankReference: PropTypes.object\n}\n\nNewBankReferenceModal.defaultProps = { bankReference: {} }\n\nexport default NewBankReferenceModal\n"]},"metadata":{},"sourceType":"module"}