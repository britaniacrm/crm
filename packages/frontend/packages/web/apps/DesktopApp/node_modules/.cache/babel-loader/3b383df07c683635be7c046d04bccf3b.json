{"ast":null,"code":"/*!\n * cpf-cnpj-validator v1.0.3\n * (c) 2020-present Carvalho, Vinicius Luiz <carvalho.viniciusluiz@gmail.com>\n * Released under the MIT License.\n */\nconst BLACKLIST = ['00000000000', '11111111111', '22222222222', '33333333333', '44444444444', '55555555555', '66666666666', '77777777777', '88888888888', '99999999999', '12345678909'];\nconst STRICT_STRIP_REGEX = /[.-]/g;\nconst LOOSE_STRIP_REGEX = /[^\\d]/g;\n\nconst verifierDigit = digits => {\n  const numbers = digits.split('').map(number => {\n    return parseInt(number, 10);\n  });\n  const modulus = numbers.length + 1;\n  const multiplied = numbers.map((number, index) => number * (modulus - index));\n  const mod = multiplied.reduce((buffer, number) => buffer + number) % 11;\n  return mod < 2 ? 0 : 11 - mod;\n};\n\nconst strip = (number, strict) => {\n  const regex = strict ? STRICT_STRIP_REGEX : LOOSE_STRIP_REGEX;\n  return (number || '').replace(regex, '');\n};\n\nconst format = number => {\n  return strip(number).replace(/^(\\d{3})(\\d{3})(\\d{3})(\\d{2})$/, '$1.$2.$3-$4');\n};\n\nconst isValid = (number, strict) => {\n  const stripped = strip(number, strict);\n\n  if (!stripped) {\n    return false;\n  }\n\n  if (stripped.length !== 11) {\n    return false;\n  }\n\n  if (BLACKLIST.includes(stripped)) {\n    return false;\n  }\n\n  let numbers = stripped.substr(0, 9);\n  numbers += verifierDigit(numbers);\n  numbers += verifierDigit(numbers);\n  return numbers.substr(-2) === stripped.substr(-2);\n};\n\nconst generate = formatted => {\n  let numbers = '';\n\n  for (let i = 0; i < 9; i += 1) {\n    numbers += Math.floor(Math.random() * 9);\n  }\n\n  numbers += verifierDigit(numbers);\n  numbers += verifierDigit(numbers);\n  return formatted ? format(numbers) : numbers;\n};\n\nvar cpf = {\n  verifierDigit,\n  strip,\n  format,\n  isValid,\n  generate\n};\nconst BLACKLIST$1 = ['00000000000000', '11111111111111', '22222222222222', '33333333333333', '44444444444444', '55555555555555', '66666666666666', '77777777777777', '88888888888888', '99999999999999'];\nconst STRICT_STRIP_REGEX$1 = /[-\\\\/.]/g;\nconst LOOSE_STRIP_REGEX$1 = /[^\\d]/g;\n\nconst verifierDigit$1 = digits => {\n  let index = 2;\n  const reverse = digits.split('').reduce((buffer, number) => {\n    return [parseInt(number, 10)].concat(buffer);\n  }, []);\n  const sum = reverse.reduce((buffer, number) => {\n    buffer += number * index;\n    index = index === 9 ? 2 : index + 1;\n    return buffer;\n  }, 0);\n  const mod = sum % 11;\n  return mod < 2 ? 0 : 11 - mod;\n};\n\nconst strip$1 = (number, strict) => {\n  const regex = strict ? STRICT_STRIP_REGEX$1 : LOOSE_STRIP_REGEX$1;\n  return (number || '').replace(regex, '');\n};\n\nconst format$1 = number => {\n  return strip$1(number).replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, '$1.$2.$3/$4-$5');\n};\n\nconst isValid$1 = (number, strict) => {\n  const stripped = strip$1(number, strict);\n\n  if (!stripped) {\n    return false;\n  }\n\n  if (stripped.length !== 14) {\n    return false;\n  }\n\n  if (BLACKLIST$1.includes(stripped)) {\n    return false;\n  }\n\n  let numbers = stripped.substr(0, 12);\n  numbers += verifierDigit$1(numbers);\n  numbers += verifierDigit$1(numbers);\n  return numbers.substr(-2) === stripped.substr(-2);\n};\n\nconst generate$1 = formatted => {\n  let numbers = '';\n\n  for (let i = 0; i < 12; i += 1) {\n    numbers += Math.floor(Math.random() * 9);\n  }\n\n  numbers += verifierDigit$1(numbers);\n  numbers += verifierDigit$1(numbers);\n  return formatted ? format$1(numbers) : numbers;\n};\n\nvar cnpj = {\n  verifierDigit: verifierDigit$1,\n  strip: strip$1,\n  format: format$1,\n  isValid: isValid$1,\n  generate: generate$1\n};\n\nconst validator = joi => ({\n  type: 'document',\n  base: joi.string(),\n  messages: {\n    'document.cpf': 'CPF inválido',\n    'document.cnpj': 'CNPJ inválido'\n  },\n  rules: {\n    cpf: {\n      validate(value, helpers, args, options) {\n        if (!cpf.isValid(value)) {\n          return helpers.error('document.cpf');\n        }\n\n        return value;\n      }\n\n    },\n    cnpj: {\n      validate(value, helpers, args, options) {\n        if (!cnpj.isValid(value)) {\n          return helpers.error('document.cnpj');\n        }\n\n        return value;\n      }\n\n    }\n  }\n});\n\nexport default validator;\nexport { cpf, cnpj, validator };","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/node_modules/cpf-cnpj-validator/dist/cpf-cnpj-validator.es.js"],"names":["BLACKLIST","STRICT_STRIP_REGEX","LOOSE_STRIP_REGEX","verifierDigit","digits","numbers","split","map","number","parseInt","modulus","length","multiplied","index","mod","reduce","buffer","strip","strict","regex","replace","format","isValid","stripped","includes","substr","generate","formatted","i","Math","floor","random","cpf","BLACKLIST$1","STRICT_STRIP_REGEX$1","LOOSE_STRIP_REGEX$1","verifierDigit$1","reverse","concat","sum","strip$1","format$1","isValid$1","generate$1","cnpj","validator","joi","type","base","string","messages","rules","validate","value","helpers","args","options","error"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,MAAMA,SAAS,GAAG,CACd,aADc,EAEd,aAFc,EAGd,aAHc,EAId,aAJc,EAKd,aALc,EAMd,aANc,EAOd,aAPc,EAQd,aARc,EASd,aATc,EAUd,aAVc,EAWd,aAXc,CAAlB;AAaA,MAAMC,kBAAkB,GAAG,OAA3B;AACA,MAAMC,iBAAiB,GAAG,QAA1B;;AACA,MAAMC,aAAa,GAAIC,MAAD,IAAY;AAC9B,QAAMC,OAAO,GAAGD,MAAM,CACjBE,KADW,CACL,EADK,EAEXC,GAFW,CAEPC,MAAM,IAAI;AACf,WAAOC,QAAQ,CAACD,MAAD,EAAS,EAAT,CAAf;AACH,GAJe,CAAhB;AAKA,QAAME,OAAO,GAAGL,OAAO,CAACM,MAAR,GAAiB,CAAjC;AACA,QAAMC,UAAU,GAAGP,OAAO,CAACE,GAAR,CAAY,CAACC,MAAD,EAASK,KAAT,KAAmBL,MAAM,IAAIE,OAAO,GAAGG,KAAd,CAArC,CAAnB;AACA,QAAMC,GAAG,GAAGF,UAAU,CAACG,MAAX,CAAkB,CAACC,MAAD,EAASR,MAAT,KAAoBQ,MAAM,GAAGR,MAA/C,IAAyD,EAArE;AACA,SAAQM,GAAG,GAAG,CAAN,GAAU,CAAV,GAAc,KAAKA,GAA3B;AACH,CAVD;;AAWA,MAAMG,KAAK,GAAG,CAACT,MAAD,EAASU,MAAT,KAAoB;AAC9B,QAAMC,KAAK,GAAGD,MAAM,GAAGjB,kBAAH,GAAwBC,iBAA5C;AACA,SAAO,CAACM,MAAM,IAAI,EAAX,EAAeY,OAAf,CAAuBD,KAAvB,EAA8B,EAA9B,CAAP;AACH,CAHD;;AAIA,MAAME,MAAM,GAAIb,MAAD,IAAY;AACvB,SAAOS,KAAK,CAACT,MAAD,CAAL,CAAcY,OAAd,CAAsB,gCAAtB,EAAwD,aAAxD,CAAP;AACH,CAFD;;AAGA,MAAME,OAAO,GAAG,CAACd,MAAD,EAASU,MAAT,KAAoB;AAChC,QAAMK,QAAQ,GAAGN,KAAK,CAACT,MAAD,EAASU,MAAT,CAAtB;;AACA,MAAI,CAACK,QAAL,EAAe;AACX,WAAO,KAAP;AACH;;AACD,MAAIA,QAAQ,CAACZ,MAAT,KAAoB,EAAxB,EAA4B;AACxB,WAAO,KAAP;AACH;;AACD,MAAIX,SAAS,CAACwB,QAAV,CAAmBD,QAAnB,CAAJ,EAAkC;AAC9B,WAAO,KAAP;AACH;;AACD,MAAIlB,OAAO,GAAGkB,QAAQ,CAACE,MAAT,CAAgB,CAAhB,EAAmB,CAAnB,CAAd;AACApB,EAAAA,OAAO,IAAIF,aAAa,CAACE,OAAD,CAAxB;AACAA,EAAAA,OAAO,IAAIF,aAAa,CAACE,OAAD,CAAxB;AACA,SAAOA,OAAO,CAACoB,MAAR,CAAe,CAAC,CAAhB,MAAuBF,QAAQ,CAACE,MAAT,CAAgB,CAAC,CAAjB,CAA9B;AACH,CAfD;;AAgBA,MAAMC,QAAQ,GAAIC,SAAD,IAAe;AAC5B,MAAItB,OAAO,GAAG,EAAd;;AACA,OAAK,IAAIuB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,EAAuBA,CAAC,IAAI,CAA5B,EAA+B;AAC3BvB,IAAAA,OAAO,IAAIwB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAX;AACH;;AACD1B,EAAAA,OAAO,IAAIF,aAAa,CAACE,OAAD,CAAxB;AACAA,EAAAA,OAAO,IAAIF,aAAa,CAACE,OAAD,CAAxB;AACA,SAAQsB,SAAS,GAAGN,MAAM,CAAChB,OAAD,CAAT,GAAqBA,OAAtC;AACH,CARD;;AASA,IAAI2B,GAAG,GAAG;AACN7B,EAAAA,aADM;AAENc,EAAAA,KAFM;AAGNI,EAAAA,MAHM;AAINC,EAAAA,OAJM;AAKNI,EAAAA;AALM,CAAV;AAQA,MAAMO,WAAW,GAAG,CAChB,gBADgB,EAEhB,gBAFgB,EAGhB,gBAHgB,EAIhB,gBAJgB,EAKhB,gBALgB,EAMhB,gBANgB,EAOhB,gBAPgB,EAQhB,gBARgB,EAShB,gBATgB,EAUhB,gBAVgB,CAApB;AAYA,MAAMC,oBAAoB,GAAG,UAA7B;AACA,MAAMC,mBAAmB,GAAG,QAA5B;;AACA,MAAMC,eAAe,GAAIhC,MAAD,IAAY;AAChC,MAAIS,KAAK,GAAG,CAAZ;AACA,QAAMwB,OAAO,GAAGjC,MAAM,CAACE,KAAP,CAAa,EAAb,EAAiBS,MAAjB,CAAwB,CAACC,MAAD,EAASR,MAAT,KAAoB;AACxD,WAAO,CAACC,QAAQ,CAACD,MAAD,EAAS,EAAT,CAAT,EAAuB8B,MAAvB,CAA8BtB,MAA9B,CAAP;AACH,GAFe,EAEb,EAFa,CAAhB;AAGA,QAAMuB,GAAG,GAAGF,OAAO,CAACtB,MAAR,CAAe,CAACC,MAAD,EAASR,MAAT,KAAoB;AAC3CQ,IAAAA,MAAM,IAAIR,MAAM,GAAGK,KAAnB;AACAA,IAAAA,KAAK,GAAIA,KAAK,KAAK,CAAV,GAAc,CAAd,GAAkBA,KAAK,GAAG,CAAnC;AACA,WAAOG,MAAP;AACH,GAJW,EAIT,CAJS,CAAZ;AAKA,QAAMF,GAAG,GAAGyB,GAAG,GAAG,EAAlB;AACA,SAAQzB,GAAG,GAAG,CAAN,GAAU,CAAV,GAAc,KAAKA,GAA3B;AACH,CAZD;;AAaA,MAAM0B,OAAO,GAAG,CAAChC,MAAD,EAASU,MAAT,KAAoB;AAChC,QAAMC,KAAK,GAAGD,MAAM,GAAGgB,oBAAH,GAA0BC,mBAA9C;AACA,SAAO,CAAC3B,MAAM,IAAI,EAAX,EAAeY,OAAf,CAAuBD,KAAvB,EAA8B,EAA9B,CAAP;AACH,CAHD;;AAIA,MAAMsB,QAAQ,GAAIjC,MAAD,IAAY;AACzB,SAAOgC,OAAO,CAAChC,MAAD,CAAP,CAAgBY,OAAhB,CAAwB,uCAAxB,EAAiE,gBAAjE,CAAP;AACH,CAFD;;AAGA,MAAMsB,SAAS,GAAG,CAAClC,MAAD,EAASU,MAAT,KAAoB;AAClC,QAAMK,QAAQ,GAAGiB,OAAO,CAAChC,MAAD,EAASU,MAAT,CAAxB;;AACA,MAAI,CAACK,QAAL,EAAe;AACX,WAAO,KAAP;AACH;;AACD,MAAIA,QAAQ,CAACZ,MAAT,KAAoB,EAAxB,EAA4B;AACxB,WAAO,KAAP;AACH;;AACD,MAAIsB,WAAW,CAACT,QAAZ,CAAqBD,QAArB,CAAJ,EAAoC;AAChC,WAAO,KAAP;AACH;;AACD,MAAIlB,OAAO,GAAGkB,QAAQ,CAACE,MAAT,CAAgB,CAAhB,EAAmB,EAAnB,CAAd;AACApB,EAAAA,OAAO,IAAI+B,eAAe,CAAC/B,OAAD,CAA1B;AACAA,EAAAA,OAAO,IAAI+B,eAAe,CAAC/B,OAAD,CAA1B;AACA,SAAOA,OAAO,CAACoB,MAAR,CAAe,CAAC,CAAhB,MAAuBF,QAAQ,CAACE,MAAT,CAAgB,CAAC,CAAjB,CAA9B;AACH,CAfD;;AAgBA,MAAMkB,UAAU,GAAIhB,SAAD,IAAe;AAC9B,MAAItB,OAAO,GAAG,EAAd;;AACA,OAAK,IAAIuB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,EAApB,EAAwBA,CAAC,IAAI,CAA7B,EAAgC;AAC5BvB,IAAAA,OAAO,IAAIwB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgB,CAA3B,CAAX;AACH;;AACD1B,EAAAA,OAAO,IAAI+B,eAAe,CAAC/B,OAAD,CAA1B;AACAA,EAAAA,OAAO,IAAI+B,eAAe,CAAC/B,OAAD,CAA1B;AACA,SAAQsB,SAAS,GAAGc,QAAQ,CAACpC,OAAD,CAAX,GAAuBA,OAAxC;AACH,CARD;;AASA,IAAIuC,IAAI,GAAG;AACPzC,EAAAA,aAAa,EAAEiC,eADR;AAEPnB,EAAAA,KAAK,EAAEuB,OAFA;AAGPnB,EAAAA,MAAM,EAAEoB,QAHD;AAIPnB,EAAAA,OAAO,EAAEoB,SAJF;AAKPhB,EAAAA,QAAQ,EAAEiB;AALH,CAAX;;AAQA,MAAME,SAAS,GAAGC,GAAG,KAAK;AACtBC,EAAAA,IAAI,EAAE,UADgB;AAEtBC,EAAAA,IAAI,EAAEF,GAAG,CAACG,MAAJ,EAFgB;AAGtBC,EAAAA,QAAQ,EAAE;AACN,oBAAgB,cADV;AAEN,qBAAiB;AAFX,GAHY;AAOtBC,EAAAA,KAAK,EAAE;AACHnB,IAAAA,GAAG,EAAE;AACDoB,MAAAA,QAAQ,CAACC,KAAD,EAAQC,OAAR,EAAiBC,IAAjB,EAAuBC,OAAvB,EAAgC;AACpC,YAAI,CAACxB,GAAG,CAACV,OAAJ,CAAY+B,KAAZ,CAAL,EAAyB;AACrB,iBAAOC,OAAO,CAACG,KAAR,CAAc,cAAd,CAAP;AACH;;AACD,eAAOJ,KAAP;AACH;;AANA,KADF;AASHT,IAAAA,IAAI,EAAE;AACFQ,MAAAA,QAAQ,CAACC,KAAD,EAAQC,OAAR,EAAiBC,IAAjB,EAAuBC,OAAvB,EAAgC;AACpC,YAAI,CAACZ,IAAI,CAACtB,OAAL,CAAa+B,KAAb,CAAL,EAA0B;AACtB,iBAAOC,OAAO,CAACG,KAAR,CAAc,eAAd,CAAP;AACH;;AACD,eAAOJ,KAAP;AACH;;AANC;AATH;AAPe,CAAL,CAArB;;AA2BA,eAAeR,SAAf;AACA,SAASb,GAAT,EAAcY,IAAd,EAAoBC,SAApB","sourcesContent":["/*!\n * cpf-cnpj-validator v1.0.3\n * (c) 2020-present Carvalho, Vinicius Luiz <carvalho.viniciusluiz@gmail.com>\n * Released under the MIT License.\n */\nconst BLACKLIST = [\r\n    '00000000000',\r\n    '11111111111',\r\n    '22222222222',\r\n    '33333333333',\r\n    '44444444444',\r\n    '55555555555',\r\n    '66666666666',\r\n    '77777777777',\r\n    '88888888888',\r\n    '99999999999',\r\n    '12345678909'\r\n];\r\nconst STRICT_STRIP_REGEX = /[.-]/g;\r\nconst LOOSE_STRIP_REGEX = /[^\\d]/g;\r\nconst verifierDigit = (digits) => {\r\n    const numbers = digits\r\n        .split('')\r\n        .map(number => {\r\n        return parseInt(number, 10);\r\n    });\r\n    const modulus = numbers.length + 1;\r\n    const multiplied = numbers.map((number, index) => number * (modulus - index));\r\n    const mod = multiplied.reduce((buffer, number) => buffer + number) % 11;\r\n    return (mod < 2 ? 0 : 11 - mod);\r\n};\r\nconst strip = (number, strict) => {\r\n    const regex = strict ? STRICT_STRIP_REGEX : LOOSE_STRIP_REGEX;\r\n    return (number || '').replace(regex, '');\r\n};\r\nconst format = (number) => {\r\n    return strip(number).replace(/^(\\d{3})(\\d{3})(\\d{3})(\\d{2})$/, '$1.$2.$3-$4');\r\n};\r\nconst isValid = (number, strict) => {\r\n    const stripped = strip(number, strict);\r\n    if (!stripped) {\r\n        return false;\r\n    }\r\n    if (stripped.length !== 11) {\r\n        return false;\r\n    }\r\n    if (BLACKLIST.includes(stripped)) {\r\n        return false;\r\n    }\r\n    let numbers = stripped.substr(0, 9);\r\n    numbers += verifierDigit(numbers);\r\n    numbers += verifierDigit(numbers);\r\n    return numbers.substr(-2) === stripped.substr(-2);\r\n};\r\nconst generate = (formatted) => {\r\n    let numbers = '';\r\n    for (let i = 0; i < 9; i += 1) {\r\n        numbers += Math.floor(Math.random() * 9);\r\n    }\r\n    numbers += verifierDigit(numbers);\r\n    numbers += verifierDigit(numbers);\r\n    return (formatted ? format(numbers) : numbers);\r\n};\r\nvar cpf = {\r\n    verifierDigit,\r\n    strip,\r\n    format,\r\n    isValid,\r\n    generate,\r\n};\n\nconst BLACKLIST$1 = [\r\n    '00000000000000',\r\n    '11111111111111',\r\n    '22222222222222',\r\n    '33333333333333',\r\n    '44444444444444',\r\n    '55555555555555',\r\n    '66666666666666',\r\n    '77777777777777',\r\n    '88888888888888',\r\n    '99999999999999'\r\n];\r\nconst STRICT_STRIP_REGEX$1 = /[-\\\\/.]/g;\r\nconst LOOSE_STRIP_REGEX$1 = /[^\\d]/g;\r\nconst verifierDigit$1 = (digits) => {\r\n    let index = 2;\r\n    const reverse = digits.split('').reduce((buffer, number) => {\r\n        return [parseInt(number, 10)].concat(buffer);\r\n    }, []);\r\n    const sum = reverse.reduce((buffer, number) => {\r\n        buffer += number * index;\r\n        index = (index === 9 ? 2 : index + 1);\r\n        return buffer;\r\n    }, 0);\r\n    const mod = sum % 11;\r\n    return (mod < 2 ? 0 : 11 - mod);\r\n};\r\nconst strip$1 = (number, strict) => {\r\n    const regex = strict ? STRICT_STRIP_REGEX$1 : LOOSE_STRIP_REGEX$1;\r\n    return (number || '').replace(regex, '');\r\n};\r\nconst format$1 = (number) => {\r\n    return strip$1(number).replace(/^(\\d{2})(\\d{3})(\\d{3})(\\d{4})(\\d{2})$/, '$1.$2.$3/$4-$5');\r\n};\r\nconst isValid$1 = (number, strict) => {\r\n    const stripped = strip$1(number, strict);\r\n    if (!stripped) {\r\n        return false;\r\n    }\r\n    if (stripped.length !== 14) {\r\n        return false;\r\n    }\r\n    if (BLACKLIST$1.includes(stripped)) {\r\n        return false;\r\n    }\r\n    let numbers = stripped.substr(0, 12);\r\n    numbers += verifierDigit$1(numbers);\r\n    numbers += verifierDigit$1(numbers);\r\n    return numbers.substr(-2) === stripped.substr(-2);\r\n};\r\nconst generate$1 = (formatted) => {\r\n    let numbers = '';\r\n    for (let i = 0; i < 12; i += 1) {\r\n        numbers += Math.floor(Math.random() * 9);\r\n    }\r\n    numbers += verifierDigit$1(numbers);\r\n    numbers += verifierDigit$1(numbers);\r\n    return (formatted ? format$1(numbers) : numbers);\r\n};\r\nvar cnpj = {\r\n    verifierDigit: verifierDigit$1,\r\n    strip: strip$1,\r\n    format: format$1,\r\n    isValid: isValid$1,\r\n    generate: generate$1\r\n};\n\nconst validator = joi => ({\r\n    type: 'document',\r\n    base: joi.string(),\r\n    messages: {\r\n        'document.cpf': 'CPF inválido',\r\n        'document.cnpj': 'CNPJ inválido'\r\n    },\r\n    rules: {\r\n        cpf: {\r\n            validate(value, helpers, args, options) {\r\n                if (!cpf.isValid(value)) {\r\n                    return helpers.error('document.cpf');\r\n                }\r\n                return value;\r\n            }\r\n        },\r\n        cnpj: {\r\n            validate(value, helpers, args, options) {\r\n                if (!cnpj.isValid(value)) {\r\n                    return helpers.error('document.cnpj');\r\n                }\r\n                return value;\r\n            }\r\n        }\r\n    }\r\n});\n\nexport default validator;\nexport { cpf, cnpj, validator };\n"]},"metadata":{},"sourceType":"module"}