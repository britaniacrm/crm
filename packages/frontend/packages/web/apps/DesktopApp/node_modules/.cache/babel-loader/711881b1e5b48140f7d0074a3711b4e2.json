{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/components/PreviewMessageboard/PreviewMessageboard.js\";\nimport React, { useCallback, useMemo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport clsx from 'clsx';\nimport parse from 'html-react-parser';\nimport moment from 'moment';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport isEmpty from 'lodash/isEmpty';\nimport map from 'lodash/map';\nimport Chip from '@material-ui/core/Chip';\nimport Divider from '@material-ui/core/Divider';\nimport Grid from '@material-ui/core/Grid';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ImageOutlined from '@material-ui/icons/ImageOutlined';\nimport { AppActions } from '@britania-crm/stores/app';\nimport colors from '@britania-crm/styles/colors';\nimport { formatPathToCloudStorageUrl } from '@britania-crm/utils/files';\nimport DownloadIcon from '@britania-crm/web-components/Icons/DownloadIcon';\nimport useStyles from './styles';\n\nconst PreviewMessageboard = ({\n  item,\n  handlePopoverClose\n}) => {\n  const dispatch = useCallback(useDispatch(), []);\n  const classes = useStyles();\n  const downloadFile = useCallback(({\n    path,\n    filename\n  }) => dispatch(AppActions.downloadFile(path, filename)), [dispatch]);\n  const filterProfile = useMemo(() => {\n    const profile = map(item === null || item === void 0 ? void 0 : item.messageProfile, option => {\n      var _option$profile$;\n\n      return option === null || option === void 0 ? void 0 : (_option$profile$ = option.profile[0]) === null || _option$profile$ === void 0 ? void 0 : _option$profile$.name;\n    });\n    return profile.join(' - ');\n  }, [item]);\n  const getImage = useMemo(() => {\n    const file = get(item, 'files[0].file', {});\n\n    if (file.contentType === 'image/jpeg') {\n      return file;\n    }\n  }, [item]);\n  return /*#__PURE__*/React.createElement(Grid, {\n    className: classes.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    \"aria-label\": \"close\",\n    className: classes.closeButton,\n    onClick: handlePopoverClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(CloseIcon, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"h6\",\n    gutterBottom: true,\n    className: classes.title2,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, item.title), /*#__PURE__*/React.createElement(Typography, {\n    variant: \"subtitle2\",\n    gutterBottom: true,\n    className: clsx(classes.info, classes.title2),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 11\n    }\n  }, filterProfile), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 11\n    }\n  }, moment(item.expirationDate).utc().format('DD/MM/YYYY')))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    className: classes.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }, (item === null || item === void 0 ? void 0 : item.content) && parse(item.content)), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    className: classes.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }\n  }, !isEmpty(getImage) && /*#__PURE__*/React.createElement(\"img\", {\n    src: formatPathToCloudStorageUrl(getImage.path),\n    alt: \"imagem\",\n    width: \"300px\",\n    height: \"300px\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 33\n    }\n  }), /*#__PURE__*/React.createElement(Divider, {\n    classes: {\n      root: classes.divider\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    className: classes.cardImage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, map(item.files, ({\n    file\n  }, index) => /*#__PURE__*/React.createElement(Chip, {\n    key: index,\n    label: file.filename,\n    variant: \"outlined\",\n    deleteIcon: /*#__PURE__*/React.createElement(DownloadIcon, {\n      className: classes.iconImage,\n      size: 20,\n      color: colors.primary.main,\n      colorHover: colors.primary.light,\n      onClick: () => downloadFile(file),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 28\n      }\n    }),\n    onDelete: () => downloadFile(file),\n    icon: /*#__PURE__*/React.createElement(ImageOutlined, {\n      className: classes.iconImage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 22\n      }\n    }),\n    classes: {\n      root: classes.chip,\n      label: classes.labelChip\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }))));\n};\n\nPreviewMessageboard.propTypes = {\n  item: PropTypes.object.isRequired,\n  handlePopoverClose: PropTypes.func\n};\nPreviewMessageboard.defaultProps = {\n  handlePopoverClose() {}\n\n};\nexport default PreviewMessageboard;","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/components/PreviewMessageboard/PreviewMessageboard.js"],"names":["React","useCallback","useMemo","useDispatch","clsx","parse","moment","PropTypes","get","isEmpty","map","Chip","Divider","Grid","IconButton","Typography","CloseIcon","ImageOutlined","AppActions","colors","formatPathToCloudStorageUrl","DownloadIcon","useStyles","PreviewMessageboard","item","handlePopoverClose","dispatch","classes","downloadFile","path","filename","filterProfile","profile","messageProfile","option","name","join","getImage","file","contentType","container","closeButton","title2","title","info","expirationDate","utc","format","content","root","divider","cardImage","files","index","iconImage","primary","main","light","chip","label","labelChip","propTypes","object","isRequired","func","defaultProps"],"mappings":";AAAA,OAAOA,KAAP,IACEC,WADF,EAEEC,OAFF,QAGO,OAHP;AAIA,SAASC,WAAT,QAA4B,aAA5B;AAEA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,KAAP,MAAkB,mBAAlB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,GAAP,MAAgB,YAAhB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AACA,OAAOC,GAAP,MAAgB,YAAhB;AAEA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,SAAP,MAAsB,0BAAtB;AACA,OAAOC,aAAP,MAA0B,kCAA1B;AAEA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,MAAP,MAAmB,6BAAnB;AACA,SAASC,2BAAT,QAA4C,2BAA5C;AACA,OAAOC,YAAP,MAAyB,iDAAzB;AAEA,OAAOC,SAAP,MAAsB,UAAtB;;AAEA,MAAMC,mBAAmB,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA;AAAR,CAAD,KAAkC;AAC5D,QAAMC,QAAQ,GAAGzB,WAAW,CAACE,WAAW,EAAZ,EAAgB,EAAhB,CAA5B;AAEA,QAAMwB,OAAO,GAAGL,SAAS,EAAzB;AAEA,QAAMM,YAAY,GAAG3B,WAAW,CAC9B,CAAC;AAAE4B,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAD,KACEJ,QAAQ,CAACR,UAAU,CAACU,YAAX,CAAwBC,IAAxB,EAA8BC,QAA9B,CAAD,CAFoB,EAG9B,CAACJ,QAAD,CAH8B,CAAhC;AAMA,QAAMK,aAAa,GAAG7B,OAAO,CAAC,MAAM;AAClC,UAAM8B,OAAO,GAAGtB,GAAG,CAACc,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAES,cAAP,EAAwBC,MAAD;AAAA;;AAAA,aAAYA,MAAZ,aAAYA,MAAZ,2CAAYA,MAAM,CAAEF,OAAR,CAAgB,CAAhB,CAAZ,qDAAY,iBAAoBG,IAAhC;AAAA,KAAvB,CAAnB;AACA,WAAOH,OAAO,CAACI,IAAR,CAAa,KAAb,CAAP;AACD,GAH4B,EAG1B,CAACZ,IAAD,CAH0B,CAA7B;AAKA,QAAMa,QAAQ,GAAGnC,OAAO,CAAC,MAAM;AAC7B,UAAMoC,IAAI,GAAG9B,GAAG,CAACgB,IAAD,EAAO,eAAP,EAAwB,EAAxB,CAAhB;;AACA,QAAIc,IAAI,CAACC,WAAL,KAAqB,YAAzB,EAAuC;AACrC,aAAOD,IAAP;AACD;AACF,GALuB,EAKrB,CAACd,IAAD,CALqB,CAAxB;AAOA,sBACE,oBAAC,IAAD;AAAM,IAAA,SAAS,EAAGG,OAAO,CAACa,SAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAG,EAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,UAAD;AAAY,kBAAW,OAAvB;AAA+B,IAAA,SAAS,EAAGb,OAAO,CAACc,WAAnD;AAAiE,IAAA,OAAO,EAAGhB,kBAA3E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF,eAIE,oBAAC,UAAD;AAAY,IAAA,OAAO,EAAC,IAApB;AAAyB,IAAA,YAAY,MAArC;AAAsC,IAAA,SAAS,EAAGE,OAAO,CAACe,MAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIlB,IAAI,CAACmB,KADT,CAJF,eAOE,oBAAC,UAAD;AACE,IAAA,OAAO,EAAC,WADV;AAEE,IAAA,YAAY,MAFd;AAGE,IAAA,SAAS,EAAGvC,IAAI,CAACuB,OAAO,CAACiB,IAAT,EAAejB,OAAO,CAACe,MAAvB,CAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQX,aAAR,CALF,eAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQzB,MAAM,CAACkB,IAAI,CAACqB,cAAN,CAAN,CAA4BC,GAA5B,GAAkCC,MAAlC,CAAyC,YAAzC,CAAR,CANF,CAPF,CADF,eAiBE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAG,EAAhB;AAAqB,IAAA,SAAS,EAAGpB,OAAO,CAACqB,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAAAxB,IAAI,SAAJ,IAAAA,IAAI,WAAJ,YAAAA,IAAI,CAAEwB,OAAN,KAAiB3C,KAAK,CAACmB,IAAI,CAACwB,OAAN,CADzB,CAjBF,eAoBE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,EAAE,EAAG,EAAhB;AAAqB,IAAA,SAAS,EAAGrB,OAAO,CAACqB,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,CAACvC,OAAO,CAAC4B,QAAD,CAAR,iBAAsB;AAAK,IAAA,GAAG,EAAGjB,2BAA2B,CAACiB,QAAQ,CAACR,IAAV,CAAtC;AAAwD,IAAA,GAAG,EAAC,QAA5D;AAAqE,IAAA,KAAK,EAAC,OAA3E;AAAmF,IAAA,MAAM,EAAC,OAA1F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAD1B,eAEE,oBAAC,OAAD;AAAS,IAAA,OAAO,EAAG;AAAEoB,MAAAA,IAAI,EAAEtB,OAAO,CAACuB;AAAhB,KAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CApBF,eAwBE,oBAAC,IAAD;AAAM,IAAA,IAAI,MAAV;AAAW,IAAA,SAAS,EAAGvB,OAAO,CAACwB,SAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEIzC,GAAG,CAACc,IAAI,CAAC4B,KAAN,EAAa,CAAC;AAAEd,IAAAA;AAAF,GAAD,EAAWe,KAAX,kBACd,oBAAC,IAAD;AACE,IAAA,GAAG,EAAGA,KADR;AAEE,IAAA,KAAK,EAAGf,IAAI,CAACR,QAFf;AAGE,IAAA,OAAO,EAAC,UAHV;AAIE,IAAA,UAAU,eAAG,oBAAC,YAAD;AAAc,MAAA,SAAS,EAAGH,OAAO,CAAC2B,SAAlC;AAA8C,MAAA,IAAI,EAAG,EAArD;AAA0D,MAAA,KAAK,EAAGnC,MAAM,CAACoC,OAAP,CAAeC,IAAjF;AAAwF,MAAA,UAAU,EAAGrC,MAAM,CAACoC,OAAP,CAAeE,KAApH;AAA4H,MAAA,OAAO,EAAG,MAAM7B,YAAY,CAACU,IAAD,CAAxJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJf;AAKE,IAAA,QAAQ,EAAG,MAAMV,YAAY,CAACU,IAAD,CAL/B;AAME,IAAA,IAAI,eAAG,oBAAC,aAAD;AAAe,MAAA,SAAS,EAAGX,OAAO,CAAC2B,SAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MANT;AAOE,IAAA,OAAO,EAAG;AAAEL,MAAAA,IAAI,EAAEtB,OAAO,CAAC+B,IAAhB;AAAsBC,MAAAA,KAAK,EAAEhC,OAAO,CAACiC;AAArC,KAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADC,CAFP,CAxBF,CADF;AA0CD,CAjED;;AAmEArC,mBAAmB,CAACsC,SAApB,GAAgC;AAC9BrC,EAAAA,IAAI,EAAEjB,SAAS,CAACuD,MAAV,CAAiBC,UADO;AAE9BtC,EAAAA,kBAAkB,EAAElB,SAAS,CAACyD;AAFA,CAAhC;AAKAzC,mBAAmB,CAAC0C,YAApB,GAAmC;AAAExC,EAAAA,kBAAkB,GAAI,CAAE;;AAA1B,CAAnC;AAEA,eAAeF,mBAAf","sourcesContent":["import React, {\n  useCallback,\n  useMemo\n} from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport clsx from 'clsx'\nimport parse from 'html-react-parser'\nimport moment from 'moment'\nimport PropTypes from 'prop-types'\n\nimport get from 'lodash/get'\nimport isEmpty from 'lodash/isEmpty'\nimport map from 'lodash/map'\n\nimport Chip from '@material-ui/core/Chip'\nimport Divider from '@material-ui/core/Divider'\nimport Grid from '@material-ui/core/Grid'\nimport IconButton from '@material-ui/core/IconButton'\nimport Typography from '@material-ui/core/Typography'\nimport CloseIcon from '@material-ui/icons/Close'\nimport ImageOutlined from '@material-ui/icons/ImageOutlined'\n\nimport { AppActions } from '@britania-crm/stores/app'\nimport colors from '@britania-crm/styles/colors'\nimport { formatPathToCloudStorageUrl } from '@britania-crm/utils/files'\nimport DownloadIcon from '@britania-crm/web-components/Icons/DownloadIcon'\n\nimport useStyles from './styles'\n\nconst PreviewMessageboard = ({ item, handlePopoverClose }) => {\n  const dispatch = useCallback(useDispatch(), [])\n\n  const classes = useStyles()\n\n  const downloadFile = useCallback(\n    ({ path, filename }) =>\n      dispatch(AppActions.downloadFile(path, filename)),\n    [dispatch]\n  )\n\n  const filterProfile = useMemo(() => {\n    const profile = map(item?.messageProfile, (option) => option?.profile[0]?.name)\n    return profile.join(' - ')\n  }, [item])\n\n  const getImage = useMemo(() => {\n    const file = get(item, 'files[0].file', {})\n    if (file.contentType === 'image/jpeg') {\n      return file\n    }\n  }, [item])\n\n  return (\n    <Grid className={ classes.container }>\n      <Grid item xs={ 12 }>\n        <IconButton aria-label=\"close\" className={ classes.closeButton } onClick={ handlePopoverClose }>\n          <CloseIcon />\n        </IconButton>\n        <Typography variant=\"h6\" gutterBottom className={ classes.title2 }>\n          { item.title }\n        </Typography>\n        <Typography\n          variant=\"subtitle2\"\n          gutterBottom\n          className={ clsx(classes.info, classes.title2) }\n        >\n          <span>{ filterProfile }</span>\n          <span>{ moment(item.expirationDate).utc().format('DD/MM/YYYY') }</span>\n        </Typography>\n      </Grid>\n      <Grid item xs={ 12 } className={ classes.content }>\n        {item?.content && parse(item.content)}\n      </Grid>\n      <Grid item xs={ 12 } className={ classes.content }>\n        { !isEmpty(getImage) && <img src={ formatPathToCloudStorageUrl(getImage.path) } alt=\"imagem\" width=\"300px\" height=\"300px\"/> }\n        <Divider classes={ { root: classes.divider } } />\n      </Grid>\n      <Grid item className={ classes.cardImage }>\n        {\n          map(item.files, ({ file }, index) =>\n            <Chip\n              key={ index }\n              label={ file.filename }\n              variant=\"outlined\"\n              deleteIcon={ <DownloadIcon className={ classes.iconImage } size={ 20 } color={ colors.primary.main } colorHover={ colors.primary.light } onClick={ () => downloadFile(file) } /> }\n              onDelete={ () => downloadFile(file) }\n              icon={ <ImageOutlined className={ classes.iconImage } /> }\n              classes={ { root: classes.chip, label: classes.labelChip } }\n            />\n          )\n        }\n      </Grid>\n    </Grid>\n  )\n}\n\nPreviewMessageboard.propTypes = {\n  item: PropTypes.object.isRequired,\n  handlePopoverClose: PropTypes.func\n}\n\nPreviewMessageboard.defaultProps = { handlePopoverClose () {} }\n\nexport default PreviewMessageboard\n"]},"metadata":{},"sourceType":"module"}