{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/companies/screens/CompaniesListScreen/CompaniesListScreen.js\";\nimport React, { useMemo, useCallback } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { find } from 'lodash';\nimport { useT } from '@britania-crm/i18n';\nimport { useBanksList } from '@britania-crm/services/apis/bancoCentralApi';\nimport { companies as CompaniesRoutes } from '@britania-crm/services/apis/crmApi/resources/routes';\nimport { formatCpfCnpj } from '@britania-crm/utils/formatters';\nimport DataTable from '@britania-crm/web-components/DataTable';\nimport { useRoutes } from '../../../../routes/authenticated.routes';\nimport { Container } from './styles';\n\nconst CompaniesListScreen = () => {\n  const t = useT();\n  const history = useHistory();\n  const {\n    routes,\n    currentRoutePermissions\n  } = useRoutes();\n  const {\n    data: banksList\n  } = useBanksList();\n  const columns = useMemo(() => [{\n    title: t('company'),\n    field: 'name'\n  }, {\n    title: t('cnpj'),\n    field: 'cnpj',\n    render: row => formatCpfCnpj(row.cnpj)\n  }, {\n    title: t('bank'),\n    field: 'bankCode',\n    render: row => {\n      var _find;\n\n      return (_find = find(banksList, {\n        CodigoSicap: String(row.bankCode)\n      })) === null || _find === void 0 ? void 0 : _find.Nome;\n    }\n  }], [banksList, t]);\n  const onAddClick = useCallback(() => {\n    history.push(routes.newCompany.path);\n  }, [history, routes]);\n  const onEditClick = useCallback((event, row) => {\n    history.push(routes.editCompany.path, {\n      params: {\n        id: row.id\n      }\n    });\n  }, [history, routes]);\n  const onViewClick = useCallback((event, row) => {\n    history.push(routes.viewCompany.path, {\n      params: {\n        id: row.id\n      }\n    });\n  }, [history, routes]);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DataTable, {\n    data: CompaniesRoutes.getAll,\n    columns: columns,\n    title: t('companies'),\n    addTitle: t('add new {this}', {\n      gender: 'female',\n      this: t('company')\n    }),\n    onAddClick: currentRoutePermissions.INCLUIR && onAddClick,\n    onEditClick: currentRoutePermissions.EDITAR && onEditClick,\n    onRowClick: onViewClick,\n    onGoBack: history.goBack,\n    addFilterTitle: t('filter data'),\n    emptyMessage: t('buyer datagrid body empty data source message'),\n    options: {\n      search: false\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default CompaniesListScreen;","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/companies/screens/CompaniesListScreen/CompaniesListScreen.js"],"names":["React","useMemo","useCallback","useHistory","find","useT","useBanksList","companies","CompaniesRoutes","formatCpfCnpj","DataTable","useRoutes","Container","CompaniesListScreen","t","history","routes","currentRoutePermissions","data","banksList","columns","title","field","render","row","cnpj","CodigoSicap","String","bankCode","Nome","onAddClick","push","newCompany","path","onEditClick","event","editCompany","params","id","onViewClick","viewCompany","getAll","gender","this","INCLUIR","EDITAR","goBack","search"],"mappings":"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","sourcesContent":["import React, {\n  useMemo,\n  useCallback\n} from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport { find } from 'lodash'\n\nimport { useT } from '@britania-crm/i18n'\nimport { useBanksList } from '@britania-crm/services/apis/bancoCentralApi'\nimport { companies as CompaniesRoutes } from '@britania-crm/services/apis/crmApi/resources/routes'\nimport { formatCpfCnpj } from '@britania-crm/utils/formatters'\nimport DataTable from '@britania-crm/web-components/DataTable'\n\nimport { useRoutes } from '../../../../routes/authenticated.routes'\nimport { Container } from './styles'\n\nconst CompaniesListScreen = () => {\n  const t = useT()\n  const history = useHistory()\n  const { routes, currentRoutePermissions } = useRoutes()\n\n  const { data: banksList } = useBanksList()\n\n  const columns = useMemo(() => [\n    {\n      title: t('company'),\n      field: 'name'\n    },\n    {\n      title: t('cnpj'),\n      field: 'cnpj',\n      render: (row) => formatCpfCnpj(row.cnpj)\n    },\n    {\n      title: t('bank'),\n      field: 'bankCode',\n      render: (row) => find(banksList, { CodigoSicap: String(row.bankCode) })?.Nome\n    }\n\n  ], [banksList, t])\n\n  const onAddClick = useCallback(\n    () => {\n      history.push(routes.newCompany.path)\n    },\n    [history, routes]\n  )\n\n  const onEditClick = useCallback((event, row) => {\n    history.push(routes.editCompany.path, { params: { id: row.id } })\n  }, [history, routes])\n\n  const onViewClick = useCallback((event, row) => {\n    history.push(routes.viewCompany.path, { params: { id: row.id } })\n  }, [history, routes])\n\n  return (\n    <Container>\n      <DataTable\n        data={ CompaniesRoutes.getAll }\n        columns={ columns }\n        title={ t('companies') }\n        addTitle={ t('add new {this}', { gender: 'female', this: t('company') }) }\n        onAddClick={ currentRoutePermissions.INCLUIR && onAddClick }\n        onEditClick={ currentRoutePermissions.EDITAR && onEditClick }\n        onRowClick={ onViewClick }\n        onGoBack={ history.goBack }\n        addFilterTitle={ t('filter data') }\n        emptyMessage={ t('buyer datagrid body empty data source message') }\n        options={ { search: false } }\n      />\n    </Container>\n  )\n}\n\nexport default CompaniesListScreen\n"]},"metadata":{},"sourceType":"module"}