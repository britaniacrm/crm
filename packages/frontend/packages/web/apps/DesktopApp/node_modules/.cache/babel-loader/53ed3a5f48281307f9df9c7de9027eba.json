{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/workflowPanel/modals/TaskCreationModal/TaskCreationModal.js\";\nimport React, { useState, useCallback, useEffect, useRef } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport uuid from 'short-uuid';\nimport filter from 'lodash/filter';\nimport find from 'lodash/find';\nimport findIndex from 'lodash/findIndex';\nimport isEmpty from 'lodash/isEmpty';\nimport Grid from '@material-ui/core/Grid';\nimport { MSG029, MSG030 } from '@britania-crm/constants/feedbackMessages.constants';\nimport { treeTypes, errorTypes } from '@britania-crm/constants/workflow.constants';\nimport taskSchema, { INITIAL_VALUES } from '@britania-crm/forms/schemas/workflow/task.schema';\nimport I18n, { useT } from '@britania-crm/i18n';\nimport { users } from '@britania-crm/services/apis/crmApi/resources/routes';\nimport { AppActions } from '@britania-crm/stores/app';\nimport { getAllProfiles } from '@britania-crm/stores/profiles/profiles.selectors';\nimport Button from '@britania-crm/web-components/Button';\nimport Form from '@britania-crm/web-components/Form';\nimport InputAutocomplete from '@britania-crm/web-components/InputAutocomplete';\nimport InputNumber from '@britania-crm/web-components/InputNumber';\nimport InputSelect from '@britania-crm/web-components/InputSelect';\nimport InputText from '@britania-crm/web-components/InputText';\nimport Modal from '@britania-crm/web-components/Modal';\nimport TreeView from '@britania-crm/web-components/TreeView';\nimport { responseValidationSchema, conditionValidationSchema } from '@britania-crm/web-components/TreeView/validationSchemas';\nimport { useStyles, TreeViewArea, Footer } from './styles';\n\nconst TaskCreationModal = props => {\n  const {\n    id,\n    open,\n    handleClose,\n    task,\n    allTasks,\n    onSubmit\n  } = props;\n  const t = useT();\n  const profiles = useSelector(getAllProfiles);\n  const formRef = useRef(null);\n  const [mounted, setMounted] = useState(false);\n  const [items, setItems] = useState((task === null || task === void 0 ? void 0 : task.children) || []);\n  const classes = useStyles();\n  const dispatch = useCallback(useDispatch(), []);\n  const handleSubmit = useCallback(async values => {\n    const responses = filter(items, item => {\n      var _item$type;\n\n      return ((_item$type = item.type) === null || _item$type === void 0 ? void 0 : _item$type.type) === treeTypes.RESPONSE.type;\n    });\n\n    if (isEmpty(responses)) {\n      return dispatch(AppActions.addAlert({\n        type: 'error',\n        message: MSG029\n      }));\n    }\n\n    if (find(allTasks, item => item.title === values.title && item.title !== task.title)) {\n      formRef.current.setFieldError('title', t('the title entered already exists in another task'));\n      return dispatch(AppActions.addAlert({\n        type: 'error',\n        message: errorTypes.WORKFLOW_INVALID_TITLES\n      }));\n    }\n\n    const conditions = filter(items, item => {\n      var _item$type2;\n\n      return ((_item$type2 = item.type) === null || _item$type2 === void 0 ? void 0 : _item$type2.type) === treeTypes.CONDITION.type;\n    });\n    const responsesAreValid = await responseValidationSchema.isValid(responses);\n    const conditionsAreValid = await conditionValidationSchema.isValid(conditions);\n\n    if (!responsesAreValid || !conditionsAreValid) {\n      return dispatch(AppActions.addAlert({\n        type: 'error',\n        message: MSG030\n      }));\n    }\n\n    onSubmit(prevState => {\n      const tmp = [...prevState];\n      const itemIndex = findIndex(prevState, item => item.id === task.id);\n\n      if (itemIndex !== -1) {\n        var _values$user, _values$userAlternate;\n\n        tmp[itemIndex] = { ...tmp[itemIndex],\n          title: values.title,\n          profile: find(profiles, item => item.id === values.systemProfile),\n          user: values.user,\n          userId: (_values$user = values.user) === null || _values$user === void 0 ? void 0 : _values$user.id,\n          userAlternate: values.userAlternate,\n          userAlternateId: (_values$userAlternate = values.userAlternate) === null || _values$userAlternate === void 0 ? void 0 : _values$userAlternate.id,\n          deadline: Number(values.slaTime),\n          children: items\n        };\n      } else {\n        var _values$user2, _values$userAlternate2;\n\n        tmp.push({\n          id: uuid().new(),\n          type: treeTypes.TASK,\n          title: values.title,\n          children: items,\n          profile: find(profiles, item => item.id === values.systemProfile),\n          user: values.user,\n          userId: (_values$user2 = values.user) === null || _values$user2 === void 0 ? void 0 : _values$user2.id,\n          userAlternate: values.userAlternate,\n          deadline: Number(values.slaTime),\n          userAlternateId: (_values$userAlternate2 = values.userAlternate) === null || _values$userAlternate2 === void 0 ? void 0 : _values$userAlternate2.id\n        });\n      }\n\n      return tmp;\n    });\n    handleClose();\n  }, [allTasks, dispatch, handleClose, items, onSubmit, profiles, t, task.id, task.title]);\n  const clearForm = useCallback(() => {\n    formRef.current.reset();\n    setItems([]);\n  }, []);\n  useEffect(() => {\n    if (mounted && !isEmpty(task)) {\n      var _task$profile;\n\n      formRef.current.setData({\n        title: task.title || '',\n        systemProfile: ((_task$profile = task.profile) === null || _task$profile === void 0 ? void 0 : _task$profile.id) || INITIAL_VALUES.systemProfile,\n        user: task.userId ? task.user : INITIAL_VALUES.user,\n        userAlternate: task.userAlternateId ? task.userAlternate : INITIAL_VALUES.userAlternate,\n        slaTime: String(task.deadline) || ''\n      });\n    } else if (!mounted) {\n      setMounted(true);\n    }\n  }, [mounted, task]);\n  return /*#__PURE__*/React.createElement(Modal, {\n    id: id,\n    open: open,\n    title: t('task and response registration'),\n    onClose: handleClose,\n    maxWidth: \"lg\",\n    fullWidth: true,\n    disableFullScreen: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    ref: formRef,\n    schemaConstructor: taskSchema,\n    defaultValues: INITIAL_VALUES,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    md: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputText, {\n    name: \"title\",\n    label: t('title'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    md: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputSelect, {\n    name: \"systemProfile\",\n    label: t('system profile'),\n    options: profiles,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    md: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputAutocomplete, {\n    name: \"user\",\n    label: t('user', {\n      howMany: 1\n    }),\n    url: users.autoComplete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    md: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputAutocomplete, {\n    name: \"userAlternate\",\n    label: t('alternate', {\n      howMany: 1\n    }),\n    url: users.autoComplete,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 15\n    }\n  })), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    sm: 12,\n    md: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(InputNumber, {\n    name: \"slaTime\",\n    label: t('sla time'),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 15\n    }\n  }))), /*#__PURE__*/React.createElement(TreeViewArea, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(TreeView, {\n    items: items,\n    onChange: setItems,\n    forms: [],\n    fields: [],\n    conditions: [],\n    allTasks: allTasks,\n    task: task,\n    id: \"task-creation-tree-view\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 225,\n      columnNumber: 13\n    }\n  })), /*#__PURE__*/React.createElement(Footer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(I18n, {\n    as: Button,\n    variant: \"text\",\n    color: \"secondary\",\n    onClick: clearForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 13\n    }\n  }, \"clean\"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(I18n, {\n    as: Button,\n    variant: \"outlined\",\n    color: \"secondary\",\n    onClick: handleClose,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 15\n    }\n  }, \"cancel\"), /*#__PURE__*/React.createElement(I18n, {\n    as: Button,\n    color: \"secondary\",\n    className: classes.blueButton,\n    onClick: () => formRef.current.submit(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254,\n      columnNumber: 15\n    }\n  }, \"save task\"))))));\n};\n\nTaskCreationModal.propTypes = {\n  id: PropTypes.string.isRequired,\n  open: PropTypes.bool.isRequired,\n  handleClose: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  task: PropTypes.object,\n  allTasks: PropTypes.array\n};\nTaskCreationModal.defaultProps = {\n  task: {},\n  allTasks: []\n};\nexport default TaskCreationModal;","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/workflowPanel/modals/TaskCreationModal/TaskCreationModal.js"],"names":["React","useState","useCallback","useEffect","useRef","useSelector","useDispatch","PropTypes","uuid","filter","find","findIndex","isEmpty","Grid","MSG029","MSG030","treeTypes","errorTypes","taskSchema","INITIAL_VALUES","I18n","useT","users","AppActions","getAllProfiles","Button","Form","InputAutocomplete","InputNumber","InputSelect","InputText","Modal","TreeView","responseValidationSchema","conditionValidationSchema","useStyles","TreeViewArea","Footer","TaskCreationModal","props","id","open","handleClose","task","allTasks","onSubmit","t","profiles","formRef","mounted","setMounted","items","setItems","children","classes","dispatch","handleSubmit","values","responses","item","type","RESPONSE","addAlert","message","title","current","setFieldError","WORKFLOW_INVALID_TITLES","conditions","CONDITION","responsesAreValid","isValid","conditionsAreValid","prevState","tmp","itemIndex","profile","systemProfile","user","userId","userAlternate","userAlternateId","deadline","Number","slaTime","push","new","TASK","clearForm","reset","setData","String","howMany","autoComplete","blueButton","submit","propTypes","string","isRequired","bool","func","object","array","defaultProps"],"mappings":"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","sourcesContent":["import React, {\n  useState,\n  useCallback,\n  useEffect,\n  useRef\n} from 'react'\nimport {\n  useSelector,\n  useDispatch\n} from 'react-redux'\n\nimport PropTypes from 'prop-types'\nimport uuid from 'short-uuid'\n\nimport filter from 'lodash/filter'\nimport find from 'lodash/find'\nimport findIndex from 'lodash/findIndex'\nimport isEmpty from 'lodash/isEmpty'\n\nimport Grid from '@material-ui/core/Grid'\n\nimport {\n  MSG029,\n  MSG030\n} from '@britania-crm/constants/feedbackMessages.constants'\nimport {\n  treeTypes,\n  errorTypes\n} from '@britania-crm/constants/workflow.constants'\nimport taskSchema, { INITIAL_VALUES } from '@britania-crm/forms/schemas/workflow/task.schema'\nimport I18n, { useT } from '@britania-crm/i18n'\nimport { users } from '@britania-crm/services/apis/crmApi/resources/routes'\nimport { AppActions } from '@britania-crm/stores/app'\nimport { getAllProfiles } from '@britania-crm/stores/profiles/profiles.selectors'\nimport Button from '@britania-crm/web-components/Button'\nimport Form from '@britania-crm/web-components/Form'\nimport InputAutocomplete from '@britania-crm/web-components/InputAutocomplete'\nimport InputNumber from '@britania-crm/web-components/InputNumber'\nimport InputSelect from '@britania-crm/web-components/InputSelect'\nimport InputText from '@britania-crm/web-components/InputText'\nimport Modal from '@britania-crm/web-components/Modal'\nimport TreeView from '@britania-crm/web-components/TreeView'\nimport {\n  responseValidationSchema,\n  conditionValidationSchema\n} from '@britania-crm/web-components/TreeView/validationSchemas'\n\nimport {\n  useStyles,\n  TreeViewArea,\n  Footer\n} from './styles'\n\nconst TaskCreationModal = (props) => {\n  const {\n    id, open, handleClose, task, allTasks, onSubmit\n  } = props\n  const t = useT()\n  const profiles = useSelector(getAllProfiles)\n\n  const formRef = useRef(null)\n\n  const [mounted, setMounted] = useState(false)\n  const [items, setItems] = useState(task?.children || [])\n\n  const classes = useStyles()\n  const dispatch = useCallback(useDispatch(), [])\n\n  const handleSubmit = useCallback(\n    async (values) => {\n      const responses = filter(items, (item) => item.type?.type === treeTypes.RESPONSE.type)\n\n      if (isEmpty(responses)) {\n        return dispatch(AppActions.addAlert({\n          type: 'error',\n          message: MSG029\n        }))\n      }\n\n      if (find(allTasks, (item) => item.title === values.title && item.title !== task.title)) {\n        formRef.current.setFieldError('title', t('the title entered already exists in another task'))\n        return dispatch(AppActions.addAlert({\n          type: 'error',\n          message: errorTypes.WORKFLOW_INVALID_TITLES\n        }))\n      }\n\n      const conditions = filter(items, (item) => item.type?.type === treeTypes.CONDITION.type)\n\n      const responsesAreValid = await responseValidationSchema.isValid(responses)\n      const conditionsAreValid = await conditionValidationSchema.isValid(conditions)\n\n      if (!responsesAreValid || !conditionsAreValid) {\n        return dispatch(AppActions.addAlert({\n          type: 'error',\n          message: MSG030\n        }))\n      }\n\n      onSubmit((prevState) => {\n        const tmp = [...prevState]\n\n        const itemIndex = findIndex(prevState, (item) => item.id === task.id)\n\n        if (itemIndex !== -1) {\n          tmp[itemIndex] = {\n            ...tmp[itemIndex],\n            title: values.title,\n            profile: find(profiles, (item) => item.id === values.systemProfile),\n            user: values.user,\n            userId: values.user?.id,\n            userAlternate: values.userAlternate,\n            userAlternateId: values.userAlternate?.id,\n            deadline: Number(values.slaTime),\n            children: items\n          }\n        } else {\n          tmp.push({\n            id: uuid().new(),\n            type: treeTypes.TASK,\n            title: values.title,\n            children: items,\n            profile: find(profiles, (item) => item.id === values.systemProfile),\n            user: values.user,\n            userId: values.user?.id,\n            userAlternate: values.userAlternate,\n            deadline: Number(values.slaTime),\n            userAlternateId: values.userAlternate?.id\n          })\n        }\n\n        return tmp\n      })\n\n      handleClose()\n    },\n    [allTasks, dispatch, handleClose, items, onSubmit, profiles, t, task.id, task.title]\n  )\n\n  const clearForm = useCallback(\n    () => {\n      formRef.current.reset()\n      setItems([])\n    },\n    []\n  )\n\n  useEffect(\n    () => {\n      if (mounted && !isEmpty(task)) {\n        formRef.current.setData({\n          title: task.title || '',\n          systemProfile: task.profile?.id || INITIAL_VALUES.systemProfile,\n          user: task.userId ? task.user : INITIAL_VALUES.user,\n          userAlternate: task.userAlternateId ? task.userAlternate : INITIAL_VALUES.userAlternate,\n          slaTime: String(task.deadline) || ''\n        })\n      } else if (!mounted) {\n        setMounted(true)\n      }\n    },\n    [mounted, task]\n  )\n\n  return (\n    <Modal\n      id={ id }\n      open={ open }\n      title={ t('task and response registration') }\n      onClose={ handleClose }\n      maxWidth=\"lg\"\n      fullWidth\n      disableFullScreen\n    >\n      <Form\n        ref={ formRef }\n        schemaConstructor={ taskSchema }\n        defaultValues={ INITIAL_VALUES }\n        onSubmit={ handleSubmit }\n      >\n        <>\n          <Grid container spacing={ 1 }>\n\n            <Grid item sm={ 12 } md>\n              <InputText\n                name=\"title\"\n                label={ t('title') }\n              />\n            </Grid>\n\n            <Grid item sm={ 12 } md>\n              <InputSelect\n                name=\"systemProfile\"\n                label={ t('system profile') }\n                options={ profiles }\n              />\n            </Grid>\n\n            <Grid item sm={ 12 } md>\n              <InputAutocomplete\n                name=\"user\"\n                label={ t('user', { howMany: 1 }) }\n                url={ users.autoComplete }\n              />\n            </Grid>\n\n            <Grid item sm={ 12 } md>\n              <InputAutocomplete\n                name=\"userAlternate\"\n                label={ t('alternate', { howMany: 1 }) }\n                url={ users.autoComplete }\n              />\n            </Grid>\n\n            <Grid item sm={ 12 } md>\n              <InputNumber\n                name=\"slaTime\"\n                label={ t('sla time') }\n              />\n            </Grid>\n\n          </Grid>\n\n          <TreeViewArea>\n            <TreeView\n              items={ items }\n              onChange={ setItems }\n              forms={ [] }\n              fields={ [] }\n              conditions={ [] }\n              allTasks={ allTasks }\n              task={ task }\n              id=\"task-creation-tree-view\"\n            />\n          </TreeViewArea>\n\n          <Footer>\n            <I18n as={ Button }\n              variant=\"text\"\n              color=\"secondary\"\n              onClick={ clearForm }\n            >\n              clean\n            </I18n>\n            <div>\n              <I18n\n                as={ Button }\n                variant=\"outlined\"\n                color=\"secondary\"\n                onClick={ handleClose }\n              >\n                cancel\n              </I18n>\n              <I18n\n                as={ Button }\n                color=\"secondary\"\n                className={ classes.blueButton }\n                onClick={ () => formRef.current.submit() }\n              >\n                save task\n              </I18n>\n            </div>\n          </Footer>\n        </>\n      </Form>\n    </Modal>\n  )\n}\n\nTaskCreationModal.propTypes = {\n  id: PropTypes.string.isRequired,\n  open: PropTypes.bool.isRequired,\n  handleClose: PropTypes.func.isRequired,\n  onSubmit: PropTypes.func.isRequired,\n  task: PropTypes.object,\n  allTasks: PropTypes.array\n}\n\nTaskCreationModal.defaultProps = {\n  task: {},\n  allTasks: []\n}\n\nexport default TaskCreationModal\n"]},"metadata":{},"sourceType":"module"}