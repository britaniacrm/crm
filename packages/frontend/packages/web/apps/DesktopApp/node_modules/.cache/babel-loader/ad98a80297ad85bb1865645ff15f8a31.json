{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/fan/screens/FanListScreen/FanListScreen.js\";\nimport React, { useCallback, useMemo, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport find from 'lodash/find';\nimport { useT } from '@britania-crm/i18n';\nimport { fan as fanCrmRoutes, linesMaster as lineMasterCrmRoutes } from '@britania-crm/services/apis/crmApi/resources/routes';\nimport useCrmApi from '@britania-crm/services/hooks/useCrmApi';\nimport { formatBackDateToFriendlyFormat } from '@britania-crm/utils/date';\nimport DataTable from '@britania-crm/web-components/DataTable';\nimport PageFilter from '@britania-crm/web-components/PageFilter';\nimport { useRoutes } from '@britania-crm/web-src/routes/authenticated.routes';\nimport FanFormFilter from '../../containers/FanFormFilter';\nimport { Container } from './styles';\n\nconst FanListScreen = () => {\n  const t = useT();\n  const {\n    routes,\n    currentRoutePermissions\n  } = useRoutes();\n  const history = useHistory();\n  const {\n    data: linesMasterFromApi\n  } = useCrmApi(lineMasterCrmRoutes.getAll);\n  const [filters, setFilters] = useState({\n    company: 'BRITÂNIA'\n  });\n  const columns = useMemo(() => [{\n    title: t('number fan'),\n    field: 'number'\n  }, {\n    title: t('company'),\n    field: 'company'\n  }, {\n    title: t('matrix'),\n    field: 'parentCompanyName'\n  }, {\n    title: t('responsible', {\n      howMany: 1\n    }),\n    field: 'responsible'\n  }, {\n    title: t('regional manager'),\n    field: 'regionalManager'\n  }, {\n    title: t('board'),\n    field: 'directorship',\n    render: row => {\n      var _find;\n\n      return (_find = find(linesMasterFromApi, ({\n        masterLineCode\n      }) => masterLineCode === row.directorship)) === null || _find === void 0 ? void 0 : _find.masterLineDescription;\n    }\n  }, {\n    title: t('start date'),\n    field: 'startDate',\n    render: row => formatBackDateToFriendlyFormat(row.startDate)\n  }, {\n    title: t('end date'),\n    field: 'endDate',\n    render: row => formatBackDateToFriendlyFormat(row.endDate)\n  }, {\n    title: t('porcentage'),\n    field: 'porcentage'\n  }], [linesMasterFromApi, t]);\n  const onRowClick = useCallback((event, row) => {\n    history.push(routes.viewFan.path, {\n      params: {\n        id: row.id\n      }\n    });\n  }, [history, routes]);\n  const handleFilter = useCallback(values => {\n    setFilters(values);\n  }, []);\n  const onCreateClick = useCallback(() => {\n    history.push(routes.newFan.path);\n  }, [history, routes]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(PageFilter, {\n    handleFilter: handleFilter,\n    Form: FanFormFilter,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(DataTable, {\n    data: fanCrmRoutes.getAll,\n    filters: filters,\n    columns: columns,\n    title: t('register of {this}', {\n      this: 'FAN'\n    }),\n    addTitle: t('add new {this}', {\n      gender: 'male',\n      this: 'FAN'\n    }),\n    onAddClick: currentRoutePermissions.INCLUIR && onCreateClick,\n    onRowClick: onRowClick,\n    onGoBack: history.goBack,\n    addFilterTitle: t('filter data'),\n    emptyMessage: t('{this} datagrid body empty data source message', {\n      this: 'FAN'\n    }),\n    options: {\n      search: false\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 9\n    }\n  })));\n};\n\nexport default FanListScreen;","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/fan/screens/FanListScreen/FanListScreen.js"],"names":["React","useCallback","useMemo","useState","useHistory","find","useT","fan","fanCrmRoutes","linesMaster","lineMasterCrmRoutes","useCrmApi","formatBackDateToFriendlyFormat","DataTable","PageFilter","useRoutes","FanFormFilter","Container","FanListScreen","t","routes","currentRoutePermissions","history","data","linesMasterFromApi","getAll","filters","setFilters","company","columns","title","field","howMany","render","row","masterLineCode","directorship","masterLineDescription","startDate","endDate","onRowClick","event","push","viewFan","path","params","id","handleFilter","values","onCreateClick","newFan","this","gender","INCLUIR","goBack","search"],"mappings":"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","sourcesContent":["import React, {\n  useCallback,\n  useMemo,\n  useState\n} from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport find from 'lodash/find'\n\nimport { useT } from '@britania-crm/i18n'\nimport {\n  fan as fanCrmRoutes,\n  linesMaster as lineMasterCrmRoutes\n} from '@britania-crm/services/apis/crmApi/resources/routes'\nimport useCrmApi from '@britania-crm/services/hooks/useCrmApi'\nimport { formatBackDateToFriendlyFormat } from '@britania-crm/utils/date'\nimport DataTable from '@britania-crm/web-components/DataTable'\nimport PageFilter from '@britania-crm/web-components/PageFilter'\nimport { useRoutes } from '@britania-crm/web-src/routes/authenticated.routes'\n\nimport FanFormFilter from '../../containers/FanFormFilter'\nimport { Container } from './styles'\n\nconst FanListScreen = () => {\n  const t = useT()\n  const { routes, currentRoutePermissions } = useRoutes()\n  const history = useHistory()\n\n  const { data: linesMasterFromApi } = useCrmApi(lineMasterCrmRoutes.getAll)\n\n  const [filters, setFilters] = useState({ company: 'BRITÂNIA' })\n\n  const columns = useMemo(() => [\n    {\n      title: t('number fan'),\n      field: 'number'\n    },\n    {\n      title: t('company'),\n      field: 'company'\n    },\n    {\n      title: t('matrix'),\n      field: 'parentCompanyName'\n    },\n    {\n      title: t('responsible', { howMany: 1 }),\n      field: 'responsible'\n    },\n    {\n      title: t('regional manager'),\n      field: 'regionalManager'\n    },\n    {\n      title: t('board'),\n      field: 'directorship',\n      render: (row) => find(linesMasterFromApi, ({ masterLineCode }) => masterLineCode === row.directorship)?.masterLineDescription\n    },\n    {\n      title: t('start date'),\n      field: 'startDate',\n      render: (row) => formatBackDateToFriendlyFormat(row.startDate)\n    },\n    {\n      title: t('end date'),\n      field: 'endDate',\n      render: (row) => formatBackDateToFriendlyFormat(row.endDate)\n    },\n    {\n      title: t('porcentage'),\n      field: 'porcentage'\n    }\n  ], [linesMasterFromApi, t])\n\n  const onRowClick = useCallback((event, row) => {\n    history.push(routes.viewFan.path, { params: { id: row.id } })\n  }, [history, routes])\n\n  const handleFilter = useCallback(\n    (values) => {\n      setFilters(values)\n    },\n    []\n  )\n\n  const onCreateClick = useCallback(\n    () => {\n      history.push(routes.newFan.path)\n    },\n    [history, routes]\n  )\n\n  return (\n    <>\n      <PageFilter\n        handleFilter={ handleFilter }\n        Form={ FanFormFilter }\n      />\n      <Container>\n        <DataTable\n          data={ fanCrmRoutes.getAll }\n          filters={ filters }\n          columns={ columns }\n          title={ t('register of {this}', { this: 'FAN' }) }\n          addTitle={ t('add new {this}', {\n            gender: 'male',\n            this: 'FAN'\n          }) }\n          onAddClick={ currentRoutePermissions.INCLUIR && onCreateClick }\n          onRowClick={ onRowClick }\n          onGoBack={ history.goBack }\n          addFilterTitle={ t('filter data') }\n          emptyMessage={ t('{this} datagrid body empty data source message', { this: 'FAN' }) }\n          options={ { search: false } }\n        />\n      </Container>\n    </>\n  )\n}\n\nexport default FanListScreen\n"]},"metadata":{},"sourceType":"module"}