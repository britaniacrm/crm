{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = suspendSaga;\n/**\n * Custom wrapper for the saga middleware that can skip firing the saga.\n *\n * In case of the offline action we do want it to be dispatched\n * so that the reducer updates the local state in a optimistic manner.\n *\n * However since we know for sure that the device is offline\n * the corresponding saga should not be fired.\n *\n * For the action to skip the saga it should have:\n * ```\n * skipSaga: true\n * ```\n * property set.\n *\n * Note: One should wrap the existing saga middleware for this to work correctly,\n * for example:\n * ```\n * const sagaMiddleware = createSagaMiddleware()\n * const suspendSagaMiddleware = suspendSaga(sagaMiddleware)\n * ```\n *\n * @param {Function} middleware Saga middleware.\n */\n\nfunction suspendSaga(middleware) {\n  return function (store) {\n    return function (next) {\n      var delegate = middleware(store)(next);\n      return function (action) {\n        var skipSaga = action.skipSaga;\n\n        if (skipSaga) {\n          return next(action);\n        }\n\n        return delegate(action);\n      };\n    };\n  };\n}","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/node_modules/redux-offline-queue/lib/suspendSaga.js"],"names":["Object","defineProperty","exports","value","default","suspendSaga","middleware","store","next","delegate","action","skipSaga"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkBC,WAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,WAAT,CAAqBC,UAArB,EAAiC;AAC/B,SAAO,UAAUC,KAAV,EAAiB;AACtB,WAAO,UAAUC,IAAV,EAAgB;AACrB,UAAIC,QAAQ,GAAGH,UAAU,CAACC,KAAD,CAAV,CAAkBC,IAAlB,CAAf;AAEA,aAAO,UAAUE,MAAV,EAAkB;AACvB,YAAIC,QAAQ,GAAGD,MAAM,CAACC,QAAtB;;AAEA,YAAIA,QAAJ,EAAc;AACZ,iBAAOH,IAAI,CAACE,MAAD,CAAX;AACD;;AACD,eAAOD,QAAQ,CAACC,MAAD,CAAf;AACD,OAPD;AAQD,KAXD;AAYD,GAbD;AAcD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = suspendSaga;\n/**\n * Custom wrapper for the saga middleware that can skip firing the saga.\n *\n * In case of the offline action we do want it to be dispatched\n * so that the reducer updates the local state in a optimistic manner.\n *\n * However since we know for sure that the device is offline\n * the corresponding saga should not be fired.\n *\n * For the action to skip the saga it should have:\n * ```\n * skipSaga: true\n * ```\n * property set.\n *\n * Note: One should wrap the existing saga middleware for this to work correctly,\n * for example:\n * ```\n * const sagaMiddleware = createSagaMiddleware()\n * const suspendSagaMiddleware = suspendSaga(sagaMiddleware)\n * ```\n *\n * @param {Function} middleware Saga middleware.\n */\nfunction suspendSaga(middleware) {\n  return function (store) {\n    return function (next) {\n      var delegate = middleware(store)(next);\n\n      return function (action) {\n        var skipSaga = action.skipSaga;\n\n        if (skipSaga) {\n          return next(action);\n        }\n        return delegate(action);\n      };\n    };\n  };\n}"]},"metadata":{},"sourceType":"script"}