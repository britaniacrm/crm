{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/components/TextField/TextFieldForm.js\";\nimport React, { forwardRef, useCallback } from 'react';\nimport PropTypes from 'prop-types';\nimport { FieldProvider, useField } from '@britania-crm/forms';\nimport TextFieldStyled from './TextFieldStyled';\n\nconst TextFieldForm = props => {\n  const {\n    zIndex,\n    setValue,\n    ...rest\n  } = props;\n  const {\n    mask,\n    error,\n    fieldRef,\n    handleBlur,\n    required\n  } = useField();\n  const handleChange = useCallback(event => setValue(event.target.value), [setValue]);\n  return /*#__PURE__*/React.createElement(TextFieldStyled, Object.assign({\n    ref: fieldRef\n  }, rest, {\n    onChange: handleChange,\n    onBlur: handleBlur,\n    mask: mask,\n    error: error,\n    required: required,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }));\n};\n\nTextFieldForm.propTypes = {\n  setValue: PropTypes.func.isRequired,\n  zIndex: PropTypes.number\n};\nTextFieldForm.defaultProps = {\n  zIndex: undefined\n};\nconst Field = forwardRef(({\n  path,\n  ...props\n}, ref) => /*#__PURE__*/React.createElement(FieldProvider, Object.assign({\n  ref: ref\n}, props, {\n  registerFieldOptions: {\n    path\n  },\n  FieldComponent: TextFieldForm,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 3\n  }\n})));\nField.propTypes = {\n  name: PropTypes.string.isRequired,\n  disabled: PropTypes.bool,\n  onChange: PropTypes.func,\n  onBlur: PropTypes.func,\n  path: PropTypes.string,\n  defaultValue: PropTypes.any,\n  numberFormatProps: PropTypes.object,\n  helperText: PropTypes.string,\n  validateOnBlur: PropTypes.bool\n};\nField.defaultProps = {\n  disabled: false,\n\n  onChange() {},\n\n  onValueChange() {},\n\n  onBlur() {},\n\n  path: 'value',\n  defaultValue: '',\n  numberFormatProps: undefined,\n  helperText: null,\n  validateOnBlur: true\n};\nexport default Field;","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/components/TextField/TextFieldForm.js"],"names":["React","forwardRef","useCallback","PropTypes","FieldProvider","useField","TextFieldStyled","TextFieldForm","props","zIndex","setValue","rest","mask","error","fieldRef","handleBlur","required","handleChange","event","target","value","propTypes","func","isRequired","number","defaultProps","undefined","Field","path","ref","name","string","disabled","bool","onChange","onBlur","defaultValue","any","numberFormatProps","object","helperText","validateOnBlur","onValueChange"],"mappings":";AAAA,OAAOA,KAAP,IACEC,UADF,EAEEC,WAFF,QAGO,OAHP;AAKA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,SACEC,aADF,EAEEC,QAFF,QAGO,qBAHP;AAKA,OAAOC,eAAP,MAA4B,mBAA5B;;AAEA,MAAMC,aAAa,GAAIC,KAAD,IAAW;AAC/B,QAAM;AACJC,IAAAA,MADI;AAEJC,IAAAA,QAFI;AAGJ,OAAGC;AAHC,MAIFH,KAJJ;AAMA,QAAM;AACJI,IAAAA,IADI;AAEJC,IAAAA,KAFI;AAGJC,IAAAA,QAHI;AAIJC,IAAAA,UAJI;AAKJC,IAAAA;AALI,MAMFX,QAAQ,EANZ;AAQA,QAAMY,YAAY,GAAGf,WAAW,CAC7BgB,KAAD,IAAWR,QAAQ,CAACQ,KAAK,CAACC,MAAN,CAAaC,KAAd,CADW,EAE9B,CAACV,QAAD,CAF8B,CAAhC;AAKA,sBACE,oBAAC,eAAD;AACE,IAAA,GAAG,EAAGI;AADR,KAEOH,IAFP;AAGE,IAAA,QAAQ,EAAGM,YAHb;AAIE,IAAA,MAAM,EAAGF,UAJX;AAKE,IAAA,IAAI,EAAGH,IALT;AAME,IAAA,KAAK,EAAGC,KANV;AAOE,IAAA,QAAQ,EAAGG,QAPb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF;AAWD,CA/BD;;AAiCAT,aAAa,CAACc,SAAd,GAA0B;AACxBX,EAAAA,QAAQ,EAAEP,SAAS,CAACmB,IAAV,CAAeC,UADD;AAExBd,EAAAA,MAAM,EAAEN,SAAS,CAACqB;AAFM,CAA1B;AAKAjB,aAAa,CAACkB,YAAd,GAA6B;AAAEhB,EAAAA,MAAM,EAAEiB;AAAV,CAA7B;AAEA,MAAMC,KAAK,GAAG1B,UAAU,CAAC,CAAC;AAAE2B,EAAAA,IAAF;AAAQ,KAAGpB;AAAX,CAAD,EAAqBqB,GAArB,kBACvB,oBAAC,aAAD;AACE,EAAA,GAAG,EAAGA;AADR,GAEOrB,KAFP;AAGE,EAAA,oBAAoB,EAAG;AAAEoB,IAAAA;AAAF,GAHzB;AAIE,EAAA,cAAc,EAAGrB,aAJnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADsB,CAAxB;AASAoB,KAAK,CAACN,SAAN,GAAkB;AAChBS,EAAAA,IAAI,EAAE3B,SAAS,CAAC4B,MAAV,CAAiBR,UADP;AAEhBS,EAAAA,QAAQ,EAAE7B,SAAS,CAAC8B,IAFJ;AAGhBC,EAAAA,QAAQ,EAAE/B,SAAS,CAACmB,IAHJ;AAIhBa,EAAAA,MAAM,EAAEhC,SAAS,CAACmB,IAJF;AAKhBM,EAAAA,IAAI,EAAEzB,SAAS,CAAC4B,MALA;AAMhBK,EAAAA,YAAY,EAAEjC,SAAS,CAACkC,GANR;AAOhBC,EAAAA,iBAAiB,EAAEnC,SAAS,CAACoC,MAPb;AAQhBC,EAAAA,UAAU,EAAErC,SAAS,CAAC4B,MARN;AAShBU,EAAAA,cAAc,EAAEtC,SAAS,CAAC8B;AATV,CAAlB;AAYAN,KAAK,CAACF,YAAN,GAAqB;AACnBO,EAAAA,QAAQ,EAAE,KADS;;AAEnBE,EAAAA,QAAQ,GAAI,CAAE,CAFK;;AAGnBQ,EAAAA,aAAa,GAAI,CAAE,CAHA;;AAInBP,EAAAA,MAAM,GAAI,CAAE,CAJO;;AAKnBP,EAAAA,IAAI,EAAE,OALa;AAMnBQ,EAAAA,YAAY,EAAE,EANK;AAOnBE,EAAAA,iBAAiB,EAAEZ,SAPA;AAQnBc,EAAAA,UAAU,EAAE,IARO;AASnBC,EAAAA,cAAc,EAAE;AATG,CAArB;AAYA,eAAed,KAAf","sourcesContent":["import React, {\n  forwardRef,\n  useCallback\n} from 'react'\n\nimport PropTypes from 'prop-types'\n\nimport {\n  FieldProvider,\n  useField\n} from '@britania-crm/forms'\n\nimport TextFieldStyled from './TextFieldStyled'\n\nconst TextFieldForm = (props) => {\n  const {\n    zIndex,\n    setValue,\n    ...rest\n  } = props\n\n  const {\n    mask,\n    error,\n    fieldRef,\n    handleBlur,\n    required\n  } = useField()\n\n  const handleChange = useCallback(\n    (event) => setValue(event.target.value),\n    [setValue]\n  )\n\n  return (\n    <TextFieldStyled\n      ref={ fieldRef }\n      { ...rest }\n      onChange={ handleChange }\n      onBlur={ handleBlur }\n      mask={ mask }\n      error={ error }\n      required={ required }\n    />\n  )\n}\n\nTextFieldForm.propTypes = {\n  setValue: PropTypes.func.isRequired,\n  zIndex: PropTypes.number\n}\n\nTextFieldForm.defaultProps = { zIndex: undefined }\n\nconst Field = forwardRef(({ path, ...props }, ref) => (\n  <FieldProvider\n    ref={ ref }\n    { ...props }\n    registerFieldOptions={ { path } }\n    FieldComponent={ TextFieldForm }\n  />\n))\n\nField.propTypes = {\n  name: PropTypes.string.isRequired,\n  disabled: PropTypes.bool,\n  onChange: PropTypes.func,\n  onBlur: PropTypes.func,\n  path: PropTypes.string,\n  defaultValue: PropTypes.any,\n  numberFormatProps: PropTypes.object,\n  helperText: PropTypes.string,\n  validateOnBlur: PropTypes.bool\n}\n\nField.defaultProps = {\n  disabled: false,\n  onChange () {},\n  onValueChange () {},\n  onBlur () {},\n  path: 'value',\n  defaultValue: '',\n  numberFormatProps: undefined,\n  helperText: null,\n  validateOnBlur: true\n}\n\nexport default Field\n"]},"metadata":{},"sourceType":"module"}