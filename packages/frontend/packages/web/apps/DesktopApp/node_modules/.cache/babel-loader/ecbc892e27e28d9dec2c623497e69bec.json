{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/workflowPanel/modals/FilterWorkflowPanelModal/FilterWorkflowPanelModal.js\";\nimport React, { useCallback, useRef, useMemo, useEffect, useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport isEqual from 'lodash/isEqual';\nimport omitBy from 'lodash/omitBy';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport filterSchema, { INITIAL_VALUES } from '@britania-crm/forms/schemas/workflow/workflow.filter.schema';\nimport I18n, { useT } from '@britania-crm/i18n';\nimport { getWorkflowTypes } from '@britania-crm/stores/workflow/workflow.selectors';\nimport { formatBackDateToIsoFormat } from '@britania-crm/utils/date';\nimport Button from '@britania-crm/web-components/Button';\nimport Form from '@britania-crm/web-components/Form';\nimport InputDateRange from '@britania-crm/web-components/InputDateRange';\nimport InputSelect from '@britania-crm/web-components/InputSelect';\nimport InputText from '@britania-crm/web-components/InputText';\nimport Modal from '@britania-crm/web-components/Modal';\nimport useStyles from './styles';\n\nconst FilterWorkflowPanelModal = ({\n  id,\n  open,\n  handleClose,\n  handleSearch,\n  filters\n}) => {\n  const classes = useStyles();\n  const workflowTypes = useSelector(getWorkflowTypes);\n  const t = useT();\n  const formRef = useRef(null);\n  const [mounted, setMounted] = useState(false);\n  const mockStatus = useMemo(() => [{\n    id: 'ACTIVE',\n    name: 'Ativo'\n  }, {\n    id: 'PROGRAMMED',\n    name: 'Ativo Programado'\n  }, {\n    id: 'EXPIRED',\n    name: 'Ativo Vencido'\n  }, {\n    id: 'INACTIVE',\n    name: 'Inativo'\n  }], []);\n  const onCleanForm = useCallback(() => formRef.current.reset(), []);\n  const handleSubmit = useCallback(values => {\n    const {\n      period,\n      ...rest\n    } = values;\n\n    if (period.from) {\n      rest.dateStart = formatBackDateToIsoFormat(period.from);\n    }\n\n    if (period.to) {\n      rest.dateEnd = formatBackDateToIsoFormat(period.to);\n    }\n\n    handleSearch(omitBy(rest, field => !field));\n    handleClose();\n  }, [handleClose, handleSearch]);\n  useEffect(() => {\n    if (mounted && !isEqual(filters, INITIAL_VALUES)) {\n      const {\n        dateStart,\n        dateEnd,\n        ...values\n      } = filters;\n      formRef.current.setData({ ...values,\n        period: {\n          from: dateStart || INITIAL_VALUES.period.from,\n          to: dateEnd || INITIAL_VALUES.period.to\n        }\n      });\n    } else {\n      setMounted(true);\n    }\n  }, [filters, mounted]);\n  return /*#__PURE__*/React.createElement(Modal, {\n    id: id,\n    open: open,\n    classes: {\n      paperScrollPaper: classes.modal\n    },\n    maxWidth: \"lg\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    ref: formRef,\n    schemaConstructor: filterSchema,\n    defaultValues: INITIAL_VALUES,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    className: classes.card,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(I18n, {\n    as: Typography,\n    variant: \"h6\",\n    gutterBottom: true,\n    className: classes.title,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 13\n    }\n  }, \"filter data\")), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    className: classes.form,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(InputText, {\n    name: \"title\",\n    label: t('title'),\n    className: classes.input,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(InputSelect, {\n    name: \"typeId\",\n    label: t('type'),\n    valueKey: \"description\",\n    options: workflowTypes,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(InputSelect, {\n    name: \"status\",\n    label: t('status'),\n    options: mockStatus,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(InputDateRange, {\n    name: \"period\",\n    label: t('period', {\n      howMany: 1\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    className: clsx(classes.buttons, classes.btnCancel),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(I18n, {\n    as: Button,\n    color: \"secondary\",\n    variant: \"text\",\n    onClick: onCleanForm,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }\n  }, \"clean\"), /*#__PURE__*/React.createElement(I18n, {\n    as: Button,\n    color: \"secondary\",\n    variant: \"contained\",\n    onClick: () => formRef.current.submit(),\n    className: classes.btnSave,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }\n  }, \"filter\")));\n};\n\nFilterWorkflowPanelModal.propTypes = {\n  id: PropTypes.string.isRequired,\n  handleClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  handleSearch: PropTypes.func,\n  filters: PropTypes.object\n};\nFilterWorkflowPanelModal.defaultProps = {\n  handleSearch() {},\n\n  filters: {}\n};\nexport default FilterWorkflowPanelModal;","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/workflowPanel/modals/FilterWorkflowPanelModal/FilterWorkflowPanelModal.js"],"names":["React","useCallback","useRef","useMemo","useEffect","useState","useSelector","clsx","PropTypes","isEqual","omitBy","Grid","Typography","filterSchema","INITIAL_VALUES","I18n","useT","getWorkflowTypes","formatBackDateToIsoFormat","Button","Form","InputDateRange","InputSelect","InputText","Modal","useStyles","FilterWorkflowPanelModal","id","open","handleClose","handleSearch","filters","classes","workflowTypes","t","formRef","mounted","setMounted","mockStatus","name","onCleanForm","current","reset","handleSubmit","values","period","rest","from","dateStart","to","dateEnd","field","setData","paperScrollPaper","modal","card","title","form","input","howMany","buttons","btnCancel","submit","btnSave","propTypes","string","isRequired","func","bool","object","defaultProps"],"mappings":"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","sourcesContent":["import React, {\n  useCallback,\n  useRef,\n  useMemo,\n  useEffect,\n  useState\n} from 'react'\nimport { useSelector } from 'react-redux'\n\nimport clsx from 'clsx'\nimport PropTypes from 'prop-types'\n\nimport isEqual from 'lodash/isEqual'\nimport omitBy from 'lodash/omitBy'\n\nimport Grid from '@material-ui/core/Grid'\nimport Typography from '@material-ui/core/Typography'\n\nimport filterSchema, { INITIAL_VALUES } from '@britania-crm/forms/schemas/workflow/workflow.filter.schema'\nimport I18n, { useT } from '@britania-crm/i18n'\nimport { getWorkflowTypes } from '@britania-crm/stores/workflow/workflow.selectors'\nimport { formatBackDateToIsoFormat } from '@britania-crm/utils/date'\nimport Button from '@britania-crm/web-components/Button'\nimport Form from '@britania-crm/web-components/Form'\nimport InputDateRange from '@britania-crm/web-components/InputDateRange'\nimport InputSelect from '@britania-crm/web-components/InputSelect'\nimport InputText from '@britania-crm/web-components/InputText'\nimport Modal from '@britania-crm/web-components/Modal'\n\nimport useStyles from './styles'\n\nconst FilterWorkflowPanelModal = ({\n  id,\n  open,\n  handleClose,\n  handleSearch,\n  filters\n}) => {\n  const classes = useStyles()\n  const workflowTypes = useSelector(getWorkflowTypes)\n  const t = useT()\n\n  const formRef = useRef(null)\n\n  const [mounted, setMounted] = useState(false)\n\n  const mockStatus = useMemo(\n    () => [\n      { id: 'ACTIVE', name: 'Ativo' },\n      { id: 'PROGRAMMED', name: 'Ativo Programado' },\n      { id: 'EXPIRED', name: 'Ativo Vencido' },\n      { id: 'INACTIVE', name: 'Inativo' }\n    ],\n    []\n  )\n\n  const onCleanForm = useCallback(\n    () => formRef.current.reset(),\n    []\n  )\n\n  const handleSubmit = useCallback(\n    (values) => {\n      const { period, ...rest } = values\n\n      if (period.from) {\n        rest.dateStart = formatBackDateToIsoFormat(period.from)\n      }\n      if (period.to) {\n        rest.dateEnd = formatBackDateToIsoFormat(period.to)\n      }\n\n      handleSearch(omitBy(rest, (field) => !field))\n      handleClose()\n    },\n    [handleClose, handleSearch]\n  )\n\n  useEffect(\n    () => {\n      if (mounted && !isEqual(filters, INITIAL_VALUES)) {\n        const {\n          dateStart,\n          dateEnd,\n          ...values\n        } = filters\n\n        formRef.current.setData({\n          ...values,\n          period: {\n            from: dateStart || INITIAL_VALUES.period.from,\n            to: dateEnd || INITIAL_VALUES.period.to\n          }\n        })\n      } else {\n        setMounted(true)\n      }\n    },\n    [filters, mounted]\n  )\n\n  return (\n    <Modal\n      id={ id }\n      open={ open }\n      classes={ { paperScrollPaper: classes.modal } }\n      maxWidth=\"lg\"\n    >\n      <Form\n        ref={ formRef }\n        schemaConstructor={ filterSchema }\n        defaultValues={ INITIAL_VALUES }\n        onSubmit={ handleSubmit }\n      >\n        <Grid className={ classes.card } >\n          <Grid item xs={ 12 }>\n            <I18n as={ Typography } variant=\"h6\" gutterBottom className={ classes.title } >\n              filter data\n            </I18n>\n          </Grid>\n          <Grid item xs={ 12 } className={ classes.form }>\n            <InputText\n              name=\"title\"\n              label={ t('title') }\n              className={ classes.input }\n            />\n            <InputSelect\n              name=\"typeId\"\n              label={ t('type') }\n              valueKey=\"description\"\n              options={ workflowTypes }\n            />\n            <InputSelect\n              name=\"status\"\n              label={ t('status') }\n              options={ mockStatus }\n            />\n            <InputDateRange\n              name=\"period\"\n              label={ t('period', { howMany: 1 }) }\n            />\n          </Grid>\n        </Grid>\n      </Form>\n      <Grid item className={ clsx(classes.buttons, classes.btnCancel) }>\n        <I18n as={ Button }\n          color=\"secondary\"\n          variant=\"text\"\n          onClick={ onCleanForm }\n        >\n          clean\n        </I18n>\n        <I18n as={ Button }\n          color=\"secondary\"\n          variant=\"contained\"\n          onClick={ () => formRef.current.submit() }\n          className={ classes.btnSave }\n        >\n          filter\n        </I18n>\n      </Grid>\n    </Modal>\n  )\n}\n\nFilterWorkflowPanelModal.propTypes = {\n  id: PropTypes.string.isRequired,\n  handleClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  handleSearch: PropTypes.func,\n  filters: PropTypes.object\n}\n\nFilterWorkflowPanelModal.defaultProps = {\n  handleSearch () {},\n  filters: {}\n}\n\nexport default FilterWorkflowPanelModal\n"]},"metadata":{},"sourceType":"module"}