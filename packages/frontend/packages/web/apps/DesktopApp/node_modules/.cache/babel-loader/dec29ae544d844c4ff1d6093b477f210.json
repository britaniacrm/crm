{"ast":null,"code":"import { call, put, takeEvery } from 'redux-saga/effects';\nimport doDownloadFile from 'js-file-download';\nimport { createReminder, deleteReminder, getRemindersFromApi, updateReminder, download } from '@britania-crm/services/apis/crmApi/resources/app.service';\nimport { AppActions, AppTypes } from './app.actions';\n\nfunction* createNewReminderRequest() {\n  try {\n    const id = yield call(createReminder, {\n      content: ''\n    });\n    const reminderCreated = {\n      id,\n      content: ''\n    };\n    yield put(AppActions.createNewReminderSuccess(reminderCreated));\n  } catch (err) {\n    yield put(AppActions.addAlert({\n      type: 'error',\n      message: 'Falha ao salvar lembrete.'\n    })); // console.log('ERROR IN SAGA | action: createNewReminderRequest =>', err)\n  }\n}\n\nfunction* getAllReminders() {\n  try {\n    const reminders = yield call(getRemindersFromApi);\n    yield put(AppActions.setAllReminders(reminders));\n  } catch (err) {\n    yield put(AppActions.addAlert({\n      type: 'error',\n      message: 'Falha em listar os lembretes.'\n    })); // console.log('ERROR IN SAGA | action: getAllReminders =>', err)\n  }\n}\n\nfunction* closeReminder({\n  reminderId\n}) {\n  try {\n    yield call(deleteReminder, {\n      reminderId\n    });\n  } catch (err) {\n    yield put(AppActions.addAlert({\n      type: 'error',\n      message: 'Falha ao remover o lembrete.'\n    })); // console.log('ERROR IN SAGA | action: removeReminder =>', err)\n  }\n}\n\nfunction* saveReminder({\n  content,\n  reminderId\n}) {\n  try {\n    yield call(updateReminder, content, reminderId);\n  } catch (err) {\n    yield put(AppActions.addAlert({\n      type: 'error',\n      message: 'Falha ao salvar o lembrete.'\n    })); // console.log('ERROR IN SAGA | action: saveReminder =>', err)\n  }\n}\n\nfunction* downloadFile({\n  url,\n  filename = 'file'\n}) {\n  try {\n    const response = yield call(download, encodeURIComponent(url));\n    doDownloadFile(response, filename);\n  } catch (err) {\n    yield put(AppActions.addAlert({\n      type: 'error',\n      message: 'Falha ao baixar o arquivo.'\n    }));\n  }\n}\n\nexport default [takeEvery(AppTypes.CREATE_NEW_REMINDER_REQUEST, createNewReminderRequest), takeEvery(AppTypes.GET_ALL_REMINDERS, getAllReminders), takeEvery(AppTypes.CLOSE_REMINDER, closeReminder), takeEvery(AppTypes.DOWNLOAD_FILE, downloadFile), takeEvery(AppTypes.SAVE_REMINDER, saveReminder)];","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/core/stores/app/app.sagas.js"],"names":["call","put","takeEvery","doDownloadFile","createReminder","deleteReminder","getRemindersFromApi","updateReminder","download","AppActions","AppTypes","createNewReminderRequest","id","content","reminderCreated","createNewReminderSuccess","err","addAlert","type","message","getAllReminders","reminders","setAllReminders","closeReminder","reminderId","saveReminder","downloadFile","url","filename","response","encodeURIComponent","CREATE_NEW_REMINDER_REQUEST","GET_ALL_REMINDERS","CLOSE_REMINDER","DOWNLOAD_FILE","SAVE_REMINDER"],"mappings":"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","sourcesContent":["import {\n  call,\n  put,\n  takeEvery\n} from 'redux-saga/effects'\n\nimport doDownloadFile from 'js-file-download'\n\nimport {\n  createReminder,\n  deleteReminder,\n  getRemindersFromApi,\n  updateReminder,\n  download\n} from '@britania-crm/services/apis/crmApi/resources/app.service'\n\nimport {\n  AppActions,\n  AppTypes\n} from './app.actions'\n\nfunction* createNewReminderRequest () {\n  try {\n    const id = yield call(createReminder, { content: '' })\n    const reminderCreated = { id, content: '' }\n\n    yield put(AppActions.createNewReminderSuccess(reminderCreated))\n  } catch (err) {\n    yield put(AppActions.addAlert({ type: 'error', message: 'Falha ao salvar lembrete.' }))\n    // console.log('ERROR IN SAGA | action: createNewReminderRequest =>', err)\n  }\n}\n\nfunction* getAllReminders () {\n  try {\n    const reminders = yield call(getRemindersFromApi)\n\n    yield put(AppActions.setAllReminders(reminders))\n  } catch (err) {\n    yield put(AppActions.addAlert({ type: 'error', message: 'Falha em listar os lembretes.' }))\n    // console.log('ERROR IN SAGA | action: getAllReminders =>', err)\n  }\n}\n\nfunction* closeReminder ({ reminderId }) {\n  try {\n    yield call(deleteReminder, { reminderId })\n  } catch (err) {\n    yield put(AppActions.addAlert({ type: 'error', message: 'Falha ao remover o lembrete.' }))\n    // console.log('ERROR IN SAGA | action: removeReminder =>', err)\n  }\n}\n\nfunction* saveReminder ({ content, reminderId }) {\n  try {\n    yield call(updateReminder, content, reminderId)\n  } catch (err) {\n    yield put(AppActions.addAlert({ type: 'error', message: 'Falha ao salvar o lembrete.' }))\n    // console.log('ERROR IN SAGA | action: saveReminder =>', err)\n  }\n}\n\nfunction* downloadFile ({ url, filename = 'file' }) {\n  try {\n    const response = yield call(download, encodeURIComponent(url))\n\n    doDownloadFile(response, filename)\n  } catch (err) {\n    yield put(AppActions.addAlert({ type: 'error', message: 'Falha ao baixar o arquivo.' }))\n  }\n}\n\nexport default [\n  takeEvery(AppTypes.CREATE_NEW_REMINDER_REQUEST, createNewReminderRequest),\n  takeEvery(AppTypes.GET_ALL_REMINDERS, getAllReminders),\n  takeEvery(AppTypes.CLOSE_REMINDER, closeReminder),\n  takeEvery(AppTypes.DOWNLOAD_FILE, downloadFile),\n  takeEvery(AppTypes.SAVE_REMINDER, saveReminder)\n]\n"]},"metadata":{},"sourceType":"module"}