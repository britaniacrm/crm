{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/messageboards/screens/MessageboardScreen/MessageboardScreen.js\";\nimport React, { useCallback, useMemo, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { useHistory } from 'react-router-dom';\nimport map from 'lodash/map';\nimport { useDialog } from '@britania-crm/dialog';\nimport { useT } from '@britania-crm/i18n';\nimport { messages as messagesCrmRoutes } from '@britania-crm/services/apis/crmApi/resources/routes';\nimport useCrmApi from '@britania-crm/services/hooks/useCrmApi';\nimport { MessageActions } from '@britania-crm/stores/message';\nimport { ProfilesActions } from '@britania-crm/stores/profiles';\nimport { formatBackDateToFriendlyFormat } from '@britania-crm/utils/date';\nimport DataTable from '@britania-crm/web-components/DataTable';\nimport ConfirmModal from '@britania-crm/web-components/Modal/ConfirmModal';\nimport { useRoutes } from '@britania-crm/web-src/routes/authenticated.routes';\nimport CreateMessageboardModal from '../../modals/CreateMessageboardModal/CreateMessageboardModal';\nimport { Container } from './styles';\n\nconst MessageboardScreen = () => {\n  const t = useT();\n  const dispatch = useCallback(useDispatch(), []);\n  const {\n    createDialog\n  } = useDialog();\n  const history = useHistory();\n  const {\n    currentRoutePermissions\n  } = useRoutes();\n  const {\n    data,\n    loading,\n    mutate: refreshTable\n  } = useCrmApi(messagesCrmRoutes.getFilter);\n  const columns = useMemo(() => [{\n    title: t('title'),\n    field: 'title',\n    defaultSort: 'asc'\n  }, {\n    sorting: false,\n    title: t('perfil'),\n    field: 'messageProfile',\n    render: row => map(row.messageProfile, profile => map(profile.profile, ({\n      name\n    }) => name)).join(', ')\n  }, {\n    title: t('validity'),\n    field: 'expirationDate',\n    render: row => formatBackDateToFriendlyFormat(row.expirationDate)\n  }], [t]);\n  const handleOpenMessageBoardModal = useCallback(message => {\n    createDialog({\n      id: 'messageBoardModal',\n      Component: CreateMessageboardModal,\n      props: {\n        messageId: message === null || message === void 0 ? void 0 : message.id,\n        onSave: refreshTable\n      }\n    });\n  }, [createDialog, refreshTable]);\n  const onAddClick = useCallback(() => handleOpenMessageBoardModal(), [handleOpenMessageBoardModal]);\n  const onEditClick = useCallback((event, row) => handleOpenMessageBoardModal(row), [handleOpenMessageBoardModal]);\n  const onDeleteClick = useCallback((event, row) => {\n    createDialog({\n      id: 'delete-message',\n      Component: ConfirmModal,\n      props: {\n        onConfirm() {\n          dispatch(MessageActions.deleteMessage(row.id, refreshTable));\n        }\n\n      }\n    });\n  }, [createDialog, dispatch, refreshTable]); // Função para carregar a lista de recados no primeiro carregamento da tela\n\n  useEffect(() => {\n    dispatch(ProfilesActions.getAllProfiles());\n  }, [dispatch]);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DataTable, {\n    options: {\n      search: false\n    },\n    data: data,\n    columns: columns,\n    loading: loading,\n    title: t('message boards'),\n    addTitle: t('add new message'),\n    onAddClick: currentRoutePermissions.INCLUIR && onAddClick,\n    onEditClick: currentRoutePermissions.EDITAR && onEditClick,\n    onDeleteClick: currentRoutePermissions.EXCLUIR && onDeleteClick,\n    onGoBack: history.goBack,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default MessageboardScreen;","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/messageboards/screens/MessageboardScreen/MessageboardScreen.js"],"names":["React","useCallback","useMemo","useEffect","useDispatch","useHistory","map","useDialog","useT","messages","messagesCrmRoutes","useCrmApi","MessageActions","ProfilesActions","formatBackDateToFriendlyFormat","DataTable","ConfirmModal","useRoutes","CreateMessageboardModal","Container","MessageboardScreen","t","dispatch","createDialog","history","currentRoutePermissions","data","loading","mutate","refreshTable","getFilter","columns","title","field","defaultSort","sorting","render","row","messageProfile","profile","name","join","expirationDate","handleOpenMessageBoardModal","message","id","Component","props","messageId","onSave","onAddClick","onEditClick","event","onDeleteClick","onConfirm","deleteMessage","getAllProfiles","search","INCLUIR","EDITAR","EXCLUIR","goBack"],"mappings":"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","sourcesContent":["import React, {\n  useCallback,\n  useMemo,\n  useEffect\n} from 'react'\nimport { useDispatch } from 'react-redux'\nimport { useHistory } from 'react-router-dom'\n\nimport map from 'lodash/map'\n\nimport { useDialog } from '@britania-crm/dialog'\nimport { useT } from '@britania-crm/i18n'\nimport { messages as messagesCrmRoutes } from '@britania-crm/services/apis/crmApi/resources/routes'\nimport useCrmApi from '@britania-crm/services/hooks/useCrmApi'\nimport { MessageActions } from '@britania-crm/stores/message'\nimport { ProfilesActions } from '@britania-crm/stores/profiles'\nimport { formatBackDateToFriendlyFormat } from '@britania-crm/utils/date'\nimport DataTable from '@britania-crm/web-components/DataTable'\nimport ConfirmModal from '@britania-crm/web-components/Modal/ConfirmModal'\nimport { useRoutes } from '@britania-crm/web-src/routes/authenticated.routes'\n\nimport CreateMessageboardModal from '../../modals/CreateMessageboardModal/CreateMessageboardModal'\nimport { Container } from './styles'\n\nconst MessageboardScreen = () => {\n  const t = useT()\n  const dispatch = useCallback(useDispatch(), [])\n  const { createDialog } = useDialog()\n  const history = useHistory()\n  const { currentRoutePermissions } = useRoutes()\n\n  const {\n    data,\n    loading,\n    mutate: refreshTable\n  } = useCrmApi(messagesCrmRoutes.getFilter)\n\n  const columns = useMemo(() => [\n    {\n      title: t('title'),\n      field: 'title',\n      defaultSort: 'asc'\n    },\n    {\n      sorting: false,\n      title: t('perfil'),\n      field: 'messageProfile',\n      render: (row) => map(row.messageProfile, (profile) => map(profile.profile, ({ name }) => name)).join(', ')\n    },\n    {\n      title: t('validity'),\n      field: 'expirationDate',\n      render: (row) => formatBackDateToFriendlyFormat(row.expirationDate)\n    }\n  ], [t])\n\n  const handleOpenMessageBoardModal = useCallback(\n    (message) => {\n      createDialog({\n        id: 'messageBoardModal',\n        Component: CreateMessageboardModal,\n        props: {\n          messageId: message?.id,\n          onSave: refreshTable\n        }\n      })\n    },\n    [createDialog, refreshTable]\n  )\n\n  const onAddClick = useCallback(\n    () => handleOpenMessageBoardModal(),\n    [handleOpenMessageBoardModal]\n  )\n\n  const onEditClick = useCallback(\n    (event, row) => handleOpenMessageBoardModal(row),\n    [handleOpenMessageBoardModal]\n  )\n\n  const onDeleteClick = useCallback(\n    (event, row) => {\n      createDialog({\n        id: 'delete-message',\n        Component: ConfirmModal,\n        props: {\n          onConfirm () {\n            dispatch(MessageActions.deleteMessage(row.id, refreshTable))\n          }\n        }\n      })\n    },\n    [createDialog, dispatch, refreshTable]\n  )\n\n  // Função para carregar a lista de recados no primeiro carregamento da tela\n  useEffect(() => {\n    dispatch(ProfilesActions.getAllProfiles())\n  }, [dispatch])\n\n  return (\n    <Container>\n      <DataTable\n        options={ { search: false } }\n        data={ data }\n        columns={ columns }\n        loading={ loading }\n        title={ t('message boards') }\n        addTitle={ t('add new message') }\n        onAddClick={ currentRoutePermissions.INCLUIR && onAddClick }\n        onEditClick={ currentRoutePermissions.EDITAR && onEditClick }\n        onDeleteClick={ currentRoutePermissions.EXCLUIR && onDeleteClick }\n        onGoBack={ history.goBack }\n      />\n    </Container>\n  )\n}\n\nexport default MessageboardScreen\n"]},"metadata":{},"sourceType":"module"}