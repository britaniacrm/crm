{"ast":null,"code":"import { createReducer } from 'reduxsauce';\nimport { WorkflowTypes } from './workflow.actions';\nconst INITIAL_STATE = {\n  allWorkflows: [],\n  workflow: {},\n  types: [],\n  loading: {\n    save: false,\n    inactivate: false\n  }\n};\n\nconst setAllWorkflowsSuccess = (state = INITIAL_STATE, {\n  list\n}) => ({ ...state,\n  allWorkflows: list\n});\n\nconst setOneWorkflowSuccess = (state = INITIAL_STATE, {\n  workflow\n}) => ({ ...state,\n  workflow\n});\n\nconst setWorkflowTypes = (state = INITIAL_STATE, {\n  types\n}) => {\n  const newTypes = types.map(item => ({\n    name: item.code,\n    description: item.description,\n    id: item.id\n  }));\n  return { ...state,\n    types: newTypes\n  };\n};\n\nconst clearWorkflowDetails = (state = INITIAL_STATE) => ({ ...state,\n  workflow: {}\n});\n\nconst updateLoaderState = (state, {\n  loaderState,\n  loaderName\n}) => ({ ...state,\n  loading: { ...state.loading,\n    [loaderName]: loaderState\n  }\n});\n\nexport default createReducer(INITIAL_STATE, {\n  [WorkflowTypes.SET_ALL_WORKFLOWS_SUCCESS]: setAllWorkflowsSuccess,\n  [WorkflowTypes.SET_ONE_WORKFLOW_SUCCESS]: setOneWorkflowSuccess,\n  [WorkflowTypes.SET_WORKFLOW_TYPES]: setWorkflowTypes,\n  [WorkflowTypes.GET_ONE_WORKFLOW]: clearWorkflowDetails,\n  [WorkflowTypes.UPDATE_LOADER_STATE]: updateLoaderState\n});","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/core/stores/workflow/workflow.reducer.js"],"names":["createReducer","WorkflowTypes","INITIAL_STATE","allWorkflows","workflow","types","loading","save","inactivate","setAllWorkflowsSuccess","state","list","setOneWorkflowSuccess","setWorkflowTypes","newTypes","map","item","name","code","description","id","clearWorkflowDetails","updateLoaderState","loaderState","loaderName","SET_ALL_WORKFLOWS_SUCCESS","SET_ONE_WORKFLOW_SUCCESS","SET_WORKFLOW_TYPES","GET_ONE_WORKFLOW","UPDATE_LOADER_STATE"],"mappings":"AAAA,SAASA,aAAT,QAA8B,YAA9B;AAEA,SAASC,aAAT,QAA8B,oBAA9B;AAEA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,YAAY,EAAE,EADM;AAEpBC,EAAAA,QAAQ,EAAE,EAFU;AAGpBC,EAAAA,KAAK,EAAE,EAHa;AAIpBC,EAAAA,OAAO,EAAE;AACPC,IAAAA,IAAI,EAAE,KADC;AAEPC,IAAAA,UAAU,EAAE;AAFL;AAJW,CAAtB;;AAUA,MAAMC,sBAAsB,GAAG,CAACC,KAAK,GAAGR,aAAT,EAAwB;AAAES,EAAAA;AAAF,CAAxB,MAAsC,EACnE,GAAGD,KADgE;AAEnEP,EAAAA,YAAY,EAAEQ;AAFqD,CAAtC,CAA/B;;AAKA,MAAMC,qBAAqB,GAAG,CAACF,KAAK,GAAGR,aAAT,EAAwB;AAAEE,EAAAA;AAAF,CAAxB,MAA0C,EACtE,GAAGM,KADmE;AAEtEN,EAAAA;AAFsE,CAA1C,CAA9B;;AAKA,MAAMS,gBAAgB,GAAG,CAACH,KAAK,GAAGR,aAAT,EAAwB;AAAEG,EAAAA;AAAF,CAAxB,KAAsC;AAC7D,QAAMS,QAAQ,GAAGT,KAAK,CAACU,GAAN,CAAWC,IAAD,KAAW;AACpCC,IAAAA,IAAI,EAAED,IAAI,CAACE,IADyB;AACnBC,IAAAA,WAAW,EAAEH,IAAI,CAACG,WADC;AACYC,IAAAA,EAAE,EAAEJ,IAAI,CAACI;AADrB,GAAX,CAAV,CAAjB;AAGA,SAAO,EACL,GAAGV,KADE;AAELL,IAAAA,KAAK,EAAES;AAFF,GAAP;AAID,CARD;;AAUA,MAAMO,oBAAoB,GAAG,CAACX,KAAK,GAAGR,aAAT,MAA4B,EACvD,GAAGQ,KADoD;AAEvDN,EAAAA,QAAQ,EAAE;AAF6C,CAA5B,CAA7B;;AAKA,MAAMkB,iBAAiB,GAAG,CAACZ,KAAD,EAAQ;AAAEa,EAAAA,WAAF;AAAeC,EAAAA;AAAf,CAAR,MAAyC,EACjE,GAAGd,KAD8D;AAEjEJ,EAAAA,OAAO,EAAE,EACP,GAAGI,KAAK,CAACJ,OADF;AAEP,KAACkB,UAAD,GAAcD;AAFP;AAFwD,CAAzC,CAA1B;;AAQA,eAAevB,aAAa,CAACE,aAAD,EAAgB;AAC1C,GAACD,aAAa,CAACwB,yBAAf,GAA2ChB,sBADD;AAE1C,GAACR,aAAa,CAACyB,wBAAf,GAA0Cd,qBAFA;AAG1C,GAACX,aAAa,CAAC0B,kBAAf,GAAoCd,gBAHM;AAI1C,GAACZ,aAAa,CAAC2B,gBAAf,GAAkCP,oBAJQ;AAK1C,GAACpB,aAAa,CAAC4B,mBAAf,GAAqCP;AALK,CAAhB,CAA5B","sourcesContent":["import { createReducer } from 'reduxsauce'\n\nimport { WorkflowTypes } from './workflow.actions'\n\nconst INITIAL_STATE = {\n  allWorkflows: [],\n  workflow: {},\n  types: [],\n  loading: {\n    save: false,\n    inactivate: false\n  }\n}\n\nconst setAllWorkflowsSuccess = (state = INITIAL_STATE, { list }) => ({\n  ...state,\n  allWorkflows: list\n})\n\nconst setOneWorkflowSuccess = (state = INITIAL_STATE, { workflow }) => ({\n  ...state,\n  workflow\n})\n\nconst setWorkflowTypes = (state = INITIAL_STATE, { types }) => {\n  const newTypes = types.map((item) => ({\n    name: item.code, description: item.description, id: item.id\n  }))\n  return {\n    ...state,\n    types: newTypes\n  }\n}\n\nconst clearWorkflowDetails = (state = INITIAL_STATE) => ({\n  ...state,\n  workflow: {}\n})\n\nconst updateLoaderState = (state, { loaderState, loaderName }) => ({\n  ...state,\n  loading: {\n    ...state.loading,\n    [loaderName]: loaderState\n  }\n})\n\nexport default createReducer(INITIAL_STATE, {\n  [WorkflowTypes.SET_ALL_WORKFLOWS_SUCCESS]: setAllWorkflowsSuccess,\n  [WorkflowTypes.SET_ONE_WORKFLOW_SUCCESS]: setOneWorkflowSuccess,\n  [WorkflowTypes.SET_WORKFLOW_TYPES]: setWorkflowTypes,\n  [WorkflowTypes.GET_ONE_WORKFLOW]: clearWorkflowDetails,\n  [WorkflowTypes.UPDATE_LOADER_STATE]: updateLoaderState\n\n})\n"]},"metadata":{},"sourceType":"module"}