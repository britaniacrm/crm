{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/components/UploadImage/UploadImageStyled.js\";\nimport React, { useCallback, useMemo, memo } from 'react';\nimport { useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Box from '@material-ui/core/Box';\nimport Grid from '@material-ui/core/Grid';\nimport InfoIcon from '@material-ui/icons/Info';\nimport { MSG025 } from '@britania-crm/constants/feedbackMessages.constants';\nimport { AppActions } from '@britania-crm/stores/app';\nimport { colors } from '@britania-crm/styles';\nimport { areEqual } from '@britania-crm/utils/memo';\nimport DropzoneFile from '../DropzoneFile';\nimport PreviewFile from '../PreviewFile';\nimport useStyles, { ErrorBox } from './styles';\n\nconst UploadImage = ({\n  onChange,\n  error,\n  types,\n  value,\n  clearable,\n  preview,\n  previewStyle,\n  defaultFile,\n  hideWhenHasValue,\n  title,\n  description\n}) => {\n  const dispatch = useCallback(useDispatch(), []);\n  const classes = useStyles();\n  const hasFile = useMemo(() => value || defaultFile, [defaultFile, value]);\n  const hasPreview = useMemo(() => preview && !!hasFile, [hasFile, preview]);\n  const handleUpload = useCallback(e => {\n    var _e$;\n\n    const ext = (_e$ = e[0]) === null || _e$ === void 0 ? void 0 : _e$.name.split('.').pop();\n\n    if (!types.includes(e[0].type || ext)) {\n      dispatch(AppActions.addAlert({\n        type: 'error',\n        message: MSG025\n      }));\n      onChange('');\n      return;\n    }\n\n    onChange(e[0]);\n  }, [dispatch, onChange, types]);\n  const onRemove = useCallback(() => {\n    onChange('');\n  }, [onChange]);\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 2,\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, (!value || hasFile && !hideWhenHasValue) && /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: hasPreview ? 6 : 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(DropzoneFile, {\n    handleUpload: handleUpload,\n    types: types.toString(),\n    title: title,\n    description: description,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(ErrorBox, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }\n  }, !!error && /*#__PURE__*/React.createElement(Box, {\n    style: {\n      color: colors.error.main\n    },\n    component: \"span\",\n    display: \"flex\",\n    alignItems: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 15\n    }\n  }, /*#__PURE__*/React.createElement(InfoIcon, {\n    fontSize: \"small\",\n    style: {\n      marginRight: '8px'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }\n  }), ' ', error))), /*#__PURE__*/React.createElement(Grid, {\n    item: true,\n    xs: 12,\n    sm: hideWhenHasValue ? 12 : 6,\n    className: classes.preview,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(PreviewFile, {\n    file: value,\n    onRemove: clearable && onRemove,\n    style: previewStyle,\n    defaultFile: defaultFile,\n    hasPreview: hasPreview,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 9\n    }\n  })));\n};\n\nUploadImage.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  error: PropTypes.string,\n  types: PropTypes.array,\n  clearable: PropTypes.bool,\n  preview: PropTypes.bool,\n  previewStyle: PropTypes.object,\n  value: PropTypes.oneOfType([PropTypes.object, PropTypes.string]).isRequired,\n  defaultFile: PropTypes.any,\n  hideWhenHasValue: PropTypes.bool,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired\n};\nUploadImage.defaultProps = {\n  onChange() {},\n\n  error: null,\n  types: ['image/png', 'image/jpg', 'image/jpeg', 'image/gif'],\n  value: '',\n  preview: false,\n  previewStyle: {},\n  clearable: false,\n  defaultFile: '',\n  hideWhenHasValue: false\n};\nexport default memo(UploadImage, areEqual);","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/components/UploadImage/UploadImageStyled.js"],"names":["React","useCallback","useMemo","memo","useDispatch","PropTypes","Box","Grid","InfoIcon","MSG025","AppActions","colors","areEqual","DropzoneFile","PreviewFile","useStyles","ErrorBox","UploadImage","onChange","error","types","value","clearable","preview","previewStyle","defaultFile","hideWhenHasValue","title","description","dispatch","classes","hasFile","hasPreview","handleUpload","e","ext","name","split","pop","includes","type","addAlert","message","onRemove","toString","color","main","marginRight","propTypes","func","isRequired","string","array","bool","object","oneOfType","any","defaultProps"],"mappings":"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","sourcesContent":["import React, {\n  useCallback,\n  useMemo,\n  memo\n} from 'react'\nimport { useDispatch } from 'react-redux'\n\nimport PropTypes from 'prop-types'\n\nimport Box from '@material-ui/core/Box'\nimport Grid from '@material-ui/core/Grid'\nimport InfoIcon from '@material-ui/icons/Info'\n\nimport { MSG025 } from '@britania-crm/constants/feedbackMessages.constants'\nimport { AppActions } from '@britania-crm/stores/app'\nimport { colors } from '@britania-crm/styles'\nimport { areEqual } from '@britania-crm/utils/memo'\n\nimport DropzoneFile from '../DropzoneFile'\nimport PreviewFile from '../PreviewFile'\nimport useStyles, { ErrorBox } from './styles'\n\nconst UploadImage = ({\n  onChange,\n  error,\n  types,\n  value,\n  clearable,\n  preview,\n  previewStyle,\n  defaultFile,\n  hideWhenHasValue,\n  title,\n  description\n}) => {\n  const dispatch = useCallback(useDispatch(), [])\n\n  const classes = useStyles()\n\n  const hasFile = useMemo(\n    () => value || defaultFile,\n    [defaultFile, value]\n  )\n\n  const hasPreview = useMemo(\n    () => preview && !!hasFile,\n    [hasFile, preview]\n  )\n\n  const handleUpload = useCallback(\n    (e) => {\n      const ext = e[0]?.name.split('.').pop()\n      if (!types.includes(e[0].type || ext)) {\n        dispatch(AppActions.addAlert({\n          type: 'error',\n          message: MSG025\n        }))\n        onChange('')\n        return\n      }\n\n      onChange(e[0])\n    },\n    [dispatch, onChange, types]\n  )\n\n  const onRemove = useCallback(\n    () => {\n      onChange('')\n    },\n    [onChange]\n  )\n\n  return (\n    <Grid container spacing={ 2 } alignItems=\"center\">\n      {(!value || (hasFile && !hideWhenHasValue)) && (\n        <Grid item xs={ 12 } sm={ hasPreview ? 6 : 12 }>\n          <DropzoneFile\n            handleUpload={ handleUpload }\n            types={ types.toString() }\n            title={ title }\n            description={ description }\n          />\n          <ErrorBox>\n            {!!error && (\n              <Box style={ { color: colors.error.main } } component=\"span\" display=\"flex\" alignItems=\"center\">\n                <InfoIcon fontSize=\"small\" style={ { marginRight: '8px' } } />\n                {' '}{ error }\n              </Box>\n            )}\n          </ErrorBox>\n        </Grid>\n      )}\n\n      <Grid item xs={ 12 } sm={ hideWhenHasValue ? 12 : 6 } className={ classes.preview }>\n        <PreviewFile\n          file={ value }\n          onRemove={ clearable && onRemove }\n          style={ previewStyle }\n          defaultFile={ defaultFile }\n          hasPreview={ hasPreview }\n        />\n      </Grid>\n\n    </Grid>\n  )\n}\n\nUploadImage.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  error: PropTypes.string,\n  types: PropTypes.array,\n  clearable: PropTypes.bool,\n  preview: PropTypes.bool,\n  previewStyle: PropTypes.object,\n  value: PropTypes.oneOfType([\n    PropTypes.object,\n    PropTypes.string\n  ]).isRequired,\n  defaultFile: PropTypes.any,\n  hideWhenHasValue: PropTypes.bool,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired\n}\n\nUploadImage.defaultProps = {\n  onChange () {},\n  error: null,\n  types: ['image/png', 'image/jpg', 'image/jpeg', 'image/gif'],\n  value: '',\n  preview: false,\n  previewStyle: {},\n  clearable: false,\n  defaultFile: '',\n  hideWhenHasValue: false\n}\n\nexport default memo(UploadImage, areEqual)\n"]},"metadata":{},"sourceType":"module"}