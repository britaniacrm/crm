{"ast":null,"code":"import { put, call, takeLatest, take, all } from 'redux-saga/effects';\nimport doDownloadFile from 'js-file-download';\nimport endsWith from 'lodash/endsWith';\nimport filter from 'lodash/filter';\nimport find from 'lodash/find';\nimport forEach from 'lodash/forEach';\nimport isArray from 'lodash/isArray';\nimport isEmpty from 'lodash/isEmpty';\nimport map from 'lodash/map';\nimport mapValues from 'lodash/mapValues';\nimport reduce from 'lodash/reduce';\nimport set from 'lodash/set';\nimport { MSG017, MSG027 } from '@britania-crm/constants/feedbackMessages.constants';\nimport { INITIAL_VALUES_DOCUMENTS } from '@britania-crm/forms/schemas/customer/documents.schema';\nimport { download } from '@britania-crm/services/apis/crmApi/resources/app.service';\nimport { updateCustomer, postCustomerPreRegistry, putCustomerPreRegistry, putFinishCustomerPreRegistry } from '@britania-crm/services/apis/crmApi/resources/customer.service';\nimport { // deleteFile,\nuploadSingleFile } from '@britania-crm/services/apis/crmApi/resources/file.service';\nimport { putRankingsChangeRanking } from '@britania-crm/services/apis/crmApi/resources/rankink.service';\nimport { AppActions } from '../app/app.actions';\nimport { CustomerActions, CustomerTypes } from './customer.actions';\n\nfunction* doUpdateCustomer({\n  params,\n  id,\n  onSuccess = () => {},\n  onError = () => {}\n}) {\n  try {\n    const {\n      status\n    } = yield call(updateCustomer, params, id);\n\n    if (status === 200) {\n      yield call(onSuccess);\n      yield put(AppActions.addAlert({\n        type: 'success',\n        message: MSG027\n      }));\n    }\n  } catch (error) {\n    var _error$response, _error$response$data;\n\n    if (error === null || error === void 0 ? void 0 : (_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) {\n      var _error$response2, _error$response2$data;\n\n      yield put(AppActions.addAlert({\n        type: 'error',\n        message: error === null || error === void 0 ? void 0 : (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.message\n      }));\n    } else {\n      yield put(AppActions.addAlert({\n        type: 'error',\n        message: 'Falha ao solicitar alteração cadastral do cliente'\n      }));\n    }\n\n    yield call(onError);\n  }\n}\n\nfunction* doChangeRankings({\n  matrixCode,\n  params,\n  onSuccess = () => {}\n}) {\n  try {\n    yield call(putRankingsChangeRanking, matrixCode, params);\n    yield put(AppActions.addAlert({\n      type: 'success',\n      message: MSG017\n    }));\n    yield call(onSuccess);\n  } catch (error) {\n    console.error('Error onn change ranking', error);\n  }\n}\n\nfunction* doDowloadFileCustomer({\n  url,\n  filename\n}) {\n  try {\n    const response = yield call(download, encodeURIComponent(url));\n    doDownloadFile(response, filename);\n  } catch (error) {\n    yield put(AppActions.addAlert({\n      type: 'error',\n      message: 'Falha ao baixar arquivo!'\n    }));\n  }\n}\n\nconst doUploadFileCustomer = async (file, fieldName) => {\n  const formData = new FormData();\n  formData.append('file', file);\n  const {\n    id\n  } = await uploadSingleFile(formData);\n  return {\n    [fieldName]: id\n  };\n};\n\nfunction* doSaveCustomerPreRegistry({\n  client: {\n    documents,\n    ...client\n  },\n  oldClient,\n  onSuccess = () => {},\n  onError = () => {}\n}) {\n  try {\n    const filesToDelete = reduce(oldClient === null || oldClient === void 0 ? void 0 : oldClient.documents, (acc, doc, fieldName) => {\n      if (!isEmpty(doc)) {\n        var _documents$fieldName;\n\n        if (isArray(doc)) {\n          const docsToRemove = reduce(filter(doc, d => !find(documents[fieldName], newDoc => (newDoc === null || newDoc === void 0 ? void 0 : newDoc.fileId) === (d === null || d === void 0 ? void 0 : d.fileId))), (acc2, d, index) => ({ ...acc2,\n            [`${fieldName}[${index}]`]: d.file\n          }), {});\n\n          if (!isEmpty(docsToRemove)) {\n            return { ...acc,\n              ...docsToRemove\n            };\n          }\n        } else if (((_documents$fieldName = documents[fieldName]) === null || _documents$fieldName === void 0 ? void 0 : _documents$fieldName.id) !== (doc === null || doc === void 0 ? void 0 : doc.id)) {\n          return { ...acc,\n            [fieldName]: doc\n          };\n        }\n      }\n\n      return acc;\n    }, {});\n    const removedObj = {};\n    forEach(filesToDelete, (file, fieldName) => {\n      set(removedObj, fieldName, file);\n    });\n    const filesToUpload = reduce(documents, (acc, doc, fieldName) => {\n      if (doc instanceof File) {\n        return { ...acc,\n          [`${fieldName}Id`]: doc\n        };\n      } else if (isArray(doc) && !isEmpty(doc)) {\n        return { ...acc,\n          ...reduce(filter(doc, d => d instanceof File), (acc2, d, index) => ({ ...acc2,\n            [`${`${fieldName}FileIds`}[${index}]`]: d\n          }), {})\n        };\n      }\n\n      return acc;\n    }, {});\n    const uploadedIds = yield all(map(filesToUpload, (file, fieldName) => call(doUploadFileCustomer, file, fieldName)));\n    const uploadedObj = {};\n    forEach(uploadedIds, fileObj => {\n      forEach(fileObj, (fileId, fieldName) => {\n        set(uploadedObj, fieldName, fileId);\n      });\n    });\n    const newDocumentsAfterDelete = reduce(INITIAL_VALUES_DOCUMENTS, (acc, doc, fieldName) => {\n      if (endsWith(fieldName, 'Id')) {\n        return acc;\n      }\n\n      if (!isArray(doc) && !removedObj[fieldName]) {\n        var _documents$fieldName2;\n\n        return { ...acc,\n          [`${fieldName}Id`]: ((_documents$fieldName2 = documents[fieldName]) === null || _documents$fieldName2 === void 0 ? void 0 : _documents$fieldName2.id) || null\n        };\n      }\n\n      if (isArray(doc)) {\n        return { ...acc,\n          [`${fieldName}FileIds`]: filter(map(filter(documents[fieldName], file => !find(removedObj[fieldName], fileRemoved => (file === null || file === void 0 ? void 0 : file.fileId) === fileRemoved.id)), file => file === null || file === void 0 ? void 0 : file.fileId), file => !!file)\n        };\n      }\n\n      return { ...acc,\n        [`${fieldName}Id`]: null\n      };\n    }, {});\n    const newDocumentsAfterUpload = mapValues(newDocumentsAfterDelete, (doc, fieldName) => {\n      if (uploadedObj[fieldName]) {\n        if (isArray(doc)) {\n          return [...doc, ...uploadedObj[fieldName]];\n        }\n\n        return uploadedObj[fieldName];\n      }\n\n      return doc;\n    });\n    let id = client.id;\n\n    if (!id) {\n      const {\n        data\n      } = yield call(postCustomerPreRegistry, { ...client,\n        documents: newDocumentsAfterUpload\n      });\n      id = data.id;\n      yield put(AppActions.addAlert({\n        type: 'success',\n        message: 'Cliente pré-cadastrado com sucesso!'\n      }));\n    } else {\n      yield call(putCustomerPreRegistry, { ...client,\n        documents: newDocumentsAfterUpload\n      }, id);\n      yield put(AppActions.addAlert({\n        type: 'success',\n        message: 'Pré-cadastrado atualizado com sucesso!'\n      }));\n    }\n\n    yield call(onSuccess, id);\n    yield put(CustomerActions.saveCustomerPreRegistrySuccess()); // do delete files async\n    // yield all(map(filesToDelete, (file) => call(deleteFile, file.id)))\n  } catch (error) {\n    console.error('error', error);\n    yield put(AppActions.addAlert({\n      type: 'error',\n      message: 'Falha ao salvar o cliente!'\n    }));\n    yield call(onError, error);\n  }\n}\n\nfunction* doFinishCustomerPreRegistry({\n  client,\n  oldClient,\n  onSuccess = () => {},\n  onError = () => {}\n}) {\n  try {\n    let id = client.id;\n    yield put(CustomerActions.saveCustomerPreRegistry(client, oldClient, newId => {\n      id = newId;\n    }, onError));\n    yield take(CustomerTypes.SAVE_CUSTOMER_PRE_REGISTRY_SUCCESS);\n\n    if (id) {\n      yield call(putFinishCustomerPreRegistry, {}, id);\n      yield put(AppActions.addAlert({\n        type: 'success',\n        message: 'Pré-cadastrado concluído com sucesso!'\n      }));\n      yield call(onSuccess, id);\n    }\n  } catch (error) {\n    yield put(AppActions.addAlert({\n      type: 'error',\n      message: 'Falha ao concluir o cadastro do cliente!'\n    }));\n    yield call(onError, error);\n  }\n}\n\nexport default [takeLatest(CustomerTypes.UPDATE_CUSTOMER, doUpdateCustomer), takeLatest(CustomerTypes.CHANGE_RANKINGS, doChangeRankings), takeLatest(CustomerTypes.DOWNLOAD_FILE_CUSTOMER, doDowloadFileCustomer), takeLatest(CustomerTypes.SAVE_CUSTOMER_PRE_REGISTRY, doSaveCustomerPreRegistry), takeLatest(CustomerTypes.FINISH_CUSTOMER_PRE_REGISTRY, doFinishCustomerPreRegistry)];","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/core/stores/customer/customer.sagas.js"],"names":["put","call","takeLatest","take","all","doDownloadFile","endsWith","filter","find","forEach","isArray","isEmpty","map","mapValues","reduce","set","MSG017","MSG027","INITIAL_VALUES_DOCUMENTS","download","updateCustomer","postCustomerPreRegistry","putCustomerPreRegistry","putFinishCustomerPreRegistry","uploadSingleFile","putRankingsChangeRanking","AppActions","CustomerActions","CustomerTypes","doUpdateCustomer","params","id","onSuccess","onError","status","addAlert","type","message","error","response","data","doChangeRankings","matrixCode","console","doDowloadFileCustomer","url","filename","encodeURIComponent","doUploadFileCustomer","file","fieldName","formData","FormData","append","doSaveCustomerPreRegistry","client","documents","oldClient","filesToDelete","acc","doc","docsToRemove","d","newDoc","fileId","acc2","index","removedObj","filesToUpload","File","uploadedIds","uploadedObj","fileObj","newDocumentsAfterDelete","fileRemoved","newDocumentsAfterUpload","saveCustomerPreRegistrySuccess","doFinishCustomerPreRegistry","saveCustomerPreRegistry","newId","SAVE_CUSTOMER_PRE_REGISTRY_SUCCESS","UPDATE_CUSTOMER","CHANGE_RANKINGS","DOWNLOAD_FILE_CUSTOMER","SAVE_CUSTOMER_PRE_REGISTRY","FINISH_CUSTOMER_PRE_REGISTRY"],"mappings":"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","sourcesContent":["import {\n  put,\n  call,\n  takeLatest,\n  take,\n  all\n} from 'redux-saga/effects'\n\nimport doDownloadFile from 'js-file-download'\n\nimport endsWith from 'lodash/endsWith'\nimport filter from 'lodash/filter'\nimport find from 'lodash/find'\nimport forEach from 'lodash/forEach'\nimport isArray from 'lodash/isArray'\nimport isEmpty from 'lodash/isEmpty'\nimport map from 'lodash/map'\nimport mapValues from 'lodash/mapValues'\nimport reduce from 'lodash/reduce'\nimport set from 'lodash/set'\n\nimport {\n  MSG017,\n  MSG027\n} from '@britania-crm/constants/feedbackMessages.constants'\nimport { INITIAL_VALUES_DOCUMENTS } from '@britania-crm/forms/schemas/customer/documents.schema'\nimport { download } from '@britania-crm/services/apis/crmApi/resources/app.service'\nimport {\n  updateCustomer,\n  postCustomerPreRegistry,\n  putCustomerPreRegistry,\n  putFinishCustomerPreRegistry\n} from '@britania-crm/services/apis/crmApi/resources/customer.service'\nimport {\n  // deleteFile,\n  uploadSingleFile\n} from '@britania-crm/services/apis/crmApi/resources/file.service'\nimport { putRankingsChangeRanking } from '@britania-crm/services/apis/crmApi/resources/rankink.service'\n\nimport { AppActions } from '../app/app.actions'\nimport {\n  CustomerActions,\n  CustomerTypes\n} from './customer.actions'\n\nfunction* doUpdateCustomer ({\n  params,\n  id,\n  onSuccess = () => {},\n  onError = () => {}\n}) {\n  try {\n    const { status } = yield call(updateCustomer, params, id)\n\n    if (status === 200) {\n      yield call(onSuccess)\n      yield put(AppActions.addAlert({ type: 'success', message: MSG027 }))\n    }\n  } catch (error) {\n    if (error?.response?.data?.message) {\n      yield put(AppActions.addAlert({ type: 'error', message: error?.response?.data?.message }))\n    } else {\n      yield put(AppActions.addAlert({ type: 'error', message: 'Falha ao solicitar alteração cadastral do cliente' }))\n    }\n    yield call(onError)\n  }\n}\n\nfunction* doChangeRankings ({\n  matrixCode,\n  params,\n  onSuccess = () => {}\n}) {\n  try {\n    yield call(putRankingsChangeRanking, matrixCode, params)\n    yield put(AppActions.addAlert({ type: 'success', message: MSG017 }))\n    yield call(onSuccess)\n  } catch (error) {\n    console.error('Error onn change ranking', error)\n  }\n}\n\nfunction* doDowloadFileCustomer ({ url, filename }) {\n  try {\n    const response = yield call(download, encodeURIComponent(url))\n\n    doDownloadFile(response, filename)\n  } catch (error) {\n    yield put(AppActions.addAlert({ type: 'error', message: 'Falha ao baixar arquivo!' }))\n  }\n}\n\nconst doUploadFileCustomer = async (file, fieldName) => {\n  const formData = new FormData()\n  formData.append('file', file)\n  const { id } = await uploadSingleFile(formData)\n  return { [fieldName]: id }\n}\n\nfunction* doSaveCustomerPreRegistry ({\n  client: { documents, ...client },\n  oldClient,\n  onSuccess = () => {},\n  onError = () => {}\n}) {\n  try {\n    const filesToDelete = reduce(\n      oldClient?.documents,\n      (acc, doc, fieldName) => {\n        if (!isEmpty(doc)) {\n          if (isArray(doc)) {\n            const docsToRemove = reduce(\n              filter(doc, (d) => !find(\n                documents[fieldName],\n                (newDoc) => newDoc?.fileId === d?.fileId\n              )),\n              (acc2, d, index) => ({\n                ...acc2,\n                [`${ fieldName }[${ index }]`]: d.file\n              }),\n              {}\n            )\n            if (!isEmpty(docsToRemove)) {\n              return {\n                ...acc,\n                ...docsToRemove\n              }\n            }\n          } else if (documents[fieldName]?.id !== doc?.id) {\n            return {\n              ...acc,\n              [fieldName]: doc\n            }\n          }\n        }\n        return acc\n      },\n      {}\n    )\n\n    const removedObj = {}\n    forEach(filesToDelete, (file, fieldName) => {\n      set(removedObj, fieldName, file)\n    })\n\n    const filesToUpload = reduce(\n      documents,\n      (acc, doc, fieldName) => {\n        if (doc instanceof File) {\n          return {\n            ...acc,\n            [`${ fieldName }Id`]: doc\n          }\n        } else if (isArray(doc) && !isEmpty(doc)) {\n          return {\n            ...acc,\n            ...reduce(\n              filter(doc, (d) => d instanceof File),\n              (acc2, d, index) => ({\n                ...acc2,\n                [`${ `${ fieldName }FileIds` }[${ index }]`]: d\n              }),\n              {}\n            )\n          }\n        }\n        return acc\n      },\n      {}\n    )\n\n    const uploadedIds = yield all(map(\n      filesToUpload,\n      (file, fieldName) => call(doUploadFileCustomer, file, fieldName)\n    ))\n\n    const uploadedObj = {}\n    forEach(uploadedIds, (fileObj) => {\n      forEach(fileObj, (fileId, fieldName) => {\n        set(uploadedObj, fieldName, fileId)\n      })\n    })\n\n    const newDocumentsAfterDelete = reduce(\n      INITIAL_VALUES_DOCUMENTS,\n      (acc, doc, fieldName) => {\n        if (endsWith(fieldName, 'Id')) {\n          return acc\n        }\n\n        if (!isArray(doc) && !removedObj[fieldName]) {\n          return {\n            ...acc,\n            [`${ fieldName }Id`]: documents[fieldName]?.id || null\n          }\n        }\n\n        if (isArray(doc)) {\n          return {\n            ...acc,\n            [`${ fieldName }FileIds`]: filter(\n              map(\n                filter(documents[fieldName], (file) => !find(removedObj[fieldName], (fileRemoved) => file?.fileId === fileRemoved.id)),\n                (file) => file?.fileId\n              ),\n              (file) => !!file\n            )\n          }\n        }\n\n        return {\n          ...acc,\n          [`${ fieldName }Id`]: null\n        }\n      },\n      {}\n    )\n\n    const newDocumentsAfterUpload = mapValues(\n      newDocumentsAfterDelete,\n      (doc, fieldName) => {\n        if (uploadedObj[fieldName]) {\n          if (isArray(doc)) {\n            return [...doc, ...uploadedObj[fieldName]]\n          }\n          return uploadedObj[fieldName]\n        }\n        return doc\n      }\n    )\n\n    let id = client.id\n    if (!id) {\n      const { data } = yield call(postCustomerPreRegistry, { ...client, documents: newDocumentsAfterUpload })\n      id = data.id\n      yield put(AppActions.addAlert({ type: 'success', message: 'Cliente pré-cadastrado com sucesso!' }))\n    } else {\n      yield call(putCustomerPreRegistry, { ...client, documents: newDocumentsAfterUpload }, id)\n      yield put(AppActions.addAlert({ type: 'success', message: 'Pré-cadastrado atualizado com sucesso!' }))\n    }\n\n    yield call(onSuccess, id)\n    yield put(CustomerActions.saveCustomerPreRegistrySuccess())\n\n    // do delete files async\n    // yield all(map(filesToDelete, (file) => call(deleteFile, file.id)))\n  } catch (error) {\n    console.error('error', error)\n\n    yield put(AppActions.addAlert({ type: 'error', message: 'Falha ao salvar o cliente!' }))\n    yield call(onError, error)\n  }\n}\n\nfunction* doFinishCustomerPreRegistry ({\n  client, oldClient, onSuccess = () => {}, onError = () => {}\n}) {\n  try {\n    let id = client.id\n    yield put(CustomerActions.saveCustomerPreRegistry(\n      client,\n      oldClient,\n      (newId) => { id = newId },\n      onError\n    ))\n    yield take(CustomerTypes.SAVE_CUSTOMER_PRE_REGISTRY_SUCCESS)\n    if (id) {\n      yield call(putFinishCustomerPreRegistry, {}, id)\n\n      yield put(AppActions.addAlert({ type: 'success', message: 'Pré-cadastrado concluído com sucesso!' }))\n      yield call(onSuccess, id)\n    }\n  } catch (error) {\n    yield put(AppActions.addAlert({ type: 'error', message: 'Falha ao concluir o cadastro do cliente!' }))\n    yield call(onError, error)\n  }\n}\n\nexport default [\n  takeLatest(CustomerTypes.UPDATE_CUSTOMER, doUpdateCustomer),\n  takeLatest(CustomerTypes.CHANGE_RANKINGS, doChangeRankings),\n  takeLatest(CustomerTypes.DOWNLOAD_FILE_CUSTOMER, doDowloadFileCustomer),\n\n  takeLatest(CustomerTypes.SAVE_CUSTOMER_PRE_REGISTRY, doSaveCustomerPreRegistry),\n  takeLatest(CustomerTypes.FINISH_CUSTOMER_PRE_REGISTRY, doFinishCustomerPreRegistry)\n]\n"]},"metadata":{},"sourceType":"module"}