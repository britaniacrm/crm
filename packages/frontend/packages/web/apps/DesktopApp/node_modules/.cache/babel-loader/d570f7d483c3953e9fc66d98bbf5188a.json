{"ast":null,"code":"import { createActions } from 'reduxsauce';\n/**\n * Creating actions and types with reduxsauce.\n */\n\nexport const {\n  Types,\n  Creators\n} = createActions({\n  getAllWorkflows: ['params'],\n  setAllWorkflowsSuccess: ['list'],\n  getOneWorkflow: ['id'],\n  setOneWorkflowSuccess: ['workflow'],\n  getWorkflowTypes: [],\n  setWorkflowTypes: ['types'],\n  createWorkflow: ['params', 'onSuccess'],\n  updateWorkflow: ['params', 'id', 'onSuccess'],\n  deactivateWorkflow: ['id', 'onSuccess'],\n  updateLoaderState: ['loaderState', 'loaderName'],\n  answerWorkflow: ['baseUrl', 'answer', 'onSuccess', 'onError']\n});\nexport { Types as WorkflowTypes, Creators as WorkflowActions };","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/core/stores/workflow/workflow.actions.js"],"names":["createActions","Types","Creators","getAllWorkflows","setAllWorkflowsSuccess","getOneWorkflow","setOneWorkflowSuccess","getWorkflowTypes","setWorkflowTypes","createWorkflow","updateWorkflow","deactivateWorkflow","updateLoaderState","answerWorkflow","WorkflowTypes","WorkflowActions"],"mappings":"AAAA,SAASA,aAAT,QAA8B,YAA9B;AAEA;AACA;AACA;;AACA,OAAO,MAAM;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,IAAsBF,aAAa,CAAC;AAC/CG,EAAAA,eAAe,EAAE,CAAC,QAAD,CAD8B;AAE/CC,EAAAA,sBAAsB,EAAE,CAAC,MAAD,CAFuB;AAG/CC,EAAAA,cAAc,EAAE,CAAC,IAAD,CAH+B;AAI/CC,EAAAA,qBAAqB,EAAE,CAAC,UAAD,CAJwB;AAK/CC,EAAAA,gBAAgB,EAAE,EAL6B;AAM/CC,EAAAA,gBAAgB,EAAE,CAAC,OAAD,CAN6B;AAO/CC,EAAAA,cAAc,EAAE,CAAC,QAAD,EAAW,WAAX,CAP+B;AAQ/CC,EAAAA,cAAc,EAAE,CAAC,QAAD,EAAW,IAAX,EAAiB,WAAjB,CAR+B;AAS/CC,EAAAA,kBAAkB,EAAE,CAAC,IAAD,EAAO,WAAP,CAT2B;AAU/CC,EAAAA,iBAAiB,EAAE,CAAC,aAAD,EAAgB,YAAhB,CAV4B;AAY/CC,EAAAA,cAAc,EAAE,CAAC,SAAD,EAAY,QAAZ,EAAsB,WAAtB,EAAmC,SAAnC;AAZ+B,CAAD,CAAzC;AAeP,SACEZ,KAAK,IAAIa,aADX,EAEEZ,QAAQ,IAAIa,eAFd","sourcesContent":["import { createActions } from 'reduxsauce'\n\n/**\n * Creating actions and types with reduxsauce.\n */\nexport const { Types, Creators } = createActions({\n  getAllWorkflows: ['params'],\n  setAllWorkflowsSuccess: ['list'],\n  getOneWorkflow: ['id'],\n  setOneWorkflowSuccess: ['workflow'],\n  getWorkflowTypes: [],\n  setWorkflowTypes: ['types'],\n  createWorkflow: ['params', 'onSuccess'],\n  updateWorkflow: ['params', 'id', 'onSuccess'],\n  deactivateWorkflow: ['id', 'onSuccess'],\n  updateLoaderState: ['loaderState', 'loaderName'],\n\n  answerWorkflow: ['baseUrl', 'answer', 'onSuccess', 'onError']\n})\n\nexport {\n  Types as WorkflowTypes,\n  Creators as WorkflowActions\n}\n"]},"metadata":{},"sourceType":"module"}