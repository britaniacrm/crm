{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/components/TreeView/WorkflowCards/formatWorkflowCards.js\";\nimport React from 'react';\nimport find from 'lodash/find';\nimport { treeTypes } from '@britania-crm/constants/workflow.constants';\nimport I18n from '@britania-crm/i18n';\nimport CardHoc from '../CardHoc/CardHoc';\nimport ConditionCard from './ConditionCard';\nimport ResponseCard from './ResponseCard';\nimport TaskCard from './TaskCard';\nexport const formatWorkflowCards = ({\n  node\n}, {\n  readOnly,\n  deleteNode,\n  onAddOrEditTask\n}) => {\n  const Task = /*#__PURE__*/React.createElement(TaskCard, {\n    node: node,\n    onAddOrEditTask: onAddOrEditTask,\n    deleteNode: deleteNode,\n    readOnly: readOnly,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 16\n    }\n  });\n  const Response = /*#__PURE__*/React.createElement(ResponseCard, {\n    node: node,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 20\n    }\n  });\n  const Condition = /*#__PURE__*/React.createElement(ConditionCard, {\n    node: node,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 21\n    }\n  });\n  const renders = [{\n    type: treeTypes.TASK.type,\n    component: Task,\n    title: /*#__PURE__*/React.createElement(I18n, {\n      params: {\n        howMany: 1\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 14\n      }\n    }, \"task\")\n  }, {\n    type: treeTypes.CONDITION.type,\n    component: Condition,\n    title: /*#__PURE__*/React.createElement(I18n, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 14\n      }\n    }, \"conditional\")\n  }, {\n    type: treeTypes.RESPONSE.type,\n    component: Response,\n    title: /*#__PURE__*/React.createElement(I18n, {\n      params: {\n        requiresJustification: node.requiresJustification\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 14\n      }\n    }, \"response\")\n  }];\n  return {\n    title() {\n      const itemToRender = find(renders, item => {\n        var _node$type;\n\n        return item.type === ((_node$type = node.type) === null || _node$type === void 0 ? void 0 : _node$type.type);\n      });\n      return CardHoc({\n        component: itemToRender.component,\n        type: node.type,\n        title: itemToRender.title\n      });\n    },\n\n    className: 'tree-view-card',\n    listIndex: 0,\n    lowerSiblingCounts: []\n  };\n};","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/components/TreeView/WorkflowCards/formatWorkflowCards.js"],"names":["React","find","treeTypes","I18n","CardHoc","ConditionCard","ResponseCard","TaskCard","formatWorkflowCards","node","readOnly","deleteNode","onAddOrEditTask","Task","Response","Condition","renders","type","TASK","component","title","howMany","CONDITION","RESPONSE","requiresJustification","itemToRender","item","className","listIndex","lowerSiblingCounts"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAOC,IAAP,MAAiB,aAAjB;AAEA,SAASC,SAAT,QAA0B,4CAA1B;AACA,OAAOC,IAAP,MAAiB,oBAAjB;AAEA,OAAOC,OAAP,MAAoB,oBAApB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AACA,OAAOC,YAAP,MAAyB,gBAAzB;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,OAAO,MAAMC,mBAAmB,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,EAAW;AAC5CC,EAAAA,QAD4C;AAClCC,EAAAA,UADkC;AACtBC,EAAAA;AADsB,CAAX,KAE7B;AACJ,QAAMC,IAAI,gBAAG,oBAAC,QAAD;AAAU,IAAA,IAAI,EAAGJ,IAAjB;AAAwB,IAAA,eAAe,EAAGG,eAA1C;AAA4D,IAAA,UAAU,EAAGD,UAAzE;AAAsF,IAAA,QAAQ,EAAGD,QAAjG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAb;AAEA,QAAMI,QAAQ,gBAAG,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAGL,IAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAjB;AAEA,QAAMM,SAAS,gBAAG,oBAAC,aAAD;AAAe,IAAA,IAAI,EAAGN,IAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAlB;AAEA,QAAMO,OAAO,GAAG,CACd;AACEC,IAAAA,IAAI,EAAEf,SAAS,CAACgB,IAAV,CAAeD,IADvB;AAEEE,IAAAA,SAAS,EAAEN,IAFb;AAGEO,IAAAA,KAAK,eAAE,oBAAC,IAAD;AAAM,MAAA,MAAM,EAAG;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHT,GADc,EAMd;AACEJ,IAAAA,IAAI,EAAEf,SAAS,CAACoB,SAAV,CAAoBL,IAD5B;AAEEE,IAAAA,SAAS,EAAEJ,SAFb;AAGEK,IAAAA,KAAK,eAAE,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHT,GANc,EAWd;AACEH,IAAAA,IAAI,EAAEf,SAAS,CAACqB,QAAV,CAAmBN,IAD3B;AAEEE,IAAAA,SAAS,EAAEL,QAFb;AAGEM,IAAAA,KAAK,eAAE,oBAAC,IAAD;AAAM,MAAA,MAAM,EAAG;AAAEI,QAAAA,qBAAqB,EAAEf,IAAI,CAACe;AAA9B,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHT,GAXc,CAAhB;AAkBA,SAAO;AACLJ,IAAAA,KAAK,GAAI;AACP,YAAMK,YAAY,GAAGxB,IAAI,CAACe,OAAD,EAAWU,IAAD;AAAA;;AAAA,eAAUA,IAAI,CAACT,IAAL,oBAAcR,IAAI,CAACQ,IAAnB,+CAAc,WAAWA,IAAzB,CAAV;AAAA,OAAV,CAAzB;AAEA,aAAOb,OAAO,CAAC;AACbe,QAAAA,SAAS,EAAEM,YAAY,CAACN,SADX;AAEbF,QAAAA,IAAI,EAAER,IAAI,CAACQ,IAFE;AAGbG,QAAAA,KAAK,EAAEK,YAAY,CAACL;AAHP,OAAD,CAAd;AAKD,KATI;;AAULO,IAAAA,SAAS,EAAE,gBAVN;AAWLC,IAAAA,SAAS,EAAE,CAXN;AAYLC,IAAAA,kBAAkB,EAAE;AAZf,GAAP;AAcD,CAzCM","sourcesContent":["import React from 'react'\n\nimport find from 'lodash/find'\n\nimport { treeTypes } from '@britania-crm/constants/workflow.constants'\nimport I18n from '@britania-crm/i18n'\n\nimport CardHoc from '../CardHoc/CardHoc'\nimport ConditionCard from './ConditionCard'\nimport ResponseCard from './ResponseCard'\nimport TaskCard from './TaskCard'\n\nexport const formatWorkflowCards = ({ node }, {\n  readOnly, deleteNode, onAddOrEditTask\n}) => {\n  const Task = <TaskCard node={ node } onAddOrEditTask={ onAddOrEditTask } deleteNode={ deleteNode } readOnly={ readOnly } />\n\n  const Response = <ResponseCard node={ node } />\n\n  const Condition = <ConditionCard node={ node } />\n\n  const renders = [\n    {\n      type: treeTypes.TASK.type,\n      component: Task,\n      title: <I18n params={ { howMany: 1 } } >task</I18n>\n    },\n    {\n      type: treeTypes.CONDITION.type,\n      component: Condition,\n      title: <I18n>conditional</I18n>\n    },\n    {\n      type: treeTypes.RESPONSE.type,\n      component: Response,\n      title: <I18n params={ { requiresJustification: node.requiresJustification } }>response</I18n>\n    }\n  ]\n\n  return {\n    title () {\n      const itemToRender = find(renders, (item) => item.type === node.type?.type)\n\n      return CardHoc({\n        component: itemToRender.component,\n        type: node.type,\n        title: itemToRender.title\n      })\n    },\n    className: 'tree-view-card',\n    listIndex: 0,\n    lowerSiblingCounts: []\n  }\n}\n"]},"metadata":{},"sourceType":"module"}