{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/customers/components/CompaniesBranch/CompaniesBranch.js\";\nimport React, { useCallback, useMemo, memo } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport Grid from '@material-ui/core/Grid';\nimport { useT } from '@britania-crm/i18n';\nimport { clients } from '@britania-crm/services/apis/crmApi/resources/routes';\nimport DataTable from '@britania-crm/web-components/DataTable';\nimport { useRoutes } from '@britania-crm/web-src/routes/authenticated.routes';\nimport { getConfigsCompanysBranchColumns } from '../../utils';\nimport useStyles from './styles';\n\nconst CompaniesBranchTable = ({\n  id\n}) => {\n  const t = useT();\n  const classes = useStyles();\n  const history = useHistory();\n  const {\n    routes,\n    currentRoutePermissions\n  } = useRoutes();\n  const columns = useMemo(() => getConfigsCompanysBranchColumns(t), [t]);\n  const addMicroActions = useMemo(() => [{\n    title: t('customer request'),\n    action: row => console.log('test 1 ', row)\n  }, {\n    title: t('customer detail'),\n\n    action(row) {\n      history.push(routes.viewCustomer.path, {\n        params: {\n          mode: 'view',\n          id: row.branchCode\n        }\n      });\n    }\n\n  }, {\n    title: t('vpc panel'),\n    action: row => console.log('test 3', row)\n  }, {\n    title: t('customer wallet'),\n    action: row => console.log('test 4', row)\n  }, {\n    title: t('pre-registration history'),\n    action: row => console.log('test 5', row)\n  }], [history, routes, t]);\n  const onEditClick = useCallback((_, row) => {\n    history.push(routes.editCustomer.path, {\n      params: {\n        mode: 'edit',\n        id: row.branchCode\n      }\n    });\n  }, [history, routes]);\n  return /*#__PURE__*/React.createElement(Grid, {\n    container: true,\n    spacing: 1,\n    direction: \"row\",\n    justify: \"center\",\n    alignItems: \"center\",\n    className: classes.table,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(DataTable, {\n    options: {\n      search: false\n    },\n    data: clients.getParentCompaniesBranchesUrl(id),\n    columns: columns,\n    addMicroActions: addMicroActions,\n    onEditClick: currentRoutePermissions.EDITAR && onEditClick,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }));\n};\n\nCompaniesBranchTable.propTypes = {\n  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired\n};\nexport default memo(CompaniesBranchTable);","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/customers/components/CompaniesBranch/CompaniesBranch.js"],"names":["React","useCallback","useMemo","memo","useHistory","PropTypes","Grid","useT","clients","DataTable","useRoutes","getConfigsCompanysBranchColumns","useStyles","CompaniesBranchTable","id","t","classes","history","routes","currentRoutePermissions","columns","addMicroActions","title","action","row","console","log","push","viewCustomer","path","params","mode","branchCode","onEditClick","_","editCustomer","table","search","getParentCompaniesBranchesUrl","EDITAR","propTypes","oneOfType","string","number","isRequired"],"mappings":"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","sourcesContent":["import React, {\n  useCallback,\n  useMemo,\n  memo\n} from 'react'\nimport { useHistory } from 'react-router-dom'\n\nimport PropTypes from 'prop-types'\n\nimport Grid from '@material-ui/core/Grid'\n\nimport { useT } from '@britania-crm/i18n'\nimport { clients } from '@britania-crm/services/apis/crmApi/resources/routes'\nimport DataTable from '@britania-crm/web-components/DataTable'\nimport { useRoutes } from '@britania-crm/web-src/routes/authenticated.routes'\n\nimport { getConfigsCompanysBranchColumns } from '../../utils'\nimport useStyles from './styles'\n\nconst CompaniesBranchTable = ({ id }) => {\n  const t = useT()\n  const classes = useStyles()\n  const history = useHistory()\n  const { routes, currentRoutePermissions } = useRoutes()\n\n  const columns = useMemo(\n    () => getConfigsCompanysBranchColumns(t),\n    [t]\n  )\n\n  const addMicroActions = useMemo(() => [\n    { title: t('customer request'), action: (row) => console.log('test 1 ', row) },\n    {\n      title: t('customer detail'),\n      action (row) {\n        history.push(routes.viewCustomer.path, {\n          params: {\n            mode: 'view',\n            id: row.branchCode\n          }\n        })\n      }\n    },\n    { title: t('vpc panel'), action: (row) => console.log('test 3', row) },\n    { title: t('customer wallet'), action: (row) => console.log('test 4', row) },\n    { title: t('pre-registration history'), action: (row) => console.log('test 5', row) }\n  ], [history, routes, t])\n\n  const onEditClick = useCallback(\n    (_, row) => {\n      history.push(routes.editCustomer.path, {\n        params: {\n          mode: 'edit',\n          id: row.branchCode\n        }\n      })\n    },\n    [history, routes]\n  )\n\n  return (\n    <Grid\n      container\n      spacing={ 1 }\n      direction=\"row\"\n      justify=\"center\"\n      alignItems=\"center\"\n      className={ classes.table }\n    >\n      <DataTable\n        options={ { search: false } }\n        data={ clients.getParentCompaniesBranchesUrl(id) }\n        columns={ columns }\n        addMicroActions={ addMicroActions }\n        onEditClick={ currentRoutePermissions.EDITAR && onEditClick }\n      />\n    </Grid>\n  )\n}\n\nCompaniesBranchTable.propTypes = {\n  id: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number\n  ]).isRequired\n}\n\nexport default memo(CompaniesBranchTable)\n"]},"metadata":{},"sourceType":"module"}