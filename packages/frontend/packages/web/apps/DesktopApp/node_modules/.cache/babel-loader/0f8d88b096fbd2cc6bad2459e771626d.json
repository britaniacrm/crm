{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/dashboard/screens/DashboardScreen/DashboardScreen.js\";\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { MessageActions } from '@britania-crm/stores/message';\nimport { getLastMessage, getOneMessage } from '@britania-crm/stores/message/message.selectors';\nimport MessageCard from '@britania-crm/web-components/MessageCard';\nimport Popup from '@britania-crm/web-components/Popup';\nimport PreviewMessageboard from '@britania-crm/web-components/PreviewMessageboard';\n\nconst DashboardScreen = () => {\n  const dispatch = useCallback(useDispatch(), []);\n  const [openPopup, setOpenPopup] = useState(false);\n  const [anchorEl, setAnchorEl] = useState(null);\n  const message = useSelector(getLastMessage);\n  const lastMessage = useSelector(getOneMessage);\n  const getLastOneMessage = useCallback(id => {\n    dispatch(MessageActions.getOneMessage(id));\n  }, [dispatch]); // Função para carregar a lista de recados no primeiro carregamento da tela\n\n  useEffect(() => {\n    dispatch(MessageActions.getAllMessage());\n  }, [dispatch]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, message && /*#__PURE__*/React.createElement(MessageCard, {\n    item: message,\n    handlePopoverOpen: (event, id) => {\n      setAnchorEl(event.currentTarget);\n      setOpenPopup(true);\n      getLastOneMessage(id);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }), lastMessage && /*#__PURE__*/React.createElement(Popup, {\n    open: openPopup,\n    anchorEl: anchorEl,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(PreviewMessageboard, {\n    item: lastMessage,\n    handlePopoverClose: () => {\n      setOpenPopup(false);\n      setAnchorEl(null);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  })));\n};\n\nexport default DashboardScreen;","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/web/src/modules/dashboard/screens/DashboardScreen/DashboardScreen.js"],"names":["React","useState","useEffect","useCallback","useDispatch","useSelector","MessageActions","getLastMessage","getOneMessage","MessageCard","Popup","PreviewMessageboard","DashboardScreen","dispatch","openPopup","setOpenPopup","anchorEl","setAnchorEl","message","lastMessage","getLastOneMessage","id","getAllMessage","event","currentTarget"],"mappings":";AAAA,OAAOA,KAAP,IACEC,QADF,EAEEC,SAFF,EAGEC,WAHF,QAIO,OAJP;AAKA,SACEC,WADF,EAEEC,WAFF,QAGO,aAHP;AAKA,SAASC,cAAT,QAA+B,8BAA/B;AACA,SACEC,cADF,EAEEC,aAFF,QAGO,gDAHP;AAIA,OAAOC,WAAP,MAAwB,0CAAxB;AACA,OAAOC,KAAP,MAAkB,oCAAlB;AACA,OAAOC,mBAAP,MAAgC,kDAAhC;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAC5B,QAAMC,QAAQ,GAAGV,WAAW,CAACC,WAAW,EAAZ,EAAgB,EAAhB,CAA5B;AAEA,QAAM,CAACU,SAAD,EAAYC,YAAZ,IAA4Bd,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACe,QAAD,EAAWC,WAAX,IAA0BhB,QAAQ,CAAC,IAAD,CAAxC;AAEA,QAAMiB,OAAO,GAAGb,WAAW,CAACE,cAAD,CAA3B;AACA,QAAMY,WAAW,GAAGd,WAAW,CAACG,aAAD,CAA/B;AAEA,QAAMY,iBAAiB,GAAGjB,WAAW,CAAEkB,EAAD,IAAQ;AAC5CR,IAAAA,QAAQ,CAACP,cAAc,CAACE,aAAf,CAA6Ba,EAA7B,CAAD,CAAR;AACD,GAFoC,EAElC,CAACR,QAAD,CAFkC,CAArC,CAT4B,CAa5B;;AACAX,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,QAAQ,CAACP,cAAc,CAACgB,aAAf,EAAD,CAAR;AACD,GAFQ,EAEN,CAACT,QAAD,CAFM,CAAT;AAIA,sBACE,0CAEIK,OAAO,iBACL,oBAAC,WAAD;AACE,IAAA,IAAI,EAAGA,OADT;AAEE,IAAA,iBAAiB,EAAG,CAACK,KAAD,EAAQF,EAAR,KAAe;AACjCJ,MAAAA,WAAW,CAACM,KAAK,CAACC,aAAP,CAAX;AACAT,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACAK,MAAAA,iBAAiB,CAACC,EAAD,CAAjB;AACD,KANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHN,EAcIF,WAAW,iBACT,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAGL,SAAd;AAA0B,IAAA,QAAQ,EAAGE,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,mBAAD;AACE,IAAA,IAAI,EAAGG,WADT;AAEE,IAAA,kBAAkB,EAAG,MAAM;AACzBJ,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAE,MAAAA,WAAW,CAAC,IAAD,CAAX;AACD,KALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAfN,CADF;AA6BD,CA/CD;;AAiDA,eAAeL,eAAf","sourcesContent":["import React, {\n  useState,\n  useEffect,\n  useCallback\n} from 'react'\nimport {\n  useDispatch,\n  useSelector\n} from 'react-redux'\n\nimport { MessageActions } from '@britania-crm/stores/message'\nimport {\n  getLastMessage,\n  getOneMessage\n} from '@britania-crm/stores/message/message.selectors'\nimport MessageCard from '@britania-crm/web-components/MessageCard'\nimport Popup from '@britania-crm/web-components/Popup'\nimport PreviewMessageboard from '@britania-crm/web-components/PreviewMessageboard'\n\nconst DashboardScreen = () => {\n  const dispatch = useCallback(useDispatch(), [])\n\n  const [openPopup, setOpenPopup] = useState(false)\n  const [anchorEl, setAnchorEl] = useState(null)\n\n  const message = useSelector(getLastMessage)\n  const lastMessage = useSelector(getOneMessage)\n\n  const getLastOneMessage = useCallback((id) => {\n    dispatch(MessageActions.getOneMessage(id))\n  }, [dispatch])\n\n  // Função para carregar a lista de recados no primeiro carregamento da tela\n  useEffect(() => {\n    dispatch(MessageActions.getAllMessage())\n  }, [dispatch])\n\n  return (\n    <>\n      {\n        message && (\n          <MessageCard\n            item={ message }\n            handlePopoverOpen={ (event, id) => {\n              setAnchorEl(event.currentTarget)\n              setOpenPopup(true)\n              getLastOneMessage(id)\n            } }\n          />\n        )\n      }\n      {\n        lastMessage && (\n          <Popup open={ openPopup } anchorEl={ anchorEl }>\n            <PreviewMessageboard\n              item={ lastMessage }\n              handlePopoverClose={ () => {\n                setOpenPopup(false)\n                setAnchorEl(null)\n              } }\n            />\n          </Popup>\n        )\n      }\n    </>\n  )\n}\n\nexport default DashboardScreen\n"]},"metadata":{},"sourceType":"module"}