{"ast":null,"code":"import { useState, useEffect, useMemo, useCallback } from 'react';\nimport useSWR from 'swr';\nimport isEmpty from 'lodash/isEmpty';\n\nconst useFetch = (axiosInstance, url = '', axiosParams, swrConfigs) => {\n  const {\n    data,\n    error,\n    mutate,\n    isValidating\n  } = useSWR(url, async path => {\n    const response = await axiosInstance.get(path, axiosParams);\n    return response.data;\n  }, swrConfigs);\n  const [loading, setLoading] = useState(false);\n  const refresh = useCallback((...mutateOptions) => {\n    setLoading(true);\n    mutate(...mutateOptions);\n  }, [mutate]);\n  const state = useMemo(() => ({\n    data,\n    error,\n    mutate: refresh,\n    isValidating,\n    loading\n  }), [data, error, isValidating, loading, refresh]);\n  useEffect(() => {\n    if (isEmpty(data) && isValidating) {\n      setLoading(true);\n    } else if (!isValidating) {\n      setLoading(false);\n    }\n  }, [data, isValidating]);\n  return state;\n};\n\nexport default useFetch;","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/core/services/hooks/useFetch.js"],"names":["useState","useEffect","useMemo","useCallback","useSWR","isEmpty","useFetch","axiosInstance","url","axiosParams","swrConfigs","data","error","mutate","isValidating","path","response","get","loading","setLoading","refresh","mutateOptions","state"],"mappings":"AAAA,SACEA,QADF,EAEEC,SAFF,EAGEC,OAHF,EAIEC,WAJF,QAKO,OALP;AAOA,OAAOC,MAAP,MAAmB,KAAnB;AAEA,OAAOC,OAAP,MAAoB,gBAApB;;AAEA,MAAMC,QAAQ,GAAG,CAACC,aAAD,EAAgBC,GAAG,GAAG,EAAtB,EAA0BC,WAA1B,EAAuCC,UAAvC,KAAsD;AACrE,QAAM;AACJC,IAAAA,IADI;AACEC,IAAAA,KADF;AACSC,IAAAA,MADT;AACiBC,IAAAA;AADjB,MAEFV,MAAM,CAACI,GAAD,EAAM,MAAOO,IAAP,IAAgB;AAC9B,UAAMC,QAAQ,GAAG,MAAMT,aAAa,CAACU,GAAd,CAAkBF,IAAlB,EAAwBN,WAAxB,CAAvB;AACA,WAAOO,QAAQ,CAACL,IAAhB;AACD,GAHS,EAGPD,UAHO,CAFV;AAOA,QAAM,CAACQ,OAAD,EAAUC,UAAV,IAAwBnB,QAAQ,CAAC,KAAD,CAAtC;AAEA,QAAMoB,OAAO,GAAGjB,WAAW,CACzB,CAAC,GAAGkB,aAAJ,KAAsB;AACpBF,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAN,IAAAA,MAAM,CAAC,GAAGQ,aAAJ,CAAN;AACD,GAJwB,EAKzB,CAACR,MAAD,CALyB,CAA3B;AAQA,QAAMS,KAAK,GAAGpB,OAAO,CACnB,OAAO;AACLS,IAAAA,IADK;AAELC,IAAAA,KAFK;AAGLC,IAAAA,MAAM,EAAEO,OAHH;AAILN,IAAAA,YAJK;AAKLI,IAAAA;AALK,GAAP,CADmB,EAQnB,CAACP,IAAD,EAAOC,KAAP,EAAcE,YAAd,EAA4BI,OAA5B,EAAqCE,OAArC,CARmB,CAArB;AAWAnB,EAAAA,SAAS,CACP,MAAM;AACJ,QAAII,OAAO,CAACM,IAAD,CAAP,IAAiBG,YAArB,EAAmC;AACjCK,MAAAA,UAAU,CAAC,IAAD,CAAV;AACD,KAFD,MAEO,IAAI,CAACL,YAAL,EAAmB;AACxBK,MAAAA,UAAU,CAAC,KAAD,CAAV;AACD;AACF,GAPM,EAQP,CAACR,IAAD,EAAOG,YAAP,CARO,CAAT;AAWA,SAAOQ,KAAP;AACD,CAzCD;;AA2CA,eAAehB,QAAf","sourcesContent":["import {\n  useState,\n  useEffect,\n  useMemo,\n  useCallback\n} from 'react'\n\nimport useSWR from 'swr'\n\nimport isEmpty from 'lodash/isEmpty'\n\nconst useFetch = (axiosInstance, url = '', axiosParams, swrConfigs) => {\n  const {\n    data, error, mutate, isValidating\n  } = useSWR(url, async (path) => {\n    const response = await axiosInstance.get(path, axiosParams)\n    return response.data\n  }, swrConfigs)\n\n  const [loading, setLoading] = useState(false)\n\n  const refresh = useCallback(\n    (...mutateOptions) => {\n      setLoading(true)\n      mutate(...mutateOptions)\n    },\n    [mutate]\n  )\n\n  const state = useMemo(\n    () => ({\n      data,\n      error,\n      mutate: refresh,\n      isValidating,\n      loading\n    }),\n    [data, error, isValidating, loading, refresh]\n  )\n\n  useEffect(\n    () => {\n      if (isEmpty(data) && isValidating) {\n        setLoading(true)\n      } else if (!isValidating) {\n        setLoading(false)\n      }\n    },\n    [data, isValidating]\n  )\n\n  return state\n}\n\nexport default useFetch\n"]},"metadata":{},"sourceType":"module"}