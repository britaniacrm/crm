{"ast":null,"code":"import * as Yup from 'yup';\nimport flow from 'lodash/fp/flow';\nimport isEmpty from 'lodash/isEmpty';\nimport dateRange from '@britania-crm/forms/validators/dateRange.validator';\nimport email from '@britania-crm/forms/validators/email.validator';\nimport file from '@britania-crm/forms/validators/file.validator';\nimport phone from '@britania-crm/forms/validators/phone.validator';\nimport required from '@britania-crm/forms/validators/required.validator'; // import ImgProfilePlaceholder from '@britania-crm/styles/assets/images/profile_avatar_default.png'\n\nexport const INITIAL_VALUES = {\n  imageFile: '',\n  imageId: null,\n  username: '',\n  integratedAd: false,\n  email: '',\n  phone: '',\n  representativeCodes: [],\n  customerHierarchyEnabled: false,\n  substituteUserId: {},\n  substituteUserPeriod: {\n    from: '',\n    to: ''\n  },\n  isActive: true,\n  profiles: []\n};\nexport default (({\n  t,\n  data\n}) => Yup.object().shape({\n  username: required({\n    t\n  })(Yup.string()),\n  email: flow(email({\n    t\n  }), required({\n    t\n  }))(Yup.string()),\n  phone: phone({\n    t\n  })(Yup.string()),\n  representativeCodes: Yup.array(),\n  representativeCodesChecked: Yup.bool(),\n  customerHierarchyEnabled: Yup.bool(),\n  substituteUserId: Yup.object(),\n  substituteUserPeriod: (() => {\n    let YupInstance = dateRange({\n      t\n    })(Yup.object());\n\n    if (!isEmpty(data.substituteUserId)) {\n      YupInstance = required({\n        t,\n        isNotText: true,\n        isDateRange: true\n      })(YupInstance);\n    }\n\n    return YupInstance;\n  })(),\n  profiles: required({\n    t,\n    isNotText: true\n  })(Yup.array()),\n  imageFile: file({\n    t\n  })(Yup.mixed()),\n  // campos não utilizados no form\n  imageId: Yup.number().nullable(),\n  integratedAd: Yup.bool(),\n  isActive: Yup.bool()\n}));","map":{"version":3,"sources":["/home/rafael/Documentos/britania/COM-front/packages/core/forms/schemas/user/user.schema.js"],"names":["Yup","flow","isEmpty","dateRange","email","file","phone","required","INITIAL_VALUES","imageFile","imageId","username","integratedAd","representativeCodes","customerHierarchyEnabled","substituteUserId","substituteUserPeriod","from","to","isActive","profiles","t","data","object","shape","string","array","representativeCodesChecked","bool","YupInstance","isNotText","isDateRange","mixed","number","nullable"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,KAArB;AAEA,OAAOC,IAAP,MAAiB,gBAAjB;AACA,OAAOC,OAAP,MAAoB,gBAApB;AAEA,OAAOC,SAAP,MAAsB,oDAAtB;AACA,OAAOC,KAAP,MAAkB,gDAAlB;AACA,OAAOC,IAAP,MAAiB,+CAAjB;AACA,OAAOC,KAAP,MAAkB,gDAAlB;AACA,OAAOC,QAAP,MAAqB,mDAArB,C,CACA;;AAEA,OAAO,MAAMC,cAAc,GAAG;AAC5BC,EAAAA,SAAS,EAAE,EADiB;AAE5BC,EAAAA,OAAO,EAAE,IAFmB;AAG5BC,EAAAA,QAAQ,EAAE,EAHkB;AAI5BC,EAAAA,YAAY,EAAE,KAJc;AAK5BR,EAAAA,KAAK,EAAE,EALqB;AAM5BE,EAAAA,KAAK,EAAE,EANqB;AAO5BO,EAAAA,mBAAmB,EAAE,EAPO;AAQ5BC,EAAAA,wBAAwB,EAAE,KARE;AAS5BC,EAAAA,gBAAgB,EAAE,EATU;AAU5BC,EAAAA,oBAAoB,EAAE;AACpBC,IAAAA,IAAI,EAAE,EADc;AAEpBC,IAAAA,EAAE,EAAE;AAFgB,GAVM;AAc5BC,EAAAA,QAAQ,EAAE,IAdkB;AAe5BC,EAAAA,QAAQ,EAAE;AAfkB,CAAvB;AAkBP,gBAAe,CAAC;AAAEC,EAAAA,CAAF;AAAKC,EAAAA;AAAL,CAAD,KAAiBtB,GAAG,CAACuB,MAAJ,GAAaC,KAAb,CAAmB;AACjDb,EAAAA,QAAQ,EAAEJ,QAAQ,CAAC;AAAEc,IAAAA;AAAF,GAAD,CAAR,CAAgBrB,GAAG,CAACyB,MAAJ,EAAhB,CADuC;AAEjDrB,EAAAA,KAAK,EAAEH,IAAI,CACTG,KAAK,CAAC;AAAEiB,IAAAA;AAAF,GAAD,CADI,EAETd,QAAQ,CAAC;AAAEc,IAAAA;AAAF,GAAD,CAFC,CAAJ,CAGLrB,GAAG,CAACyB,MAAJ,EAHK,CAF0C;AAMjDnB,EAAAA,KAAK,EAAEA,KAAK,CAAC;AAAEe,IAAAA;AAAF,GAAD,CAAL,CAAarB,GAAG,CAACyB,MAAJ,EAAb,CAN0C;AAOjDZ,EAAAA,mBAAmB,EAAEb,GAAG,CAAC0B,KAAJ,EAP4B;AAQjDC,EAAAA,0BAA0B,EAAE3B,GAAG,CAAC4B,IAAJ,EARqB;AASjDd,EAAAA,wBAAwB,EAAEd,GAAG,CAAC4B,IAAJ,EATuB;AAUjDb,EAAAA,gBAAgB,EAAEf,GAAG,CAACuB,MAAJ,EAV+B;AAWjDP,EAAAA,oBAAoB,EAAE,CAAC,MAAM;AAC3B,QAAIa,WAAW,GAAG1B,SAAS,CAAC;AAAEkB,MAAAA;AAAF,KAAD,CAAT,CAAiBrB,GAAG,CAACuB,MAAJ,EAAjB,CAAlB;;AACA,QAAI,CAACrB,OAAO,CAACoB,IAAI,CAACP,gBAAN,CAAZ,EAAqC;AACnCc,MAAAA,WAAW,GAAGtB,QAAQ,CAAC;AACrBc,QAAAA,CADqB;AAErBS,QAAAA,SAAS,EAAE,IAFU;AAGrBC,QAAAA,WAAW,EAAE;AAHQ,OAAD,CAAR,CAIXF,WAJW,CAAd;AAKD;;AACD,WAAOA,WAAP;AACD,GAVqB,GAX2B;AAsBjDT,EAAAA,QAAQ,EAAEb,QAAQ,CAAC;AAAEc,IAAAA,CAAF;AAAKS,IAAAA,SAAS,EAAE;AAAhB,GAAD,CAAR,CAAiC9B,GAAG,CAAC0B,KAAJ,EAAjC,CAtBuC;AAuBjDjB,EAAAA,SAAS,EAAEJ,IAAI,CAAC;AAAEgB,IAAAA;AAAF,GAAD,CAAJ,CAAYrB,GAAG,CAACgC,KAAJ,EAAZ,CAvBsC;AAyBjD;AACAtB,EAAAA,OAAO,EAAEV,GAAG,CAACiC,MAAJ,GAAaC,QAAb,EA1BwC;AA2BjDtB,EAAAA,YAAY,EAAEZ,GAAG,CAAC4B,IAAJ,EA3BmC;AA4BjDT,EAAAA,QAAQ,EAAEnB,GAAG,CAAC4B,IAAJ;AA5BuC,CAAnB,CAAhC","sourcesContent":["import * as Yup from 'yup'\n\nimport flow from 'lodash/fp/flow'\nimport isEmpty from 'lodash/isEmpty'\n\nimport dateRange from '@britania-crm/forms/validators/dateRange.validator'\nimport email from '@britania-crm/forms/validators/email.validator'\nimport file from '@britania-crm/forms/validators/file.validator'\nimport phone from '@britania-crm/forms/validators/phone.validator'\nimport required from '@britania-crm/forms/validators/required.validator'\n// import ImgProfilePlaceholder from '@britania-crm/styles/assets/images/profile_avatar_default.png'\n\nexport const INITIAL_VALUES = {\n  imageFile: '',\n  imageId: null,\n  username: '',\n  integratedAd: false,\n  email: '',\n  phone: '',\n  representativeCodes: [],\n  customerHierarchyEnabled: false,\n  substituteUserId: {},\n  substituteUserPeriod: {\n    from: '',\n    to: ''\n  },\n  isActive: true,\n  profiles: []\n}\n\nexport default ({ t, data }) => Yup.object().shape({\n  username: required({ t })(Yup.string()),\n  email: flow(\n    email({ t }),\n    required({ t })\n  )(Yup.string()),\n  phone: phone({ t })(Yup.string()),\n  representativeCodes: Yup.array(),\n  representativeCodesChecked: Yup.bool(),\n  customerHierarchyEnabled: Yup.bool(),\n  substituteUserId: Yup.object(),\n  substituteUserPeriod: (() => {\n    let YupInstance = dateRange({ t })(Yup.object())\n    if (!isEmpty(data.substituteUserId)) {\n      YupInstance = required({\n        t,\n        isNotText: true,\n        isDateRange: true\n      })(YupInstance)\n    }\n    return YupInstance\n  })(),\n  profiles: required({ t, isNotText: true })(Yup.array()),\n  imageFile: file({ t })(Yup.mixed()),\n\n  // campos não utilizados no form\n  imageId: Yup.number().nullable(),\n  integratedAd: Yup.bool(),\n  isActive: Yup.bool()\n})\n"]},"metadata":{},"sourceType":"module"}